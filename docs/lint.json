[
  {
    "name": "encodeBinary",
    "filePath": "src/class/BNB/amino.js",
    "lines": [
      {
        "lineNumber": 81,
        "line": "/**"
      },
      {
        "lineNumber": 82,
        "line": " * This is the main entrypoint for encoding all types in binary form."
      },
      {
        "lineNumber": 83,
        "line": " * @category amino"
      },
      {
        "lineNumber": 84,
        "line": " * @param {*} js data type (not null, not undefined)"
      },
      {
        "lineNumber": 85,
        "line": " * @param {Number} field index of object"
      },
      {
        "lineNumber": 86,
        "line": " * @param {Boolean} isByteLenPrefix"
      },
      {
        "lineNumber": 87,
        "line": " * @return {Buffer} binary of object."
      },
      {
        "lineNumber": 88,
        "line": " */"
      },
      {
        "lineNumber": 89,
        "line": "export const encodeBinary = ("
      }
    ],
    "codeParams": [
      "val",
      "fieldNum",
      "isByteLenPrefix"
    ],
    "docParams": [
      "js",
      "field",
      "isByteLenPrefix"
    ]
  },
  {
    "name": "encodeObjectBinary",
    "filePath": "src/class/BNB/amino.js",
    "lines": [
      {
        "lineNumber": 138,
        "line": "/**"
      },
      {
        "lineNumber": 139,
        "line": " * @category amino"
      },
      {
        "lineNumber": 140,
        "line": " * @param {Object} obj"
      },
      {
        "lineNumber": 141,
        "line": " * @return {Buffer} with bytes length prefixed"
      },
      {
        "lineNumber": 142,
        "line": " */"
      },
      {
        "lineNumber": 143,
        "line": "export const encodeObjectBinary = (obj, isByteLenPrefix) => {"
      }
    ],
    "codeParams": [
      "obj",
      "isByteLenPrefix"
    ],
    "docParams": [
      "obj"
    ]
  },
  {
    "name": "getLtcAddress",
    "filePath": "src/helpers/coreHelper.js",
    "lines": [
      {
        "lineNumber": 663,
        "line": "/**"
      },
      {
        "lineNumber": 664,
        "line": " * Getting Litecoin address by node and derivation index"
      },
      {
        "lineNumber": 665,
        "line": " * @param {Object} node - Input data for a transaction"
      },
      {
        "lineNumber": 666,
        "line": " * @param {number} childIndex - Derivation index"
      },
      {
        "lineNumber": 667,
        "line": " * @param {boolean} withoutPrefix - Flag for prefix"
      },
      {
        "lineNumber": 668,
        "line": " * @returns {string} Returns address"
      },
      {
        "lineNumber": 669,
        "line": " */"
      },
      {
        "lineNumber": 670,
        "line": ""
      },
      {
        "lineNumber": 671,
        "line": "export function getLtcAddress (node, childIndex) {"
      }
    ],
    "codeParams": [
      "node",
      "childIndex"
    ],
    "docParams": [
      "node",
      "childIndex",
      "withoutPrefix"
    ]
  },
  {
    "name": "Wallet#startSync",
    "filePath": "src/index.js",
    "lines": [
      {
        "lineNumber": 197,
        "line": "  /**"
      },
      {
        "lineNumber": 198,
        "line": "   * The method starts synchronization of selected coin wallet"
      },
      {
        "lineNumber": 199,
        "line": "   * @param {string} coin - Coin ticker (required)"
      },
      {
        "lineNumber": 200,
        "line": "   * @param {number, string} type - Type of coin (optional)"
      },
      {
        "lineNumber": 201,
        "line": "   * @returns {Promise<Object>} Returns object with synchronization information"
      },
      {
        "lineNumber": 202,
        "line": "   * @returns {Object} sync"
      },
      {
        "lineNumber": 203,
        "line": "   * @returns {string} sync.address - Ethereum wallet address"
      },
      {
        "lineNumber": 204,
        "line": "   * @returns {number} sync.balance - Ethereum balance in wei"
      },
      {
        "lineNumber": 205,
        "line": "   * @returns {Array} sync.transactions - The list of Ethereum transactions"
      },
      {
        "lineNumber": 206,
        "line": "   */"
      },
      {
        "lineNumber": 207,
        "line": "  async startSync ({coin, type}) {"
      }
    ],
    "codeParams": [
      "*"
    ],
    "docParams": [
      "coin",
      "type"
    ]
  },
  {
    "name": "Wallet#setApiEndpoint",
    "filePath": "src/index.js",
    "lines": [
      {
        "lineNumber": 398,
        "line": "  /**"
      },
      {
        "lineNumber": 399,
        "line": "   * Sets the API Endpoint"
      },
      {
        "lineNumber": 400,
        "line": "   *"
      },
      {
        "lineNumber": 401,
        "line": "   * @type {Object} api"
      },
      {
        "lineNumber": 402,
        "line": "   * @param {string} api.btc - Url address of bitcoin endpoint"
      },
      {
        "lineNumber": 403,
        "line": "   * @param {string} api.btcFee - Url address of bitcoin fee endpoint"
      },
      {
        "lineNumber": 404,
        "line": "   * @param {string} api.eth - Url address of ethereum endpoint"
      },
      {
        "lineNumber": 405,
        "line": "   * @param {string} api.bch - Url address of bitcoin cash endpoint"
      },
      {
        "lineNumber": 406,
        "line": "   * @param {string} api.btcv - Url address of bitcoin vault endpoint"
      },
      {
        "lineNumber": 407,
        "line": "   * @param {string} api.ltc - Url address of litecoin endpoint"
      },
      {
        "lineNumber": 408,
        "line": "   * @param {string} api.doge - Url address of dogecoin endpoint"
      },
      {
        "lineNumber": 409,
        "line": "   * @param {string} api.dogeFee - Url address of dogecoin endpoint"
      },
      {
        "lineNumber": 410,
        "line": "   */"
      },
      {
        "lineNumber": 411,
        "line": ""
      },
      {
        "lineNumber": 412,
        "line": "  setApiEndpoint (api) {"
      }
    ],
    "codeParams": [
      "api"
    ],
    "docParams": []
  }
]