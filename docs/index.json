[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/Wrapper.js",
    "content": "import Worker from 'worker-loader!./workers/wallet.worker.js'\n\nconst resolves = {}\nconst rejects = {}\nlet globalMsgId = 0\n\n/**\n * Class Wrapper\n * @class\n *\n * Wrapper for communicating with Web Workers, using Promises\n */\n\nexport default class Wrapper {\n  constructor () {\n    this.worker = new Worker()\n    this.worker.onmessage = handleMsg\n  }\n  \n  /**\n   * Main class method. Send message to the worker\n   * @param {string} method - Method name\n   * @param {Object} value - Data set for a specific method\n   * @returns {*|Promise<Object>} - An object with data that depends on a specific method\n   */\n  method (method, value) {\n    return sendMsg({method, value}, this.worker)\n  }\n}\n\n/**\n * Activate calculation in the worker, returning a promise\n * @param {Object} payload\n * @param {worker} worker\n * @returns {Promise<Object>}\n */\n\nfunction sendMsg (payload, worker) {\n  const msgId = globalMsgId++\n\n  const msg = {\n    id: msgId,\n    payload\n  }\n\n  return new Promise(function (resolve, reject) {\n    resolves[msgId] = resolve\n    rejects[msgId] = reject\n    worker.postMessage(msg)\n  })\n}\n\n/**\n * Handle incoming calculation result\n * @param {Object} msg\n */\n\nfunction handleMsg (msg) {\n  const {id, error, payload} = msg.data\n  if (error) {\n    const reject = rejects[id]\n    if (reject) {\n      if (error) {\n        reject(error)\n      } else {\n        reject('Got nothing')\n      }\n    }\n  } else if (payload) {\n    const resolve = resolves[id]\n    if (resolve) {\n      resolve(payload)\n    }\n  }\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/Wrapper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "resolves",
    "memberof": "src/Wrapper.js",
    "static": true,
    "longname": "src/Wrapper.js~resolves",
    "access": "public",
    "export": false,
    "importPath": "lumi-web-core/src/Wrapper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "rejects",
    "memberof": "src/Wrapper.js",
    "static": true,
    "longname": "src/Wrapper.js~rejects",
    "access": "public",
    "export": false,
    "importPath": "lumi-web-core/src/Wrapper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "globalMsgId",
    "memberof": "src/Wrapper.js",
    "static": true,
    "longname": "src/Wrapper.js~globalMsgId",
    "access": "public",
    "export": false,
    "importPath": "lumi-web-core/src/Wrapper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "class",
    "name": "Wrapper",
    "memberof": "src/Wrapper.js",
    "static": true,
    "longname": "src/Wrapper.js~Wrapper",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/Wrapper.js",
    "importStyle": "Wrapper",
    "description": "Class Wrapper",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "\nWrapper for communicating with Web Workers, using Promises"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 53,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Wrapper.js~Wrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Wrapper.js~Wrapper#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "worker",
    "memberof": "src/Wrapper.js~Wrapper",
    "static": false,
    "longname": "src/Wrapper.js~Wrapper#worker",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "method",
    "memberof": "src/Wrapper.js~Wrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Wrapper.js~Wrapper#method",
    "access": "public",
    "description": "Main class method. Send message to the worker",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*|Promise<Object>} - An object with data that depends on a specific method"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "Method name"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Data set for a specific method"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*",
        "Promise<Object>"
      ],
      "spread": false,
      "description": "An object with data that depends on a specific method"
    }
  },
  {
    "__docId__": 56,
    "kind": "function",
    "name": "sendMsg",
    "memberof": "src/Wrapper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Wrapper.js~sendMsg",
    "access": "public",
    "export": false,
    "importPath": "lumi-web-core/src/Wrapper.js",
    "importStyle": null,
    "description": "Activate calculation in the worker, returning a promise",
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "payload",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "worker"
        ],
        "spread": false,
        "optional": false,
        "name": "worker",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 57,
    "kind": "function",
    "name": "handleMsg",
    "memberof": "src/Wrapper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Wrapper.js~handleMsg",
    "access": "public",
    "export": false,
    "importPath": "lumi-web-core/src/Wrapper.js",
    "importStyle": null,
    "description": "Handle incoming calculation result",
    "lineNumber": 58,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 58,
    "kind": "file",
    "name": "src/class/BCH/BitcoinCashSync.js",
    "content": "import Request from '@/helpers/Request'\nimport {getCashAddress, convertToCashAddress} from '@/helpers/coreHelper'\n\n/**\n * Class BitcoinCashSync.\n * This class allows you to get information about the balance on a Bitcoin Cash wallet,\n * the list of unspent, a set of addresses that participated in transactions, and a list of transactions\n * @class\n */\n\nexport default class BitcoinCashSync {\n  /**\n   * Create a BitcoinCashSync\n   * @param {Object} externalNode - External Bitcoin Cash node\n   * @param {Object} internalNode - Internal Bitcoin Cash node\n   * @param {Object} api - A set of URLs for getting information about Bitcoin Cash addresses\n   * @param {Object} headers - Request headers\n   */\n  constructor (externalNode, internalNode, api, headers) {\n    this.externalNode = externalNode\n    this.internalNode = internalNode\n    this.api = api\n    this.balance = 0\n    this.latestBlock = 0\n    this.unspent = []\n    this.addresses = {\n      external: [],\n      internal: [],\n      empty: {},\n      all: []\n    }\n    this.deriveAddress = {\n      internal: {},\n      external: {}\n    }\n    this.transactions = {\n      all: [],\n      unique: []\n    }\n    this.fee = [\n      {\n        feePerByte: 3,\n        level: 'Regular'\n      }\n    ]\n\n    this.request = new Request(this.api.bch, headers)\n  }\n\n  /**\n   * The method that starts the synchronization Bitcoin Cash part of wallet\n   * @returns {Promise<boolean>}\n   * @constructor\n   */\n\n  async Start () {\n    this.transactions = {\n      all: [],\n      unique: []\n    }\n    this.unspent = []\n    await this.getAddresses()\n    this.getBalance()\n  }\n\n  /**\n   * Getting internal and external addresses that were involved in transactions\n   * @returns {Promise<boolean>}\n   */\n\n  async getAddresses () {\n    this.addresses.external = await this.getAddressesByNode(this.externalNode, 'external')\n    this.addresses.internal = await this.getAddressesByNode(this.internalNode, 'internal')\n    this.addresses.empty = {\n      external: this.addresses.external[this.addresses.external.length - 1],\n      internal: this.addresses.internal[this.addresses.internal.length - 1]\n    }\n\n    this.addresses.all = [...this.addresses.external, ...this.addresses.internal].map((item) => item.address)\n    await this.processTransactions()\n    await this.getTxInfoForUnspent()\n  }\n\n  /**\n   * Auxiliary method that gets the Bitcoin Cash address by node and index\n   * @param {Object} node - Bitcoin Cash node\n   * @param {string} type - Node type (external or internal)\n   * @param {number} from - The index that the derivation starts from\n   * @param {number} to - Index to which deprivation occurs\n   * @returns {Promise<Array>} Returns array of addresses\n   * @private\n   */\n\n  async _getArrayOfAddresses (node, type, from, to) {\n    let addresses = []\n\n    for (let i = from; i < to; i++) {\n      let address = ''\n\n      if (this.deriveAddress[type].hasOwnProperty(i)) {\n        address = this.deriveAddress[type][i]\n      } else {\n        address = getCashAddress(node, i)\n        this.deriveAddress[type][i] = address\n      }\n      addresses.push(address)\n    }\n\n    return addresses\n  }\n\n  /**\n   * Returns the derivation index for an address\n   * @param {string} address - Legacy Bitcoin Cash address\n   */\n\n  _getDeriveIndexByAddress (address) {\n    let find = this.addresses.external.find(item => item.address === address)\n    let node = 'external'\n\n    if (!find) {\n      find = this.addresses.internal.find(item => item.address === address)\n      node = 'internal'\n    }\n\n    return {\n      index: find ? find.derive_index : null,\n      node\n    }\n  }\n\n  /**\n   * Getting information about addresses and forming an array of addresses.\n   * Makes a request for a bundle of addresses and gets a list of transactions\n   * @param node - Bitcoin Cash node\n   * @param type - Node type (external or internal)\n   * @returns {Promise<Array>} A list of addresses with transactions\n   */\n\n  async getAddressesByNode (node, type) {\n    const CONTROL_COUNT = 100\n    let list = []\n    let counter = 0\n    let derive_index = 0\n    let empty = {\n      status: false,\n      data: null\n    }\n    let data = {\n      from: 0,\n      to: CONTROL_COUNT\n    }\n\n    const req = async () => {\n      let addresses = await this._getArrayOfAddresses(\n        node,\n        type,\n        data.from,\n        data.to\n      )\n\n      try {\n        let res = await this.getMultiAddressRequest(addresses)\n\n        if (res.hasOwnProperty('utxo')) {\n          this.unspent = [...this.unspent, ...res.utxo]\n        }\n\n        if (res.hasOwnProperty('lastblock')) {\n          this.latestBlock = res.lastblock\n        }\n\n        if (res.hasOwnProperty('transactions') && res.transactions.length) {\n          this.transactions.all = [...this.transactions.all, ...res.transactions]\n\n          for (let i = data.from; i < data.to; i++) {\n            if (counter >= CONTROL_COUNT) break\n            const index = i < CONTROL_COUNT ? i : i - CONTROL_COUNT\n            let address = addresses[index]\n            let find = res.transactions.find((itm) => itm.address === address)\n            let item = {\n              type,\n              derive_index,\n              address\n            }\n\n            if (find) {\n              counter = 0\n              list.push(item)\n            } else {\n              counter++\n              if (!empty.status) {\n                empty.status = true\n                empty.data = item\n              }\n            }\n            derive_index++\n          }\n\n          if (counter < CONTROL_COUNT) {\n            data.from += CONTROL_COUNT\n            data.to += CONTROL_COUNT\n            await req()\n          } else {\n            list.push(empty.data)\n          }\n        } else {\n          if (!empty.status) {\n            let item = {\n              type,\n              derive_index\n            }\n\n            if (type === 'external') {\n              item.address = getCashAddress(this.externalNode, derive_index)\n            } else {\n              item.address = getCashAddress(this.internalNode, derive_index)\n            }\n            empty.status = true\n            empty.data = item\n          }\n\n          list.push(empty.data)\n        }\n      }\n      catch (e) {\n        console.log('BCH getAddressesByNode error', e)\n      }\n    }\n\n    await req()\n\n    return list\n  }\n\n  /**\n   * Processing transaction information: setting the type (incoming or outgoing),\n   * getting balance, hash, time and block id\n   */\n\n  async processTransactions () {\n    const hashes = this.transactions.all.map(item => item.hash)\n    const unique_hashes = [...new Set(hashes)]\n\n    for (let hash of unique_hashes) {\n      const group = this.transactions.all.filter(item => item.hash === hash)\n      const balance_change = group.reduce((a, b) => ({balance_change: a.balance_change + b.balance_change})).balance_change\n\n      let tx = {\n        hash,\n        balance_change,\n        block_id: group[0].block_id,\n        time: group[0].time,\n        action: balance_change > 0 ? 'incoming' : 'outgoing'\n      }\n\n      this.transactions.unique.push(tx)\n    }\n  }\n\n  /**\n   * Gets information necessary to create a Bitcoin transaction\n   */\n\n  async getTxInfoForUnspent () {\n    if (!this.unspent.length) return\n    const unspent = []\n\n    for (let item of this.unspent) {\n      if (!item.address) {\n        console.log('Can\\'t find the unspent address')\n        continue\n      }\n\n      const derivationInfo = this._getDeriveIndexByAddress(item.address)\n\n      if (derivationInfo.index === null) continue\n\n      item.derive_index = derivationInfo.index\n      item.node_type = derivationInfo.node\n      unspent.push(item)\n    }\n\n    this.unspent = unspent\n  }\n\n  /**\n   * Getting a balance of Bitcoin Cash wallet from a list of unspent\n   */\n\n  getBalance () {\n    let balance = 0\n\n    this.unspent.forEach((item) => {\n      if (item && item.hasOwnProperty('value')) {\n        balance += +item.value\n      }\n    })\n\n    this.balance = balance\n  }\n\n  /**\n   * Request for information at multiple addresses\n   * @param {Array} addresses - List of addresses to get data from\n   * @returns {Promise<Object>} Address information, including a list of transactions\n   */\n\n  async getMultiAddressRequest (addresses) {\n    if (!addresses) return false\n\n    const OFFSET_STEP = 100\n    const TXS_COUNT = 100\n    let offset = 0\n    let data = {}\n    let txs = []\n\n    const req = async () => {\n      let params = {\n        method: 'all',\n        active: addresses,\n        offset: offset,\n        limit: TXS_COUNT\n      }\n\n      try {\n        let res = await this.request.send(params)\n\n        if (res.status === 'success') {\n          data = res.data || {}\n\n          if (res.data.hasOwnProperty('transactions')) {\n            txs = [...txs, ...res.data.transactions]\n            if (res.data.transactions.length === TXS_COUNT) {\n              offset += OFFSET_STEP\n              await req()\n            }\n          }\n\n          data.transactions = txs\n        } else {\n          console.log('BCH getAddressTransactions', res.error)\n        }\n      }\n      catch (e) {\n        console.log('BCH getAddressTransactions error', e)\n        return []\n      }\n    }\n\n    await req()\n\n    return data\n  }\n\n  get DATA () {\n    return {\n      addresses: this.addresses,\n      transactions: this.transactions,\n      unspent: this.unspent,\n      balance: this.balance,\n      latestBlock: this.latestBlock,\n      fee: this.fee\n    }\n  }\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/class/BCH/BitcoinCashSync.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 59,
    "kind": "class",
    "name": "BitcoinCashSync",
    "memberof": "src/class/BCH/BitcoinCashSync.js",
    "static": true,
    "longname": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/class/BCH/BitcoinCashSync.js",
    "importStyle": "BitcoinCashSync",
    "description": "Class BitcoinCashSync.\nThis class allows you to get information about the balance on a Bitcoin Cash wallet,\nthe list of unspent, a set of addresses that participated in transactions, and a list of transactions",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 60,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync#constructor",
    "access": "public",
    "description": "Create a BitcoinCashSync",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "externalNode",
        "description": "External Bitcoin Cash node"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "internalNode",
        "description": "Internal Bitcoin Cash node"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "api",
        "description": "A set of URLs for getting information about Bitcoin Cash addresses"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "headers",
        "description": "Request headers"
      }
    ]
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "externalNode",
    "memberof": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync",
    "static": false,
    "longname": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync#externalNode",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "internalNode",
    "memberof": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync",
    "static": false,
    "longname": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync#internalNode",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "member",
    "name": "api",
    "memberof": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync",
    "static": false,
    "longname": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync#api",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "member",
    "name": "balance",
    "memberof": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync",
    "static": false,
    "longname": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync#balance",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "member",
    "name": "latestBlock",
    "memberof": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync",
    "static": false,
    "longname": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync#latestBlock",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "unspent",
    "memberof": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync",
    "static": false,
    "longname": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync#unspent",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "member",
    "name": "addresses",
    "memberof": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync",
    "static": false,
    "longname": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync#addresses",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "{\"external\": *, \"internal\": *, \"empty\": *, \"all\": *}"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "member",
    "name": "deriveAddress",
    "memberof": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync",
    "static": false,
    "longname": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync#deriveAddress",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "{\"internal\": *, \"external\": *}"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "member",
    "name": "transactions",
    "memberof": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync",
    "static": false,
    "longname": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync#transactions",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "{\"all\": *, \"unique\": *}"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "member",
    "name": "fee",
    "memberof": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync",
    "static": false,
    "longname": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync#fee",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "member",
    "name": "request",
    "memberof": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync",
    "static": false,
    "longname": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync#request",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "Start",
    "memberof": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync#Start",
    "access": "public",
    "description": "The method that starts the synchronization Bitcoin Cash part of wallet",
    "lineNumber": 56,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<boolean>}"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<boolean>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "getAddresses",
    "memberof": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync#getAddresses",
    "access": "public",
    "description": "Getting internal and external addresses that were involved in transactions",
    "lineNumber": 71,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<boolean>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<boolean>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "_getArrayOfAddresses",
    "memberof": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync#_getArrayOfAddresses",
    "access": "private",
    "description": "Auxiliary method that gets the Bitcoin Cash address by node and index",
    "lineNumber": 94,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array>} Returns array of addresses"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "Bitcoin Cash node"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Node type (external or internal)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": "The index that the derivation starts from"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "to",
        "description": "Index to which deprivation occurs"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array>"
      ],
      "spread": false,
      "description": "Returns array of addresses"
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "_getDeriveIndexByAddress",
    "memberof": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync#_getDeriveIndexByAddress",
    "access": "private",
    "description": "Returns the derivation index for an address",
    "lineNumber": 117,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "address",
        "description": "Legacy Bitcoin Cash address"
      }
    ],
    "return": {
      "types": [
        "{\"index\": *, \"node\": *}"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "getAddressesByNode",
    "memberof": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync#getAddressesByNode",
    "access": "public",
    "description": "Getting information about addresses and forming an array of addresses.\nMakes a request for a bundle of addresses and gets a list of transactions",
    "lineNumber": 140,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array>} A list of addresses with transactions"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "Bitcoin Cash node"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Node type (external or internal)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array>"
      ],
      "spread": false,
      "description": "A list of addresses with transactions"
    }
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "processTransactions",
    "memberof": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync#processTransactions",
    "access": "public",
    "description": "Processing transaction information: setting the type (incoming or outgoing),\ngetting balance, hash, time and block id",
    "lineNumber": 241,
    "params": [],
    "return": null
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "getTxInfoForUnspent",
    "memberof": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync#getTxInfoForUnspent",
    "access": "public",
    "description": "Gets information necessary to create a Bitcoin transaction",
    "lineNumber": 265,
    "params": [],
    "return": null
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "getBalance",
    "memberof": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync#getBalance",
    "access": "public",
    "description": "Getting a balance of Bitcoin Cash wallet from a list of unspent",
    "lineNumber": 291,
    "params": [],
    "return": null
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "getMultiAddressRequest",
    "memberof": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync#getMultiAddressRequest",
    "access": "public",
    "description": "Request for information at multiple addresses",
    "lineNumber": 309,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} Address information, including a list of transactions"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "addresses",
        "description": "List of addresses to get data from"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "Address information, including a list of transactions"
    }
  },
  {
    "__docId__": 87,
    "kind": "get",
    "name": "DATA",
    "memberof": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/BCH/BitcoinCashSync.js~BitcoinCashSync#DATA",
    "access": "public",
    "description": null,
    "lineNumber": 356,
    "undocument": true,
    "type": {
      "types": [
        "{\"addresses\": *, \"transactions\": *, \"unspent\": *, \"balance\": *, \"latestBlock\": *, \"fee\": *}"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "file",
    "name": "src/class/BCH/BitcoinCashTx.js",
    "content": "import converter from '@/helpers/converters'\nimport {calcBtcTxSize, getBtcPrivateKeyByIndex, makeRawBchTx} from '@/helpers/coreHelper'\nimport CustomError from '@/helpers/handleErrors'\n\n/**\n * List of available commission types for Bitcoin Cash transactions\n * @type {Array}\n */\n\nconst FEE_IDS = ['regular', 'custom']\n\n/**\n * Class BitcoinCashTx.\n * This class is responsible for calculating the fee,\n * calculating the available amount to send, and generating and signing a Bitcoin Cash transaction\n * @class\n */\n\nexport default class BitcoinCashTx {\n  /**\n   * Create a BitcoinCashTx\n   * @param {Object} data - Input data for generating a transaction, calculating a fee or available amount\n   * @param {Array} data.unspent - Array of unspent addresses\n   * @param {number} data.amount - Transaction amount\n   * @param {number} data.balance - Bitcoin Cash wallet balance\n   * @param {Array} data.feeList - Set of raw Bitcoin Cash fees\n   * @param {Object} data.customFee - Custom fee entered by the user\n   * @param {Object} data.nodes - External and internal Bitcoin Cash nodes\n   * @param {string} data.internalAddress - Address for change\n   */\n  constructor (data) {\n    this.unspent = data.unspent\n    this.amount = data.amount ? converter.btc_to_sat(data.amount) : 0\n    this.balance = data.balance\n    this.customFee = +data.customFee ? +data.customFee : 0\n    this.nodes = data.nodes\n    this.internalAddress = data.internalAddress\n    this.fee = data.feeList\n    this.feeList = []\n    this.dust = 1000\n  }\n\n  /**\n   * Calculating the fee amount\n   * @param {number} size - Transaction size\n   * @returns {Promise<Array>} Returns a set of fees for a specific transaction amount\n   */\n\n  async calcFee (size = 0) {\n    const fees = [...this.fee.map(item => item.feePerByte), this.customFee]\n\n    if (this.amount <= 0 || this.balance < this.amount) {\n      return this.calcEmptyFee(fees)\n    }\n\n    const pArray = fees.map(async fee => {\n      return await this.getInputs(fee, size)\n    })\n\n    const res = await Promise.all(pArray)\n\n    this.feeList = res.map((item, i) => {\n      return {\n        id: FEE_IDS[i],\n        SAT: item.fee,\n        BCH: converter.sat_to_btc(item.fee),\n        fee: fees[i],\n        feeInBTC: converter.sat_to_btc(fees[i]),\n        inputs: item.inputs,\n        inputsAmount: item.inputsAmount,\n        custom: FEE_IDS[i] === 'custom'\n      }\n    })\n\n    return this.feeList\n  }\n\n  /**\n   * Sets an array of zero fees.\n   * Used when the user does not have enough funds for the transaction\n   * @param {Array} fees - set of commission types\n   * @returns {Array} Returns an array with zero fees\n   */\n\n  calcEmptyFee (fees) {\n    this.feeList = fees.map((item, i) => {\n      return {\n        id: FEE_IDS[i],\n        SAT: 0,\n        BCH: 0,\n        fee: item,\n        feeInBTC: converter.sat_to_btc(item),\n        inputs: [],\n        inputsAmount: 0,\n        custom: FEE_IDS[i] === 'custom'\n      }\n    })\n\n    return this.feeList\n  }\n\n  /**\n   * Finds a list of inputs for a specific transaction\n   * @param {number} fee - Fee size\n   * @param {number} size - Transaction size\n   * @returns {Promise<Object>} Returns an object with a list of inputs, the total fee amount, and the total amount of all inputs\n   */\n\n  async getInputs (fee, size) {\n    let index = 0\n    let inputsAmount = 0\n    let inputs = []\n    let res = {}\n\n    this.dust = size ? 0 : 1000\n\n    let req = async () => {\n      let item = this.unspent[index]\n      let defaultSize = calcBtcTxSize(index + 1, 2)\n      let calcFee = size ? size * fee : defaultSize * fee\n\n      inputsAmount += item.value\n      inputs.push(item)\n\n      let total = this.amount + calcFee + this.dust\n\n      if (total > inputsAmount) {\n        index++\n\n        if (index >= this.unspent.length) {\n          res = {\n            fee: 0,\n            inputs: [],\n            inputsAmount: 0\n          }\n        } else {\n          await req()\n        }\n      } else {\n        res = {\n          fee: calcFee,\n          inputs: inputs,\n          inputsAmount: inputsAmount\n        }\n      }\n    }\n    await req()\n\n    return res\n  }\n\n  /**\n   * Creating a Bitcoin Cash transaction\n   * @param {Object} data - Input data for a transaction\n   * @param {string} data.addressTo - Recipient address\n   * @param {Object} data.fee - The transaction fee and list of inputs\n   * @returns {Promise<Object>} Returns the raw transaction and transaction hash if sent successfully\n   */\n\n  async make (data) {\n    const {addressTo, fee} = data\n\n    if (!this.amount) {\n      throw new CustomError('err_tx_bch_amount')\n    }\n\n    if (isNaN(fee.SAT)) {\n      throw new CustomError('err_tx_bch_fee')\n    }\n\n    const inputsAmount = +fee.inputsAmount\n    const amount = +this.amount\n    const sat = +fee.SAT\n    const change = inputsAmount - amount - sat\n    let inputs = []\n\n    if (change < 0) {\n      throw new CustomError('err_tx_bch_balance')\n    }\n\n    for (const utxo of fee.inputs) {\n      let item = {\n        hash: utxo.transaction_hash,\n        index: utxo.index,\n        address: utxo.address,\n        value: utxo.value,\n        key: getBtcPrivateKeyByIndex(this.nodes[utxo.node_type], utxo.derive_index)\n      }\n\n      inputs.push(item)\n    }\n\n    let params = {\n      inputs: inputs,\n      outputs: [\n        {\n          address: addressTo,\n          value: amount\n        }\n      ]\n    }\n\n    if (change !== 0) {\n      params.outputs[1] = {\n        address: this.internalAddress,\n        value: change\n      }\n    }\n\n    return makeRawBchTx(params)\n  }\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/class/BCH/BitcoinCashTx.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 89,
    "kind": "variable",
    "name": "FEE_IDS",
    "memberof": "src/class/BCH/BitcoinCashTx.js",
    "static": true,
    "longname": "src/class/BCH/BitcoinCashTx.js~FEE_IDS",
    "access": "public",
    "export": false,
    "importPath": "lumi-web-core/src/class/BCH/BitcoinCashTx.js",
    "importStyle": null,
    "description": "List of available commission types for Bitcoin Cash transactions",
    "lineNumber": 10,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 90,
    "kind": "class",
    "name": "BitcoinCashTx",
    "memberof": "src/class/BCH/BitcoinCashTx.js",
    "static": true,
    "longname": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/class/BCH/BitcoinCashTx.js",
    "importStyle": "BitcoinCashTx",
    "description": "Class BitcoinCashTx.\nThis class is responsible for calculating the fee,\ncalculating the available amount to send, and generating and signing a Bitcoin Cash transaction",
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 91,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx#constructor",
    "access": "public",
    "description": "Create a BitcoinCashTx",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Input data for generating a transaction, calculating a fee or available amount"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "data.unspent",
        "description": "Array of unspent addresses"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.amount",
        "description": "Transaction amount"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.balance",
        "description": "Bitcoin Cash wallet balance"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "data.feeList",
        "description": "Set of raw Bitcoin Cash fees"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data.customFee",
        "description": "Custom fee entered by the user"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data.nodes",
        "description": "External and internal Bitcoin Cash nodes"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.internalAddress",
        "description": "Address for change"
      }
    ]
  },
  {
    "__docId__": 92,
    "kind": "member",
    "name": "unspent",
    "memberof": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx",
    "static": false,
    "longname": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx#unspent",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "member",
    "name": "amount",
    "memberof": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx",
    "static": false,
    "longname": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx#amount",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "member",
    "name": "balance",
    "memberof": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx",
    "static": false,
    "longname": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx#balance",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "member",
    "name": "customFee",
    "memberof": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx",
    "static": false,
    "longname": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx#customFee",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "member",
    "name": "nodes",
    "memberof": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx",
    "static": false,
    "longname": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx#nodes",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "member",
    "name": "internalAddress",
    "memberof": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx",
    "static": false,
    "longname": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx#internalAddress",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "member",
    "name": "fee",
    "memberof": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx",
    "static": false,
    "longname": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx#fee",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "member",
    "name": "feeList",
    "memberof": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx",
    "static": false,
    "longname": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx#feeList",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "member",
    "name": "dust",
    "memberof": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx",
    "static": false,
    "longname": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx#dust",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "calcFee",
    "memberof": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx#calcFee",
    "access": "public",
    "description": "Calculating the fee amount",
    "lineNumber": 49,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array>} Returns a set of fees for a specific transaction amount"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "Transaction size"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array>"
      ],
      "spread": false,
      "description": "Returns a set of fees for a specific transaction amount"
    }
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "calcEmptyFee",
    "memberof": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx#calcEmptyFee",
    "access": "public",
    "description": "Sets an array of zero fees.\nUsed when the user does not have enough funds for the transaction",
    "lineNumber": 85,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} Returns an array with zero fees"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "fees",
        "description": "set of commission types"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Returns an array with zero fees"
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "getInputs",
    "memberof": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx#getInputs",
    "access": "public",
    "description": "Finds a list of inputs for a specific transaction",
    "lineNumber": 109,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} Returns an object with a list of inputs, the total fee amount, and the total amount of all inputs"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "fee",
        "description": "Fee size"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "Transaction size"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "Returns an object with a list of inputs, the total fee amount, and the total amount of all inputs"
    }
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "make",
    "memberof": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx#make",
    "access": "public",
    "description": "Creating a Bitcoin Cash transaction",
    "lineNumber": 160,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} Returns the raw transaction and transaction hash if sent successfully"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Input data for a transaction"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.addressTo",
        "description": "Recipient address"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data.fee",
        "description": "The transaction fee and list of inputs"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "Returns the raw transaction and transaction hash if sent successfully"
    }
  },
  {
    "__docId__": 108,
    "kind": "file",
    "name": "src/class/BNB/address.js",
    "content": "import bech32 from 'bech32'\nimport * as crypto from '@/utils/crypto'\nimport { ec as EC } from \"elliptic\"\n\nconst CURVE = \"secp256k1\"\nconst ec = new EC(CURVE)\n\n/**\n * Getting an address by public key\n * @param {string} publicKeyHex - Public key in hex\n * @param {string} prefix - Address prefix\n * @returns {string} Binance address\n */\n\nexport function getBnbAddressByPublicKey (publicKeyHex, prefix = 'bnb') {\n  const pubKey = ec.keyFromPublic(publicKeyHex, \"hex\")\n  const pubPoint = pubKey.getPublic()\n  const compressed = pubPoint.encodeCompressed()\n  const hexed = crypto.ab2hexstring(compressed)\n  const hash = crypto.sha256ripemd160(hexed)\n\n  return encodeAddress(hash, prefix)\n}\n\n/**\n * Encodes an address from input data bytes.\n * @param {string} value the public key to encode\n * @param {*} prefix the address prefix\n * @param {*} type the output type (default: hex)\n */\n\nexport function encodeAddress (value, prefix = 'bnb', type = 'hex') {\n  let words\n\n  if (Buffer.isBuffer(value)) {\n    words = bech32.toWords(Buffer.from(value))\n  } else {\n    words = bech32.toWords(Buffer.from(value, type))\n  }\n\n  return bech32.encode(prefix, words)\n}\n\n/**\n * Decodes an address in bech32 format.\n * @category crypto\n * @param {string} value the bech32 address to decode\n */\nexport const decodeAddress = (value) => {\n  const decodeAddress = bech32.decode(value)\n  return Buffer.from(bech32.fromWords(decodeAddress.words))\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/class/BNB/address.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 109,
    "kind": "variable",
    "name": "CURVE",
    "memberof": "src/class/BNB/address.js",
    "static": true,
    "longname": "src/class/BNB/address.js~CURVE",
    "access": "public",
    "export": false,
    "importPath": "lumi-web-core/src/class/BNB/address.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 110,
    "kind": "variable",
    "name": "ec",
    "memberof": "src/class/BNB/address.js",
    "static": true,
    "longname": "src/class/BNB/address.js~ec",
    "access": "public",
    "export": false,
    "importPath": "lumi-web-core/src/class/BNB/address.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 111,
    "kind": "function",
    "name": "getBnbAddressByPublicKey",
    "memberof": "src/class/BNB/address.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/class/BNB/address.js~getBnbAddressByPublicKey",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/class/BNB/address.js",
    "importStyle": "{getBnbAddressByPublicKey}",
    "description": "Getting an address by public key",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Binance address"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "publicKeyHex",
        "description": "Public key in hex"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prefix",
        "description": "Address prefix"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Binance address"
    }
  },
  {
    "__docId__": 112,
    "kind": "function",
    "name": "encodeAddress",
    "memberof": "src/class/BNB/address.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/class/BNB/address.js~encodeAddress",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/class/BNB/address.js",
    "importStyle": "{encodeAddress}",
    "description": "Encodes an address from input data bytes.",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "the public key to encode"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "prefix",
        "description": "the address prefix"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "the output type (default: hex)"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "function",
    "name": "decodeAddress",
    "memberof": "src/class/BNB/address.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/class/BNB/address.js~decodeAddress",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/class/BNB/address.js",
    "importStyle": "{decodeAddress}",
    "description": "Decodes an address in bech32 format.",
    "lineNumber": 49,
    "unknown": [
      {
        "tagName": "@category",
        "tagValue": "crypto"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "the bech32 address to decode"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "file",
    "name": "src/class/BNB/amino.js",
    "content": "/*\n * https://github.com/binance-chain/javascript-sdk/blob/master/src/amino/encoder/index.ts\n */\n\nimport is from \"is_js\"\nimport { string as VarString } from \"protocol-buffers-encodings\"\nimport {UVarInt} from '@/utils/varint'\n\nexport const AminoPrefix = {\n  tx: 'F0625DEE',\n  msg: '2A2C87FA',\n  PubKeySecp256k1: 'EB5AE987'\n}\n\nconst sortObject = (obj) => {\n  if (obj === null) return null\n  if (typeof obj !== \"object\") return obj\n  if (Array.isArray(obj)) return obj.map(sortObject)\n  const sortedKeys = Object.keys(obj).sort()\n  const result = {}\n  sortedKeys.forEach((key) => {\n    result[key] = sortObject(obj[key])\n  })\n  return result\n}\n\n/**\n * encode number\n * @category amino\n * @param num\n */\nexport const encodeNumber = (num) => UVarInt.encode(num)\n\n/**\n * encode bool\n * @category amino\n * @param b\n */\nexport const encodeBool = (b) =>\n  b ? UVarInt.encode(1) : UVarInt.encode(0)\n\n/**\n * encode string\n * @category amino\n * @param str\n */\nexport const encodeString = (str) => {\n  const buf = Buffer.alloc(VarString.encodingLength(str))\n  return VarString.encode(str, buf, 0)\n}\n\n/**\n * @category amino\n * @param obj -- {object}\n * @return bytes {Buffer}\n */\nexport const convertObjectToSignBytes = (obj) =>\n  Buffer.from(JSON.stringify(sortObject(obj)))\n\n/**\n * js amino MarshalBinary\n * @category amino\n * @param {Object} obj\n *  */\nexport const marshalBinary = (obj) => {\n  if (!is.object(obj)) throw new TypeError(\"data must be an object\")\n  \n  return encodeBinary(obj, -1, true).toString(\"hex\")\n}\n\n// /**\n//  * js amino MarshalBinaryBare\n//  * @category amino\n//  * @param {Object} obj\n//  *  */\n// export const marshalBinaryBare = (obj) => {\n//   if (!is.object(obj)) throw new TypeError(\"data must be an object\")\n//\n//   return encodeBinary(obj).toString(\"hex\")\n// }\n\n/**\n * This is the main entrypoint for encoding all types in binary form.\n * @category amino\n * @param {*} js data type (not null, not undefined)\n * @param {Number} field index of object\n * @param {Boolean} isByteLenPrefix\n * @return {Buffer} binary of object.\n */\nexport const encodeBinary = (\n  val,\n  fieldNum,\n  isByteLenPrefix\n) => {\n  if (val === null || val === undefined) throw new TypeError(\"unsupported type\")\n  \n  if (Buffer.isBuffer(val)) {\n    if (isByteLenPrefix) {\n      return Buffer.concat([UVarInt.encode(val.length), val])\n    }\n    return val\n  }\n  \n  if (is.array(val)) {\n    return encodeArrayBinary(fieldNum, val, isByteLenPrefix)\n  }\n  \n  if (is.number(val)) {\n    return encodeNumber(val)\n  }\n  \n  if (is.boolean(val)) {\n    return encodeBool(val)\n  }\n  \n  if (is.string(val)) {\n    return encodeString(val)\n  }\n  \n  if (is.object(val)) {\n    return encodeObjectBinary(val, isByteLenPrefix)\n  }\n  \n  return\n}\n\n/**\n * prefixed with bytes length\n * @category amino\n * @param {Buffer} bytes\n * @return {Buffer} with bytes length prefixed\n */\nexport const encodeBinaryByteArray = (bytes) => {\n  const lenPrefix = bytes.length\n  \n  return Buffer.concat([UVarInt.encode(lenPrefix), bytes])\n}\n\n/**\n * @category amino\n * @param {Object} obj\n * @return {Buffer} with bytes length prefixed\n */\nexport const encodeObjectBinary = (obj, isByteLenPrefix) => {\n  const bufferArr = []\n  \n  Object.keys(obj).forEach((key, index) => {\n    if (key === \"aminoPrefix\" || key === \"version\") return\n    \n    if (isDefaultValue(obj[key])) return\n    \n    if (is.array(obj[key]) && obj[key].length > 0) {\n      bufferArr.push(encodeArrayBinary(index, obj[key]))\n    } else {\n      bufferArr.push(encodeTypeAndField(index, obj[key]))\n      bufferArr.push(encodeBinary(obj[key], index, true))\n    }\n  })\n  \n  let bytes = Buffer.concat(bufferArr)\n  \n  // add prefix\n  if (obj.aminoPrefix) {\n    const prefix = Buffer.from(obj.aminoPrefix, \"hex\")\n    bytes = Buffer.concat([prefix, bytes])\n  }\n  \n  // Write byte-length prefixed.\n  if (isByteLenPrefix) {\n    const lenBytes = UVarInt.encode(bytes.length)\n    bytes = Buffer.concat([lenBytes, bytes])\n  }\n  \n  return bytes\n}\n\n/**\n * @category amino\n * @param {Number} fieldNum object field index\n * @param {Array} arr\n * @param {Boolean} isByteLenPrefix\n * @return {Buffer} bytes of array\n */\nexport const encodeArrayBinary = (\n  fieldNum,\n  arr,\n  isByteLenPrefix\n) => {\n  const result = []\n  \n  arr.forEach((item) => {\n    result.push(encodeTypeAndField(fieldNum, item))\n    \n    if (isDefaultValue(item)) {\n      result.push(Buffer.from(\"00\", \"hex\"))\n      return\n    }\n    \n    result.push(encodeBinary(item, fieldNum, true))\n  })\n  \n  //encode length\n  if (isByteLenPrefix) {\n    const length = result.reduce((prev, item) => prev + item.length, 0)\n    result.unshift(UVarInt.encode(length))\n  }\n  \n  return Buffer.concat(result)\n}\n\n// Write field key.\nconst encodeTypeAndField = (index, field) => {\n  index = Number(index)\n  const value = ((index + 1) << 3) | typeToTyp3(field)\n  return UVarInt.encode(value)\n}\n\nconst isDefaultValue = (obj) => {\n  if (obj === null) return false\n  \n  return (\n    (is.number(obj) && obj === 0) ||\n    (is.string(obj) && obj === \"\") ||\n    (is.array(obj) && obj.length === 0) ||\n    (is.boolean(obj) && !obj)\n  )\n}\n\nconst typeToTyp3 = (type) => {\n  if (is.boolean(type)) {\n    return 0\n  }\n  \n  if (is.number(type)) {\n    if (is.integer(type)) {\n      return 0\n    } else {\n      return 1\n    }\n  }\n  \n  if (is.string(type) || is.array(type) || is.object(type)) {\n    return 2\n  }\n  \n  throw new Error(`Invalid type \"${type}\"`)\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/class/BNB/amino.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 115,
    "kind": "variable",
    "name": "AminoPrefix",
    "memberof": "src/class/BNB/amino.js",
    "static": true,
    "longname": "src/class/BNB/amino.js~AminoPrefix",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/class/BNB/amino.js",
    "importStyle": "{AminoPrefix}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "{\"tx\": string, \"msg\": string, \"PubKeySecp256k1\": string}"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "function",
    "name": "sortObject",
    "memberof": "src/class/BNB/amino.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/class/BNB/amino.js~sortObject",
    "access": "public",
    "export": false,
    "importPath": "lumi-web-core/src/class/BNB/amino.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 117,
    "kind": "function",
    "name": "encodeNumber",
    "memberof": "src/class/BNB/amino.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/class/BNB/amino.js~encodeNumber",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/class/BNB/amino.js",
    "importStyle": "{encodeNumber}",
    "description": "encode number",
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@category",
        "tagValue": "amino"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 118,
    "kind": "function",
    "name": "encodeBool",
    "memberof": "src/class/BNB/amino.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/class/BNB/amino.js~encodeBool",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/class/BNB/amino.js",
    "importStyle": "{encodeBool}",
    "description": "encode bool",
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@category",
        "tagValue": "amino"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 119,
    "kind": "function",
    "name": "encodeString",
    "memberof": "src/class/BNB/amino.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/class/BNB/amino.js~encodeString",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/class/BNB/amino.js",
    "importStyle": "{encodeString}",
    "description": "encode string",
    "lineNumber": 47,
    "unknown": [
      {
        "tagName": "@category",
        "tagValue": "amino"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "function",
    "name": "convertObjectToSignBytes",
    "memberof": "src/class/BNB/amino.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/class/BNB/amino.js~convertObjectToSignBytes",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/class/BNB/amino.js",
    "importStyle": "{convertObjectToSignBytes}",
    "description": "",
    "lineNumber": 57,
    "unknown": [
      {
        "tagName": "@category",
        "tagValue": "amino"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "- {object}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "bytes {Buffer}"
    }
  },
  {
    "__docId__": 121,
    "kind": "function",
    "name": "marshalBinary",
    "memberof": "src/class/BNB/amino.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/class/BNB/amino.js~marshalBinary",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/class/BNB/amino.js",
    "importStyle": "{marshalBinary}",
    "description": "js amino MarshalBinary",
    "lineNumber": 65,
    "unknown": [
      {
        "tagName": "@category",
        "tagValue": "amino"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "function",
    "name": "encodeBinary",
    "memberof": "src/class/BNB/amino.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/class/BNB/amino.js~encodeBinary",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/class/BNB/amino.js",
    "importStyle": "{encodeBinary}",
    "description": "This is the main entrypoint for encoding all types in binary form.",
    "lineNumber": 90,
    "unknown": [
      {
        "tagName": "@category",
        "tagValue": "amino"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "js",
        "description": "data type (not null, not undefined)"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": "index of object"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isByteLenPrefix",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": "binary of object."
    }
  },
  {
    "__docId__": 123,
    "kind": "function",
    "name": "encodeBinaryByteArray",
    "memberof": "src/class/BNB/amino.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/class/BNB/amino.js~encodeBinaryByteArray",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/class/BNB/amino.js",
    "importStyle": "{encodeBinaryByteArray}",
    "description": "prefixed with bytes length",
    "lineNumber": 133,
    "unknown": [
      {
        "tagName": "@category",
        "tagValue": "amino"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "bytes",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": "with bytes length prefixed"
    }
  },
  {
    "__docId__": 124,
    "kind": "function",
    "name": "encodeObjectBinary",
    "memberof": "src/class/BNB/amino.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/class/BNB/amino.js~encodeObjectBinary",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/class/BNB/amino.js",
    "importStyle": "{encodeObjectBinary}",
    "description": "",
    "lineNumber": 144,
    "unknown": [
      {
        "tagName": "@category",
        "tagValue": "amino"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": "with bytes length prefixed"
    }
  },
  {
    "__docId__": 125,
    "kind": "function",
    "name": "encodeArrayBinary",
    "memberof": "src/class/BNB/amino.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/class/BNB/amino.js~encodeArrayBinary",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/class/BNB/amino.js",
    "importStyle": "{encodeArrayBinary}",
    "description": "",
    "lineNumber": 184,
    "unknown": [
      {
        "tagName": "@category",
        "tagValue": "amino"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "fieldNum",
        "description": "object field index"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isByteLenPrefix",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": "bytes of array"
    }
  },
  {
    "__docId__": 126,
    "kind": "function",
    "name": "encodeTypeAndField",
    "memberof": "src/class/BNB/amino.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/class/BNB/amino.js~encodeTypeAndField",
    "access": "public",
    "export": false,
    "importPath": "lumi-web-core/src/class/BNB/amino.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 212,
    "undocument": true,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "field",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 127,
    "kind": "function",
    "name": "isDefaultValue",
    "memberof": "src/class/BNB/amino.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/class/BNB/amino.js~isDefaultValue",
    "access": "public",
    "export": false,
    "importPath": "lumi-web-core/src/class/BNB/amino.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 218,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 128,
    "kind": "function",
    "name": "typeToTyp3",
    "memberof": "src/class/BNB/amino.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/class/BNB/amino.js~typeToTyp3",
    "access": "public",
    "export": false,
    "importPath": "lumi-web-core/src/class/BNB/amino.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 229,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 129,
    "kind": "file",
    "name": "src/class/BNB/core.js",
    "content": "import {getBnbAddressByPublicKey} from '@/class/BNB/address'\nimport {derive} from '@/helpers/coreHelper'\n\nconst bnb_path = `m/44'/714'/0'/0/0`\n\nexport function getBnbCore (hdkey) {\n  let item = {}\n  item.node = derive(hdkey, bnb_path)\n  item.privateKey = item.node._privateKey\n  item.privateKeyHex = item.privateKey.toString('hex')\n  item.publicKey = item.node._publicKey\n  item.publicKeyHex = item.node._publicKey.toString('hex')\n  item.externalAddress = getBnbAddressByPublicKey(item.publicKey.toString('hex'))\n  item.dp = bnb_path\n\n  return item\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/class/BNB/core.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 130,
    "kind": "variable",
    "name": "bnb_path",
    "memberof": "src/class/BNB/core.js",
    "static": true,
    "longname": "src/class/BNB/core.js~bnb_path",
    "access": "public",
    "export": false,
    "importPath": "lumi-web-core/src/class/BNB/core.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 131,
    "kind": "function",
    "name": "getBnbCore",
    "memberof": "src/class/BNB/core.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/class/BNB/core.js~getBnbCore",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/class/BNB/core.js",
    "importStyle": "{getBnbCore}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "hdkey",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "file",
    "name": "src/class/BNB/transaction.js",
    "content": "import bigDecimal from 'js-big-decimal'\nimport * as crypto from '@/utils/crypto'\nimport {generateSignature, convertToJager, convertToBinance} from '@/class/BNB/utils'\nimport {decodeAddress} from '@/class/BNB/address'\nimport {\n  convertObjectToSignBytes,\n  marshalBinary,\n  AminoPrefix\n} from '@/class/BNB/amino'\n\nconst DEFAULT_CHAIN_ID = 'Binance-Chain-Tigris'\nconst DEFAULT_SOURCE = 1\n\n/**\n * Class BinanceTx.\n * This class is responsible for calculating the fee list\n * and generating and signing a Binance transaction\n * @class\n */\n\nexport default class BinanceTx {\n  /**\n   * Create a BinanceTx\n   * @param {Object} data - Input data for generating a transaction and calculating a fee\n   * @param {number} data.chain_id\n   * @param {string} data.address - Sender's address\n   * @param {number} data.account_number\n   * @param {number} data.sequence\n   * @param {number} data.source\n   * @param {Array} data.fee - Fee list\n   * @param {Array} data.balance - Sender's balance\n   * @param {string} data.privateKey\n   * @param {string} data.publicKey\n   */\n\n  constructor (data) {\n    data = data || {}\n    this.chain_id = data.chain_id || DEFAULT_CHAIN_ID\n    this.address = data.address\n    this.account_number = data.account_number || 0\n    this.sequence = data.sequence\n    this.source = Number.isInteger(data.source) || DEFAULT_SOURCE\n    this.fee = data.fee || []\n    this.balance = convertToJager(data.balance)\n    this.privateKey = data.privateKey\n    this.publicKey = data.publicKey\n    this.memo = ''\n    this.msg = []\n    this.signatures = []\n    this.feeList = []\n  }\n\n  /**\n   * Calculating a fee list\n   * @returns {Array} Returns a set of fees\n   */\n\n  calcFee () {\n    for (let item of this.fee) {\n      let fee = {\n        id: item.name.toLowerCase(),\n        fee: convertToBinance(item.fee),\n        value: item.fee\n      }\n\n      this.feeList.push(fee)\n    }\n    return this.feeList\n  }\n\n  /**\n   * sign transaction with a given private key and msg\n   * @param {Object} data - Input data for a transaction\n   * @param {string} data.addressTo - Recipient address\n   * @param {number} data.amount - The transaction amount\n   * @param {number} data.fee - The transaction fee\n   * @param {string} data.memo - The transaction memo\n   * @return {Transaction}\n   **/\n\n  make (data) {\n    this.memo = data.memo || ''\n    this.msg = this.getSignMsg(data)\n    const signBytes = this.getSignBytes(this.msg)\n    const privKeyBuf = Buffer.from(this.privateKey, 'hex')\n    const signature = generateSignature(\n      signBytes.toString('hex'),\n      privKeyBuf\n    )\n    this.addSignature(this.publicKey, signature)\n    return this\n  }\n\n  /**\n   * Getting signed transaction message\n   * @returns {Object}\n   */\n\n  getSignMsg (data) {\n    const {addressTo, amount, fee} = data\n    const feeInJager = convertToJager(fee)\n    const amountInJager = convertToJager(amount)\n    const fullAmount = bigDecimal.add(feeInJager, amountInJager)\n    const change = bigDecimal.subtract(this.balance, fullAmount)\n\n    if (change < 0) {\n      throw new Error('Insufficient balance')\n    }\n\n    const inputs = [\n      {\n        coins: [\n          {\n            denom: 'BNB',\n            amount: +amountInJager\n          }\n        ],\n        address: this.address\n      }\n    ]\n\n    const outputs = [\n      {\n        address: addressTo,\n        coins: [\n          {\n            denom: 'BNB',\n            amount: +amountInJager\n          }\n        ]\n      }\n    ]\n\n    return {\n      inputs,\n      outputs\n    }\n  }\n\n  /**\n   * Getting the transaction message\n   * @returns {Object}\n   */\n\n  getMsg (msg) {\n    msg.inputs = msg.inputs.map(item => {\n      return {\n        address: decodeAddress(item.address),\n        coins: item.coins\n      }\n    })\n    msg.outputs = msg.outputs.map(item => {\n      return {\n        address: decodeAddress(item.address),\n        coins: item.coins\n      }\n    })\n\n    msg.aminoPrefix = AminoPrefix.msg\n    return msg\n  }\n\n  /**\n   * Generate the sign bytes for a transaction, given a msg\n   * @param {Object} msg - msg object\n   * @return {Buffer}\n   */\n\n  getSignBytes (msg) {\n    const signMsg = {\n      account_number: this.account_number.toString(),\n      chain_id: this.chain_id,\n      data: null,\n      memo: this.memo,\n      msgs: [msg],\n      sequence: this.sequence.toString(),\n      source: this.source.toString()\n    }\n    return convertObjectToSignBytes(signMsg)\n  }\n\n  /**\n   * Attaches a signature to the transaction\n   * @param {string} pubKey\n   * @param {Buffer} signature\n   */\n\n  addSignature (pubKey, signature) {\n    const pubKeyBuf = this._serializePubKey(Buffer.from(this.publicKey, 'hex')) // => Buffer\n\n    this.signatures = [\n      {\n        pub_key: pubKeyBuf,\n        signature: signature,\n        account_number: this.account_number,\n        sequence: this.sequence\n      }\n    ]\n\n    return this\n  }\n\n  /**\n   * Encode signed transaction to hex which is compatible with amino\n   * @returns {string}\n   */\n\n  serialize () {\n    if (!this.signatures) {\n      throw new Error('need signature')\n    }\n    const msg = this.getMsg(this.msg)\n\n    const stdTx = {\n      msg: [msg],\n      signatures: this.signatures,\n      memo: this.memo,\n      source: this.source,\n      data: '',\n      aminoPrefix: AminoPrefix.tx\n    }\n\n    const bytes = marshalBinary(stdTx)\n    this.rawTx = bytes.toString('hex')\n    return this.rawTx\n  }\n\n  /**\n   * Getting the transaction hash\n   * @returns {string}\n   */\n\n  getHash () {\n    if (this.rawTx) {\n      return crypto.sha256(this.rawTx).toUpperCase()\n    }\n\n    return ''\n  }\n\n  /**\n   * Serializes a public key in a 33-byte compressed format.\n   * @param {Buffer} unencodedPubKey\n   * @return {Buffer}\n   */\n\n  _serializePubKey (unencodedPubKey) {\n    let pubBz = crypto.encodeBinaryByteArray(unencodedPubKey)\n    pubBz = Buffer.concat([Buffer.from(AminoPrefix.PubKeySecp256k1, 'hex'), pubBz])\n\n    return pubBz\n  }\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/class/BNB/transaction.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 133,
    "kind": "variable",
    "name": "DEFAULT_CHAIN_ID",
    "memberof": "src/class/BNB/transaction.js",
    "static": true,
    "longname": "src/class/BNB/transaction.js~DEFAULT_CHAIN_ID",
    "access": "public",
    "export": false,
    "importPath": "lumi-web-core/src/class/BNB/transaction.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 134,
    "kind": "variable",
    "name": "DEFAULT_SOURCE",
    "memberof": "src/class/BNB/transaction.js",
    "static": true,
    "longname": "src/class/BNB/transaction.js~DEFAULT_SOURCE",
    "access": "public",
    "export": false,
    "importPath": "lumi-web-core/src/class/BNB/transaction.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 135,
    "kind": "class",
    "name": "BinanceTx",
    "memberof": "src/class/BNB/transaction.js",
    "static": true,
    "longname": "src/class/BNB/transaction.js~BinanceTx",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/class/BNB/transaction.js",
    "importStyle": "BinanceTx",
    "description": "Class BinanceTx.\nThis class is responsible for calculating the fee list\nand generating and signing a Binance transaction",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 136,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/class/BNB/transaction.js~BinanceTx",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/BNB/transaction.js~BinanceTx#constructor",
    "access": "public",
    "description": "Create a BinanceTx",
    "lineNumber": 36,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Input data for generating a transaction and calculating a fee"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.chain_id",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.address",
        "description": "Sender's address"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.account_number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.sequence",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.source",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "data.fee",
        "description": "Fee list"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "data.balance",
        "description": "Sender's balance"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.privateKey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.publicKey",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 137,
    "kind": "member",
    "name": "chain_id",
    "memberof": "src/class/BNB/transaction.js~BinanceTx",
    "static": false,
    "longname": "src/class/BNB/transaction.js~BinanceTx#chain_id",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 138,
    "kind": "member",
    "name": "address",
    "memberof": "src/class/BNB/transaction.js~BinanceTx",
    "static": false,
    "longname": "src/class/BNB/transaction.js~BinanceTx#address",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 139,
    "kind": "member",
    "name": "account_number",
    "memberof": "src/class/BNB/transaction.js~BinanceTx",
    "static": false,
    "longname": "src/class/BNB/transaction.js~BinanceTx#account_number",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "member",
    "name": "sequence",
    "memberof": "src/class/BNB/transaction.js~BinanceTx",
    "static": false,
    "longname": "src/class/BNB/transaction.js~BinanceTx#sequence",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "member",
    "name": "source",
    "memberof": "src/class/BNB/transaction.js~BinanceTx",
    "static": false,
    "longname": "src/class/BNB/transaction.js~BinanceTx#source",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "member",
    "name": "fee",
    "memberof": "src/class/BNB/transaction.js~BinanceTx",
    "static": false,
    "longname": "src/class/BNB/transaction.js~BinanceTx#fee",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "member",
    "name": "balance",
    "memberof": "src/class/BNB/transaction.js~BinanceTx",
    "static": false,
    "longname": "src/class/BNB/transaction.js~BinanceTx#balance",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 144,
    "kind": "member",
    "name": "privateKey",
    "memberof": "src/class/BNB/transaction.js~BinanceTx",
    "static": false,
    "longname": "src/class/BNB/transaction.js~BinanceTx#privateKey",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "member",
    "name": "publicKey",
    "memberof": "src/class/BNB/transaction.js~BinanceTx",
    "static": false,
    "longname": "src/class/BNB/transaction.js~BinanceTx#publicKey",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "member",
    "name": "memo",
    "memberof": "src/class/BNB/transaction.js~BinanceTx",
    "static": false,
    "longname": "src/class/BNB/transaction.js~BinanceTx#memo",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "member",
    "name": "msg",
    "memberof": "src/class/BNB/transaction.js~BinanceTx",
    "static": false,
    "longname": "src/class/BNB/transaction.js~BinanceTx#msg",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "member",
    "name": "signatures",
    "memberof": "src/class/BNB/transaction.js~BinanceTx",
    "static": false,
    "longname": "src/class/BNB/transaction.js~BinanceTx#signatures",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 149,
    "kind": "member",
    "name": "feeList",
    "memberof": "src/class/BNB/transaction.js~BinanceTx",
    "static": false,
    "longname": "src/class/BNB/transaction.js~BinanceTx#feeList",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "calcFee",
    "memberof": "src/class/BNB/transaction.js~BinanceTx",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/BNB/transaction.js~BinanceTx#calcFee",
    "access": "public",
    "description": "Calculating a fee list",
    "lineNumber": 58,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} Returns a set of fees"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Returns a set of fees"
    },
    "params": []
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "make",
    "memberof": "src/class/BNB/transaction.js~BinanceTx",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/BNB/transaction.js~BinanceTx#make",
    "access": "public",
    "description": "sign transaction with a given private key and msg",
    "lineNumber": 81,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Input data for a transaction"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.addressTo",
        "description": "Recipient address"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.amount",
        "description": "The transaction amount"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.fee",
        "description": "The transaction fee"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.memo",
        "description": "The transaction memo"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "getSignMsg",
    "memberof": "src/class/BNB/transaction.js~BinanceTx",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/BNB/transaction.js~BinanceTx#getSignMsg",
    "access": "public",
    "description": "Getting signed transaction message",
    "lineNumber": 99,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "getMsg",
    "memberof": "src/class/BNB/transaction.js~BinanceTx",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/BNB/transaction.js~BinanceTx#getMsg",
    "access": "public",
    "description": "Getting the transaction message",
    "lineNumber": 145,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "params": [
      {
        "name": "msg",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "getSignBytes",
    "memberof": "src/class/BNB/transaction.js~BinanceTx",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/BNB/transaction.js~BinanceTx#getSignBytes",
    "access": "public",
    "description": "Generate the sign bytes for a transaction, given a msg",
    "lineNumber": 169,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "msg object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "addSignature",
    "memberof": "src/class/BNB/transaction.js~BinanceTx",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/BNB/transaction.js~BinanceTx#addSignature",
    "access": "public",
    "description": "Attaches a signature to the transaction",
    "lineNumber": 188,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pubKey",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "signature",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/class/BNB/transaction.js~BinanceTx",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/BNB/transaction.js~BinanceTx#serialize",
    "access": "public",
    "description": "Encode signed transaction to hex which is compatible with amino",
    "lineNumber": 208,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 160,
    "kind": "member",
    "name": "rawTx",
    "memberof": "src/class/BNB/transaction.js~BinanceTx",
    "static": false,
    "longname": "src/class/BNB/transaction.js~BinanceTx#rawTx",
    "access": "public",
    "description": null,
    "lineNumber": 224,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "getHash",
    "memberof": "src/class/BNB/transaction.js~BinanceTx",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/BNB/transaction.js~BinanceTx#getHash",
    "access": "public",
    "description": "Getting the transaction hash",
    "lineNumber": 233,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "_serializePubKey",
    "memberof": "src/class/BNB/transaction.js~BinanceTx",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/BNB/transaction.js~BinanceTx#_serializePubKey",
    "access": "private",
    "description": "Serializes a public key in a 33-byte compressed format.",
    "lineNumber": 247,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "unencodedPubKey",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 163,
    "kind": "file",
    "name": "src/class/BNB/utils.js",
    "content": "import bigDecimal from 'js-big-decimal'\nimport ecc from 'tiny-secp256k1'\nimport {sha256} from '@/utils/crypto'\n\nexport const convertToJager = (amount) => {\n  if (!amount || isNaN(+amount)) return 0\n  const jager = bigDecimal.multiply(amount, Math.pow(10, 8))\n  return +bigDecimal.floor(jager)\n}\n\nexport const convertToBinance = (amount) => {\n  if (!amount || isNaN(+amount)) return 0\n  \n  return +bigDecimal.divide(amount, Math.pow(10, 8))\n}\n\nexport const generateSignature = (signBytesHex, privateKey) => {\n  const msgHash = sha256(signBytesHex)\n  const msgHashHex = Buffer.from(msgHash, 'hex')\n  return ecc.sign(\n    msgHashHex,\n    Buffer.from(privateKey, 'hex')\n  )\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/class/BNB/utils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 164,
    "kind": "function",
    "name": "convertToJager",
    "memberof": "src/class/BNB/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/class/BNB/utils.js~convertToJager",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/class/BNB/utils.js",
    "importStyle": "{convertToJager}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "amount",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 165,
    "kind": "function",
    "name": "convertToBinance",
    "memberof": "src/class/BNB/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/class/BNB/utils.js~convertToBinance",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/class/BNB/utils.js",
    "importStyle": "{convertToBinance}",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "amount",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 166,
    "kind": "function",
    "name": "generateSignature",
    "memberof": "src/class/BNB/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/class/BNB/utils.js~generateSignature",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/class/BNB/utils.js",
    "importStyle": "{generateSignature}",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "signBytesHex",
        "types": [
          "*"
        ]
      },
      {
        "name": "privateKey",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 167,
    "kind": "file",
    "name": "src/class/BTC/BitcoinSync.js",
    "content": "import Request from '@/helpers/Request'\nimport {getBtcAddress} from '@/helpers/coreHelper'\n\n/**\n * Class BitcoinSync.\n * This class allows you to get information about the balance on a Bitcoin wallet,\n * the list of unspent, a set of addresses that participated in transactions, and a list of transactions\n * @class\n */\n\nexport default class BitcoinSync {\n  /**\n   * Create a BitcoinSync\n   * @param {Object} externalNode - External Bitcoin node\n   * @param {Object} internalNode - Internal Bitcoin node\n   * @param {Object} api - A set of URLs for getting information about Bitcoin addresses\n   * @param {string} type - Bitcoin type. There may be p2pkh or p2wpkh\n   * @param {Object} headers - Request headers\n   */\n  constructor (externalNode, internalNode, api, type, headers) {\n    this.externalNode = externalNode\n    this.internalNode = internalNode\n    this.api = api\n    this.balance = 0\n    this.latestBlock = 0\n    this.unspent = []\n    this.addresses = {\n      external: [],\n      internal: [],\n      empty: {},\n      all: []\n    }\n    this.deriveAddress = {\n      internal: {},\n      external: {}\n    }\n    this.transactions = {\n      all: [],\n      unique: []\n    }\n    this.fee = []\n    this.headers = headers\n    this.request = new Request(this.api.btc, headers)\n    this.type = type || 'p2pkh'\n  }\n  \n  /**\n   * The method that starts the synchronization Bitcoin part of wallet\n   * @returns {Promise<boolean>}\n   * @constructor\n   */\n  \n  async Start () {\n    this.transactions = {\n      all: [],\n      unique: []\n    }\n    this.unspent = []\n    await Promise.all([\n      await this.getAddresses(),\n      await this.getFeesRequest()\n    ])\n    this.getBalance()\n  }\n  \n  /**\n   * Getting internal and external addresses that were involved in transactions\n   * @returns {Promise<boolean>}\n   */\n  \n  async getAddresses () {\n    const nodeData = [\n      {\n        node: this.externalNode,\n        type: 'external'\n      }, {\n        node: this.internalNode,\n        type: 'internal'\n      }\n    ]\n    \n    const pArray = nodeData.map(async item => {\n      return await this.getAddressesByNode(\n        item.node,\n        item.type\n      )\n    })\n    \n    const addresses = await Promise.all(pArray)\n    this.addresses.external = addresses[0]\n    this.addresses.internal = addresses[1]\n    this.addresses.empty = {\n      external: this.addresses.external[this.addresses.external.length - 1],\n      internal: this.addresses.internal[this.addresses.internal.length - 1]\n    }\n    this.addresses.all = [...this.addresses.external, ...this.addresses.internal].map((item) => item.address)\n    \n    await this.processTransactions()\n    await this.getTxInfoForUnspent()\n  }\n  \n  /**\n   * Auxiliary method that gets the Bitcoin address by node and index\n   * @param {Object} node - Bitcoin node\n   * @param {string} type - Node type (external or internal)\n   * @param {number} from - The index that the derivation starts from\n   * @param {number} to - Index to which deprivation occurs\n   * @returns {Promise<Array>} Returns array of addresses\n   * @private\n   */\n  \n  async _getArrayOfAddresses (node, type, from, to) {\n    let addresses = []\n    \n    for (let i = from; i < to; i++) {\n      let address = ''\n      \n      if (this.deriveAddress[type].hasOwnProperty(i)) {\n        address = this.deriveAddress[type][i]\n      } else {\n        address = getBtcAddress(node, i, this.type)\n        this.deriveAddress[type][i] = address\n      }\n      \n      addresses.push(address)\n    }\n    \n    return addresses\n  }\n  \n  /**\n   * Returns the derivation index for an address\n   * @param {string} address - Legacy Bitcoin address\n   */\n  \n  _getDeriveIndexByAddress (address) {\n    let find = this.addresses.external.find(item => item.address === address)\n    let node = 'external'\n    \n    if (!find) {\n      find = this.addresses.internal.find(item => item.address === address)\n      node = 'internal'\n    }\n    \n    return {\n      index: find ? find.derive_index : null,\n      node\n    }\n  }\n  \n  /**\n   * Getting information about addresses and forming an array of addresses.\n   * Makes a request for a bundle of addresses and gets a list of transactions\n   * @param {Object} node - Bitcoin node\n   * @param {string} type - Node type (external or internal)\n   * @returns {Promise<Array>} A list of addresses with transactions\n   */\n  \n  async getAddressesByNode (node, type) {\n    const CONTROL_COUNT = 100\n    let list = []\n    let counter = 0\n    let derive_index = 0\n    let empty = {\n      status: false,\n      data: null\n    }\n    let data = {\n      from: 0,\n      to: CONTROL_COUNT\n    }\n    \n    const req = async () => {\n      let addresses = await this._getArrayOfAddresses(\n        node,\n        type,\n        data.from,\n        data.to\n      )\n      \n      try {\n        let res = await this.getMultiAddressRequest(addresses)\n        \n        if (res.hasOwnProperty('utxo')) {\n          this.unspent = [...this.unspent, ...res.utxo]\n        }\n        \n        if (res.hasOwnProperty('lastblock')) {\n          this.latestBlock = res.lastblock\n        }\n        \n        if (res.hasOwnProperty('transactions') && res.transactions.length) {\n          this.transactions.all = [...this.transactions.all, ...res.transactions]\n          \n          for (let i = data.from; i < data.to; i++) {\n            if (counter >= CONTROL_COUNT) break\n            const index = i < CONTROL_COUNT ? i : i - CONTROL_COUNT\n            let address = addresses[index]\n            let find = res.transactions.find((itm) => itm.address === address)\n            let item = {\n              type,\n              derive_index,\n              address\n            }\n            \n            if (find) {\n              counter = 0\n              list.push(item)\n            } else {\n              counter++\n              if (!empty.status) {\n                empty.status = true\n                empty.data = item\n              }\n            }\n            derive_index++\n          }\n          \n          if (counter < CONTROL_COUNT) {\n            data.from += CONTROL_COUNT\n            data.to += CONTROL_COUNT\n            await req()\n          } else {\n            list.push(empty.data)\n          }\n        } else {\n          if (!empty.status) {\n            let item = {\n              type,\n              derive_index\n            }\n            \n            if (type === 'external') {\n              item.address = getBtcAddress(this.externalNode, derive_index, this.type)\n            } else {\n              item.address = getBtcAddress(this.internalNode, derive_index, this.type)\n            }\n            empty.status = true\n            empty.data = item\n          }\n          \n          list.push(empty.data)\n        }\n      }\n      catch (e) {\n        console.log('BTC SyncPromise', e)\n      }\n    }\n    \n    await req()\n    \n    return list\n  }\n  \n  /**\n   * Processing transaction information: setting the type (incoming or outgoing),\n   * getting balance, hash, time and block id\n   */\n  \n  async processTransactions () {\n    const hashes = this.transactions.all.map(item => item.hash)\n    const unique_hashes = [...new Set(hashes)]\n    \n    for (let hash of unique_hashes) {\n      const group = this.transactions.all.filter(item => item.hash === hash)\n      const balance_change = group.reduce((a, b) => ({balance_change: a.balance_change + b.balance_change})).balance_change\n      \n      let tx = {\n        hash,\n        balance_change,\n        block_id: group[0].block_id,\n        time: group[0].time,\n        action: balance_change > 0 ? 'incoming' : 'outgoing'\n      }\n      \n      this.transactions.unique.push(tx)\n    }\n  }\n  \n  /**\n   * Gets information necessary to create a Bitcoin transaction\n   */\n  \n  async getTxInfoForUnspent () {\n    if (!this.unspent.length) return\n    const unspent = []\n    \n    for (let item of this.unspent) {\n      if (!item.address) {\n        console.log('Can\\'t find the unspent address')\n        continue\n      }\n      \n      const derivationInfo = this._getDeriveIndexByAddress(item.address)\n      \n      if (derivationInfo.index === null) continue\n      \n      item.derive_index = derivationInfo.index\n      item.node_type = derivationInfo.node\n      unspent.push(item)\n    }\n    \n    this.unspent = unspent\n  }\n  \n  /**\n   * Getting a balance of Bitcoin wallet from a list of unspent\n   */\n  \n  getBalance () {\n    let balance = 0\n    \n    this.unspent.forEach((item) => {\n      if (item && item.hasOwnProperty('value')) {\n        balance += +item.value\n      }\n    })\n    \n    this.balance = balance\n  }\n  \n  /**\n   * Request for information at multiple addresses\n   * @param {Array} addresses - List of addresses to get data from\n   * @returns {Promise<Object>} Address information, including a list of transactions\n   */\n  \n  async getMultiAddressRequest (addresses) {\n    if (!addresses) return false\n    \n    const OFFSET_STEP = 100\n    const TXS_COUNT = 100\n    let offset = 0\n    let data = {}\n    let txs = []\n    \n    const req = async () => {\n      let params = {\n        method: 'all',\n        active: addresses,\n        offset: offset,\n        limit: TXS_COUNT\n      }\n      \n      try {\n        let res = await this.request.send(params)\n        \n        if (res.status === 'success') {\n          data = res.data || {}\n          \n          if (res.data.hasOwnProperty('transactions')) {\n            txs = [...txs, ...res.data.transactions]\n            if (res.data.transactions.length === TXS_COUNT) {\n              offset += OFFSET_STEP\n              await req()\n            }\n          }\n          \n          data.transactions = txs\n        } else {\n          console.log('BTC getMultiAddressRequest', res.error)\n        }\n      }\n      catch (err) {\n        console.log('BTC getMultiAddressRequest', err)\n      }\n    }\n    \n    await req()\n    \n    return data\n  }\n  \n  /**\n   * Request to receive a recommended set of bitcoin fees\n   * @returns {Promise<Array>} Set of bitcoin fees\n   */\n  \n  async getFeesRequest () {\n    try {\n      const res = await fetch(this.api.btcFee, {headers: this.headers})\n      const resJson = await res.json()\n      this.fee = resJson.sort((a, b) => b.feePerByte - a.feePerByte)\n    }\n    catch (err) {\n      console.log('BTC getFeesRequest', err)\n    }\n  }\n  \n  /**\n   * Full information about the bitcoin wallet\n   * @returns {Object}\n   * @constructor\n   */\n  \n  get DATA () {\n    return {\n      addresses: this.addresses,\n      transactions: this.transactions,\n      unspent: this.unspent,\n      balance: this.balance,\n      latestBlock: this.latestBlock,\n      fee: this.fee\n    }\n  }\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/class/BTC/BitcoinSync.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 168,
    "kind": "class",
    "name": "BitcoinSync",
    "memberof": "src/class/BTC/BitcoinSync.js",
    "static": true,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/class/BTC/BitcoinSync.js",
    "importStyle": "BitcoinSync",
    "description": "Class BitcoinSync.\nThis class allows you to get information about the balance on a Bitcoin wallet,\nthe list of unspent, a set of addresses that participated in transactions, and a list of transactions",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 169,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#constructor",
    "access": "public",
    "description": "Create a BitcoinSync",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "externalNode",
        "description": "External Bitcoin node"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "internalNode",
        "description": "Internal Bitcoin node"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "api",
        "description": "A set of URLs for getting information about Bitcoin addresses"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Bitcoin type. There may be p2pkh or p2wpkh"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "headers",
        "description": "Request headers"
      }
    ]
  },
  {
    "__docId__": 170,
    "kind": "member",
    "name": "externalNode",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#externalNode",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 171,
    "kind": "member",
    "name": "internalNode",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#internalNode",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "member",
    "name": "api",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#api",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 173,
    "kind": "member",
    "name": "balance",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#balance",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 174,
    "kind": "member",
    "name": "latestBlock",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#latestBlock",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 175,
    "kind": "member",
    "name": "unspent",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#unspent",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 176,
    "kind": "member",
    "name": "addresses",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#addresses",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "{\"external\": *, \"internal\": *, \"empty\": *, \"all\": *}"
      ]
    }
  },
  {
    "__docId__": 177,
    "kind": "member",
    "name": "deriveAddress",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#deriveAddress",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "{\"internal\": *, \"external\": *}"
      ]
    }
  },
  {
    "__docId__": 178,
    "kind": "member",
    "name": "transactions",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#transactions",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "{\"all\": *, \"unique\": *}"
      ]
    }
  },
  {
    "__docId__": 179,
    "kind": "member",
    "name": "fee",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#fee",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 180,
    "kind": "member",
    "name": "headers",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#headers",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 181,
    "kind": "member",
    "name": "request",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#request",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 182,
    "kind": "member",
    "name": "type",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#type",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "Start",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#Start",
    "access": "public",
    "description": "The method that starts the synchronization Bitcoin part of wallet",
    "lineNumber": 53,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<boolean>}"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<boolean>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "getAddresses",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#getAddresses",
    "access": "public",
    "description": "Getting internal and external addresses that were involved in transactions",
    "lineNumber": 71,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<boolean>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<boolean>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 187,
    "kind": "method",
    "name": "_getArrayOfAddresses",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#_getArrayOfAddresses",
    "access": "private",
    "description": "Auxiliary method that gets the Bitcoin address by node and index",
    "lineNumber": 112,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array>} Returns array of addresses"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "Bitcoin node"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Node type (external or internal)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": "The index that the derivation starts from"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "to",
        "description": "Index to which deprivation occurs"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array>"
      ],
      "spread": false,
      "description": "Returns array of addresses"
    }
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "_getDeriveIndexByAddress",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#_getDeriveIndexByAddress",
    "access": "private",
    "description": "Returns the derivation index for an address",
    "lineNumber": 136,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "address",
        "description": "Legacy Bitcoin address"
      }
    ],
    "return": {
      "types": [
        "{\"index\": *, \"node\": *}"
      ]
    }
  },
  {
    "__docId__": 189,
    "kind": "method",
    "name": "getAddressesByNode",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#getAddressesByNode",
    "access": "public",
    "description": "Getting information about addresses and forming an array of addresses.\nMakes a request for a bundle of addresses and gets a list of transactions",
    "lineNumber": 159,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array>} A list of addresses with transactions"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "Bitcoin node"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Node type (external or internal)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array>"
      ],
      "spread": false,
      "description": "A list of addresses with transactions"
    }
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "processTransactions",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#processTransactions",
    "access": "public",
    "description": "Processing transaction information: setting the type (incoming or outgoing),\ngetting balance, hash, time and block id",
    "lineNumber": 260,
    "params": [],
    "return": null
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "getTxInfoForUnspent",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#getTxInfoForUnspent",
    "access": "public",
    "description": "Gets information necessary to create a Bitcoin transaction",
    "lineNumber": 284,
    "params": [],
    "return": null
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "getBalance",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#getBalance",
    "access": "public",
    "description": "Getting a balance of Bitcoin wallet from a list of unspent",
    "lineNumber": 310,
    "params": [],
    "return": null
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "getMultiAddressRequest",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#getMultiAddressRequest",
    "access": "public",
    "description": "Request for information at multiple addresses",
    "lineNumber": 328,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} Address information, including a list of transactions"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "addresses",
        "description": "List of addresses to get data from"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "Address information, including a list of transactions"
    }
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "getFeesRequest",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#getFeesRequest",
    "access": "public",
    "description": "Request to receive a recommended set of bitcoin fees",
    "lineNumber": 379,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array>} Set of bitcoin fees"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array>"
      ],
      "spread": false,
      "description": "Set of bitcoin fees"
    },
    "params": []
  },
  {
    "__docId__": 200,
    "kind": "get",
    "name": "DATA",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#DATA",
    "access": "public",
    "description": "Full information about the bitcoin wallet",
    "lineNumber": 396,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "{\"addresses\": *, \"transactions\": *, \"unspent\": *, \"balance\": *, \"latestBlock\": *, \"fee\": *}"
      ]
    }
  },
  {
    "__docId__": 201,
    "kind": "file",
    "name": "src/class/BTC/BitcoinTx.js",
    "content": "import converter from '@/helpers/converters'\nimport {calcBtcTxSize, getBtcPrivateKeyByIndex, makeRawBtcTx} from '@/helpers/coreHelper'\nimport CustomError from '@/helpers/handleErrors'\nimport Request from '@/helpers/Request'\n\n/**\n * List of available commission types for Bitcoin transactions\n * @type {Array}\n */\n\nconst FEE_IDS = ['fast', 'regular', 'cheap', 'custom']\n\n/**\n * Class BitcoinTx.\n * This class is responsible for calculating the fee,\n * calculating the available amount to send, and generating and signing a Bitcoin transaction\n * @class\n */\n\nexport default class BitcoinTx {\n  /**\n   * Create a BitcoinTx\n   * @param {Object} data - Input data for generating a transaction, calculating a fee or available amount\n   * @param {Array} data.unspent - Array of unspent addresses\n   * @param {string} data.internalAddress - Address for change\n   * @param {number} data.amount - Transaction amount\n   * @param {number} data.balance - Bitcoin wallet balance\n   * @param {Array} data.feeList - Set of bitcoin fees\n   * @param {Object} data.customFee - Custom fee entered by the user\n   * @param {Object} data.nodes - External and internal nodes required to generate private keys\n   * @param {String} data.type - Bitcoin type. There may be p2pkh or p2wpkh\n   * @param {Object} data.headers - Request headers\n   */\n  \n  constructor (data) {\n    this.unspent = data.unspent\n    this.internalAddress = data.internalAddress\n    this.amount = data.amount ? converter.btc_to_sat(data.amount) : 0\n    this.balance = data.balance\n    this.dust = 1000\n    this.fee = data.feeList\n    this.customFee = +data.customFee || 0\n    this.nodes = data.nodes || {}\n    this.feeList = []\n    this.request = new Request(data.api, data.headers)\n    this.type = data.type ? data.type.toLowerCase() : 'p2pkh'\n  }\n  \n  /**\n   * Calculating the fee amount\n   * @param {number} size - Transaction size\n   * @returns {Promise<Array>} Returns a set of fees for a specific transaction amount\n   */\n  \n  async calcFee (size = 0) {\n    const fees = [...this.fee.map(item => item.feePerByte), this.customFee]\n    \n    if (this.amount <= 0 || this.balance < this.amount) {\n      return this.calcEmptyFee(fees)\n    }\n    \n    const pArray = fees.map(async fee => {\n      return await this.getInputs(fee, size)\n    })\n    \n    const res = await Promise.all(pArray)\n    \n    this.feeList = res.map((item, i) => {\n      return {\n        id: FEE_IDS[i],\n        SAT: item.fee,\n        BTC: converter.sat_to_btc(item.fee),\n        fee: fees[i],\n        feeInBTC: converter.sat_to_btc(fees[i]),\n        inputs: item.inputs,\n        inputsAmount: item.inputsAmount,\n        custom: FEE_IDS[i] === 'custom'\n      }\n    })\n    \n    return this.feeList\n  }\n  \n  /**\n   * Sets an array of zero fees.\n   * Used when the user does not have enough funds for the transaction\n   * @returns {Array} Returns an array with zero fees\n   */\n  \n  calcEmptyFee (fees) {\n    this.feeList = fees.map((item, i) => {\n      return {\n        id: FEE_IDS[i],\n        SAT: 0,\n        BTC: 0,\n        fee: item,\n        feeInBTC: converter.sat_to_btc(item),\n        inputs: [],\n        inputsAmount: 0,\n        custom: FEE_IDS[i] === 'custom'\n      }\n    })\n    \n    return this.feeList\n  }\n  \n  /**\n   * Finds a list of inputs for a specific transaction\n   * @param {number} fee - Fee size\n   * @param {number} size - Transaction size\n   * @returns {Promise<Object>} Returns an object with a list of inputs, the total fee amount, and the total amount of all inputs\n   */\n  \n  async getInputs (fee, size) {\n    let index = 0\n    let inputsAmount = 0\n    let inputs = []\n    let res = {}\n    \n    this.dust = size ? 0 : 1000\n    \n    let req = async () => {\n      let item = this.unspent[index]\n      let defaultSize = calcBtcTxSize(index + 1, 2, this.type === 'p2wpkh')\n      let calcFee = size ? size * fee : defaultSize * fee\n      \n      inputsAmount += item.value\n      inputs.push(item)\n      \n      let total = this.amount + calcFee + this.dust\n      \n      if (total > inputsAmount) {\n        index++\n        \n        if (index >= this.unspent.length) {\n          res = {\n            fee: 0,\n            inputs: [],\n            inputsAmount: 0\n          }\n        } else {\n          await req()\n        }\n      } else {\n        res = {\n          fee: calcFee,\n          inputs: inputs,\n          inputsAmount: inputsAmount\n        }\n      }\n    }\n    await req()\n    \n    return res\n  }\n  \n  /**\n   * Creating a Bitcoin transaction\n   * @param {Object} data - Input data for a transaction\n   * @param {string} data.addressTo - Recipient address\n   * @param {Object} data.fee - The transaction fee and list of inputs\n   * @returns {Promise<Object>} Returns the raw transaction and transaction hash if sent successfully\n   */\n  \n  async make (data) {\n    const {addressTo, fee} = data\n    \n    if (!this.amount) {\n      throw new CustomError('err_tx_btc_amount')\n    }\n    \n    if (isNaN(fee.SAT)) {\n      throw new CustomError('err_tx_btc_fee')\n    }\n    \n    let change = +fee.inputsAmount - +this.amount - +fee.SAT\n    let inputs = []\n    \n    try {\n      inputs = await this.getInputsWithTxInfo(fee.inputs)\n    }\n    catch (e) {\n      throw new Error(e.message)\n    }\n    \n    if (change >= 0) {\n      let params = {\n        inputs: inputs,\n        outputs: [\n          {\n            address: addressTo,\n            value: this.amount\n          }\n        ]\n      }\n      \n      if (change) {\n        params.outputs[1] = {\n          address: this.internalAddress,\n          value: change\n        }\n      }\n      \n      return makeRawBtcTx(params)\n    } else {\n      throw new CustomError('err_tx_btc_balance')\n    }\n  }\n  \n  /**\n   * Returns the required data to create a transaction\n   * @param {Array} inputs - Array of inputs for tx\n   * @returns {Promise<Array>} Returns an array of inputs with a private keys and raw transaction data for p2pkh items\n   */\n  \n  async getInputsWithTxInfo (inputs) {\n    try {\n      let rawTxsData = []\n      let finalInputs = []\n      \n      if (this.type === 'p2pkh') {\n        let hashes = []\n        \n        for (let input of inputs) {\n          if (!input.tx) {\n            if (input.transaction_hash) {\n              hashes.push(input.transaction_hash)\n            } else {\n              throw new CustomError('err_tx_btc_unspent')\n            }\n          }\n        }\n        const unique_hashes = [...new Set(hashes)]\n        \n        rawTxsData = await this.getRawTxHex(unique_hashes)\n        \n        for (let input of inputs) {\n          let item = {\n            hash: input.transaction_hash,\n            index: input.index,\n            address: input.address,\n            value: input.value\n          }\n          if (!input.tx) {\n            let data = rawTxsData.find(item => item.hash === input.transaction_hash)\n            item.tx = data ? data.rawData : null\n          } else {\n            item.tx = input.tx\n          }\n          item.key = input.key || getBtcPrivateKeyByIndex(this.nodes[input.node_type], input.derive_index)\n          \n          finalInputs.push(item)\n        }\n      } else {\n        for (let input of inputs) {\n          let item = {\n            hash: input.transaction_hash,\n            index: input.index,\n            address: input.address,\n            value: input.value\n          }\n          item.key = input.key || getBtcPrivateKeyByIndex(this.nodes[input.node_type], input.derive_index)\n          \n          finalInputs.push(item)\n        }\n      }\n  \n      return finalInputs\n    }\n    catch (e) {\n      throw new Error(e.message)\n    }\n  }\n  \n  /**\n   * Raw transaction request\n   * @param {Array} hashes - List of hashes\n   * @returns {Promise<Array>} Array of raw Bitcoin transactions for each hash\n   */\n  \n  async getRawTxHex (hashes) {\n    if (!hashes || !hashes.length) return []\n    \n    const ARRAY_SIZE = 10\n    const ARRAYS_COUNT = Math.ceil(hashes.length / ARRAY_SIZE)\n    let txs = []\n    let arrays = []\n    let counter = 0\n    \n    for (let i = 0; i < ARRAYS_COUNT; i++) {\n      arrays[i] = hashes.slice((i * ARRAY_SIZE), (i * ARRAY_SIZE) + ARRAY_SIZE)\n    }\n    \n    const req = async () => {\n      try {\n        let res = await this.request.send({\n          method: 'rawtx',\n          txs: arrays[counter]\n        })\n        \n        if (res.status === 'success' && res.data.length) {\n          txs = [...txs, ...res.data]\n          counter++\n          \n          if (counter !== ARRAYS_COUNT) {\n            await req()\n          }\n        } else {\n          throw new CustomError('err_tx_btc_raw_tx')\n        }\n      }\n      catch (e) {\n        throw new CustomError('err_tx_btc_raw_tx')\n      }\n    }\n    \n    await req()\n    \n    return txs\n  }\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/class/BTC/BitcoinTx.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 202,
    "kind": "variable",
    "name": "FEE_IDS",
    "memberof": "src/class/BTC/BitcoinTx.js",
    "static": true,
    "longname": "src/class/BTC/BitcoinTx.js~FEE_IDS",
    "access": "public",
    "export": false,
    "importPath": "lumi-web-core/src/class/BTC/BitcoinTx.js",
    "importStyle": null,
    "description": "List of available commission types for Bitcoin transactions",
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 203,
    "kind": "class",
    "name": "BitcoinTx",
    "memberof": "src/class/BTC/BitcoinTx.js",
    "static": true,
    "longname": "src/class/BTC/BitcoinTx.js~BitcoinTx",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/class/BTC/BitcoinTx.js",
    "importStyle": "BitcoinTx",
    "description": "Class BitcoinTx.\nThis class is responsible for calculating the fee,\ncalculating the available amount to send, and generating and signing a Bitcoin transaction",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 204,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/class/BTC/BitcoinTx.js~BitcoinTx",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/BTC/BitcoinTx.js~BitcoinTx#constructor",
    "access": "public",
    "description": "Create a BitcoinTx",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Input data for generating a transaction, calculating a fee or available amount"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "data.unspent",
        "description": "Array of unspent addresses"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.internalAddress",
        "description": "Address for change"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.amount",
        "description": "Transaction amount"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.balance",
        "description": "Bitcoin wallet balance"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "data.feeList",
        "description": "Set of bitcoin fees"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data.customFee",
        "description": "Custom fee entered by the user"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data.nodes",
        "description": "External and internal nodes required to generate private keys"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "data.type",
        "description": "Bitcoin type. There may be p2pkh or p2wpkh"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data.headers",
        "description": "Request headers"
      }
    ]
  },
  {
    "__docId__": 205,
    "kind": "member",
    "name": "unspent",
    "memberof": "src/class/BTC/BitcoinTx.js~BitcoinTx",
    "static": false,
    "longname": "src/class/BTC/BitcoinTx.js~BitcoinTx#unspent",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 206,
    "kind": "member",
    "name": "internalAddress",
    "memberof": "src/class/BTC/BitcoinTx.js~BitcoinTx",
    "static": false,
    "longname": "src/class/BTC/BitcoinTx.js~BitcoinTx#internalAddress",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 207,
    "kind": "member",
    "name": "amount",
    "memberof": "src/class/BTC/BitcoinTx.js~BitcoinTx",
    "static": false,
    "longname": "src/class/BTC/BitcoinTx.js~BitcoinTx#amount",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 208,
    "kind": "member",
    "name": "balance",
    "memberof": "src/class/BTC/BitcoinTx.js~BitcoinTx",
    "static": false,
    "longname": "src/class/BTC/BitcoinTx.js~BitcoinTx#balance",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 209,
    "kind": "member",
    "name": "dust",
    "memberof": "src/class/BTC/BitcoinTx.js~BitcoinTx",
    "static": false,
    "longname": "src/class/BTC/BitcoinTx.js~BitcoinTx#dust",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 210,
    "kind": "member",
    "name": "fee",
    "memberof": "src/class/BTC/BitcoinTx.js~BitcoinTx",
    "static": false,
    "longname": "src/class/BTC/BitcoinTx.js~BitcoinTx#fee",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 211,
    "kind": "member",
    "name": "customFee",
    "memberof": "src/class/BTC/BitcoinTx.js~BitcoinTx",
    "static": false,
    "longname": "src/class/BTC/BitcoinTx.js~BitcoinTx#customFee",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 212,
    "kind": "member",
    "name": "nodes",
    "memberof": "src/class/BTC/BitcoinTx.js~BitcoinTx",
    "static": false,
    "longname": "src/class/BTC/BitcoinTx.js~BitcoinTx#nodes",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 213,
    "kind": "member",
    "name": "feeList",
    "memberof": "src/class/BTC/BitcoinTx.js~BitcoinTx",
    "static": false,
    "longname": "src/class/BTC/BitcoinTx.js~BitcoinTx#feeList",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 214,
    "kind": "member",
    "name": "request",
    "memberof": "src/class/BTC/BitcoinTx.js~BitcoinTx",
    "static": false,
    "longname": "src/class/BTC/BitcoinTx.js~BitcoinTx#request",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 215,
    "kind": "member",
    "name": "type",
    "memberof": "src/class/BTC/BitcoinTx.js~BitcoinTx",
    "static": false,
    "longname": "src/class/BTC/BitcoinTx.js~BitcoinTx#type",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 216,
    "kind": "method",
    "name": "calcFee",
    "memberof": "src/class/BTC/BitcoinTx.js~BitcoinTx",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BTC/BitcoinTx.js~BitcoinTx#calcFee",
    "access": "public",
    "description": "Calculating the fee amount",
    "lineNumber": 55,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array>} Returns a set of fees for a specific transaction amount"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "Transaction size"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array>"
      ],
      "spread": false,
      "description": "Returns a set of fees for a specific transaction amount"
    }
  },
  {
    "__docId__": 218,
    "kind": "method",
    "name": "calcEmptyFee",
    "memberof": "src/class/BTC/BitcoinTx.js~BitcoinTx",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/BTC/BitcoinTx.js~BitcoinTx#calcEmptyFee",
    "access": "public",
    "description": "Sets an array of zero fees.\nUsed when the user does not have enough funds for the transaction",
    "lineNumber": 90,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} Returns an array with zero fees"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Returns an array with zero fees"
    },
    "params": [
      {
        "name": "fees",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 220,
    "kind": "method",
    "name": "getInputs",
    "memberof": "src/class/BTC/BitcoinTx.js~BitcoinTx",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BTC/BitcoinTx.js~BitcoinTx#getInputs",
    "access": "public",
    "description": "Finds a list of inputs for a specific transaction",
    "lineNumber": 114,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} Returns an object with a list of inputs, the total fee amount, and the total amount of all inputs"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "fee",
        "description": "Fee size"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "Transaction size"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "Returns an object with a list of inputs, the total fee amount, and the total amount of all inputs"
    }
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "make",
    "memberof": "src/class/BTC/BitcoinTx.js~BitcoinTx",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BTC/BitcoinTx.js~BitcoinTx#make",
    "access": "public",
    "description": "Creating a Bitcoin transaction",
    "lineNumber": 165,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} Returns the raw transaction and transaction hash if sent successfully"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Input data for a transaction"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.addressTo",
        "description": "Recipient address"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data.fee",
        "description": "The transaction fee and list of inputs"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "Returns the raw transaction and transaction hash if sent successfully"
    }
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "getInputsWithTxInfo",
    "memberof": "src/class/BTC/BitcoinTx.js~BitcoinTx",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BTC/BitcoinTx.js~BitcoinTx#getInputsWithTxInfo",
    "access": "public",
    "description": "Returns the required data to create a transaction",
    "lineNumber": 216,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array>} Returns an array of inputs with a private keys and raw transaction data for p2pkh items"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "inputs",
        "description": "Array of inputs for tx"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array>"
      ],
      "spread": false,
      "description": "Returns an array of inputs with a private keys and raw transaction data for p2pkh items"
    }
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "getRawTxHex",
    "memberof": "src/class/BTC/BitcoinTx.js~BitcoinTx",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BTC/BitcoinTx.js~BitcoinTx#getRawTxHex",
    "access": "public",
    "description": "Raw transaction request",
    "lineNumber": 281,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array>} Array of raw Bitcoin transactions for each hash"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "hashes",
        "description": "List of hashes"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array>"
      ],
      "spread": false,
      "description": "Array of raw Bitcoin transactions for each hash"
    }
  },
  {
    "__docId__": 225,
    "kind": "file",
    "name": "src/class/BTCV/BitcoinVaultSync.js",
    "content": "import Request from '@/helpers/Request'\nimport {getBtcAddressByPublicKey} from '@/helpers/coreHelper'\n\n/**\n * Class BitcoinVaultSync.\n * This class allows you to get information about the balance on a Bitcoin Vault wallet,\n * the list of unspent, a set of addresses that participated in transactions, and a list of transactions\n * @class\n */\n\nexport default class BitcoinVaultSync {\n  /**\n   * Create a BitcoinVaultSync\n   * @param {Object} externalNode - External Bitcoin Vault node\n   * @param {Object} internalNode - Internal Bitcoin Vault node\n   * @param {Object} addresses - Internal and external Bitcoin Vault addresses\n   * @param {Object} api - A set of URLs for getting information about Bitcoin Vault addresses\n   * @param {Object} headers - Request headers\n   */\n  constructor (externalNode, internalNode, addresses, api, headers) {\n    const {external, internal} = addresses\n    this.externalNode = externalNode\n    this.internalNode = internalNode\n    this.api = api\n    this.balance = 0\n    this.latestBlock = 0\n    this.unspent = []\n    this.defaultAddresses = {\n      external, internal\n    }\n    this.addresses = {\n      external: [],\n      internal: [],\n      empty: {},\n      list: {}\n    }\n    this.transactions = {\n      all: [],\n      unique: []\n    }\n    this.fee = [\n      {\n        feePerByte: 3,\n        name: 'Regular'\n      }\n    ]\n    \n    this.request = new Request(this.api.btcv, headers)\n  }\n  \n  /**\n   * The method that starts the synchronization Bitcoin Vault part of wallet\n   * @returns {Promise<boolean>}\n   * @constructor\n   */\n  \n  async Start () {\n    this.transactions = {\n      all: [],\n      unique: []\n    }\n    this.unspent = []\n    await Promise.all([\n      await this.getAddresses(),\n      await this.getHistory(),\n      await this.getFeesRequest()\n    ])\n  }\n  \n  /**\n   * Getting internal and external addresses that were involved in transactions\n   * @returns {Promise<boolean>}\n   */\n  \n  async getAddresses () {\n    if (this.defaultAddresses.external && this.defaultAddresses.internal) {\n      this.addresses.external = [\n        {\n          address: this.defaultAddresses.external,\n          type: 'external',\n          deriveIndex: 0,\n          pubkey: this.externalNode.deriveChild(0).publicKey.toString('hex')\n        }\n      ]\n      this.addresses.internal = [\n        {\n          address: this.defaultAddresses.internal,\n          type: 'internal',\n          deriveIndex: 0,\n          pubkey: this.internalNode.deriveChild(0).publicKey.toString('hex')\n        }\n      ]\n    }\n\n    this.addresses.empty = {\n      external: this.addresses.external[this.addresses.external.length - 1],\n      internal: this.addresses.internal[this.addresses.internal.length - 1]\n    }\n    this.addresses.list = {\n      external: this.addresses.external.map((item) => item.address),\n      internal: this.addresses.internal.map((item) => item.address),\n    }\n    this.addresses.list.all = [...this.addresses.list.external, ...this.addresses.list.internal]\n\n    await this.getUnspent()\n  }\n  \n  /**\n   * Returns the derivation index for an address\n   * @param {string} address - Bitcoin Vault address\n   */\n  \n  _getDeriveIndexByAddress (address) {\n    let find = this.addresses.external.find(item => item.address === address)\n    let node = 'external'\n    \n    if (!find) {\n      find = this.addresses.internal.find(item => item.address === address)\n      node = 'internal'\n    }\n    \n    return {\n      index: find.deriveIndex,\n      node: node\n    }\n  }\n  \n  async getHistory () {\n    let history = await this.getHistoryRequest(this.addresses.list.all)\n\n    for (let item of history) {\n      let {txs} = item\n      \n      if (txs.length) {\n        let formatted_txs = txs.map(tx => {\n          return {\n            ...tx.rawData,\n            height: tx.height\n          }\n        })\n        \n        this.transactions.all.push(...formatted_txs)\n      }\n    }\n    \n    await this.processTransactions()\n  }\n  \n  /**\n   * Processing transaction information: setting the type (incoming or outgoing),\n   * getting addresses from and to, getting a transaction amount\n   * @returns {Promise<Boolean>}\n   */\n  \n  async processTransactions () {\n    this.transactions.unique = this.transactions.all.filter(\n      (value, index, self) =>\n        self.findIndex((tx) => tx.txid === value.txid) === index\n    )\n    const pubkeys = [this.addresses.external[0].pubkey, this.addresses.internal[0].pubkey]\n    \n    try {\n      this.transactions.unique.forEach((tx) => {\n        let vin = {\n          my: [],\n          other: []\n        }\n        let isMyInAddress\n        try {\n          for (let item of tx.vin) {\n            if (item.txinwitness && item.txinwitness[1]) {\n              let find = pubkeys.find(key => key === item.txinwitness[1])\n              item.address = getBtcAddressByPublicKey(item.txinwitness[1], 'p2wpkh', 'btcv')\n  \n              if (find) {\n                vin.my.push(item.address)\n                isMyInAddress = true\n              } else {\n                vin.other.push(item.address)\n              }\n            }\n          }\n        } catch (e) {\n          console.log(e)\n        }\n        tx.action = isMyInAddress ? 'outgoing' : 'incoming'\n        \n        // tx.self = isMyInAddress ? tx.vout.every(item => this.addresses.list.all.includes(item.scriptPubKey.addresses[0])) : false\n        //\n        // if (tx.self) {\n        //   tx.action = 'outgoing'\n        // }\n        \n        let value = 0\n        if (tx.action === 'outgoing') {\n          tx.vout.forEach(item => {\n            item.scriptPubKey.addresses.forEach(address => {\n              if (!this.addresses.list.internal.includes(address)) {\n                value += item.value\n                tx.to = address\n              }\n            })\n          })\n          tx.value = value\n          tx.from = vin.my[0]\n        } else {\n          tx.vout.forEach(item => {\n            item.scriptPubKey.addresses.forEach(address => {\n              if (this.addresses.list.all.includes(address)) {\n                value += item.value\n                tx.to = address\n              }\n            })\n          })\n          tx.value = value\n          tx.from = vin.other[0]\n        }\n      })\n    }\n    catch (e) {\n      console.log('BTCV processTransactions error', e)\n    }\n  }\n  \n  /**\n   * Getting a unspent transaction output for\n   * all addresses in the wallet with the transaction.\n   * Calculates the balance of the wallet for unspent\n   * @returns {Promise<boolean>}\n   */\n  \n  async getUnspent () {\n    let res = await this.getUnspentOutputsRequest(this.addresses.list.all)\n    \n    res.forEach(item => {\n      let {address, unspent} = item\n      \n      if (unspent.length) {\n        let derivationInfo = this._getDeriveIndexByAddress(address)\n        this.unspent = unspent.map(utxo => {\n          utxo.address = address\n          utxo.deriveIndex = derivationInfo.index\n          utxo.nodeType = derivationInfo.node\n          return utxo\n        })\n      }\n    })\n    this.unspent = this.unspent.sort((a, b) => b.value - a.value)\n    this.balance = this.getBalance(this.unspent)\n  }\n  \n  /**\n   * Getting a balance of Bitcoin Vault wallet from a list of unspent\n   * @param {Array} unspent - The list of unspent transaction output\n   * @returns {number} The balance of the Bitcoin Vault wallet\n   */\n  \n  getBalance (unspent) {\n    if (!Array.isArray(unspent)) {\n      return 0\n    }\n    \n    let balance = 0\n    \n    unspent.forEach((item) => {\n      if (item && item.hasOwnProperty('value')) {\n        balance += +item.value\n      }\n    })\n    \n    return balance\n  }\n  \n  /**\n   * Getting a history of Bitcoin Vault wallet from a list of addresses\n   * @param {Array} addresses - The list of external and internal addresses\n   * @returns {Promise<Array>} The list of transactions\n   */\n  \n  async getHistoryRequest (addresses) {\n    if (!addresses) return []\n    \n    try {\n      let res = await this.request.send({\n        addresses: addresses\n      }, 'history')\n      \n      if (res.status === 'success') {\n        this.latestBlock = res.data.lastBlock || 0\n        return res.data.txs\n      } else {\n        throw new Error(res.error)\n      }\n    }\n    catch (e) {\n      console.log('BTCV getAddressTransactions error', e)\n      return []\n    }\n  }\n  \n  /**\n   * Request to receive unspent outputs\n   * @param {Array} addresses - A set of addresses to get the unspent output from\n   * @returns {Promise<Array>} - Information about unspent output\n   */\n  \n  async getUnspentOutputsRequest (addresses) {\n    if (!addresses) return []\n    \n    const length = 20\n    let arraysCount = Math.ceil(addresses.length / length)\n    let arrays = []\n    \n    for (let i = 0; i < arraysCount; i++) {\n      let arr = addresses.slice(i * length, (i + 1) * length)\n      arrays.push(arr)\n    }\n    \n    const res = await Promise.all(arrays.map((array) => {\n      return new Promise((resolve) => {\n        const params = {\n          addresses: array\n        }\n        \n        this.request.send(params, 'unspent').then(res => {\n          if (res.status === 'success') {\n            return resolve(res.data)\n          } else {\n            throw new Error(res.error)\n          }\n        }).catch(e => {\n          console.log('BTCV getUnspentOutputsRequest error', e)\n          resolve([])\n        })\n      })\n    }))\n    \n    return [].concat.apply([], res)\n  }\n  \n  /**\n   * Request to receive a recommended set of bitcoin fees\n   * @returns {Promise<Array>} Set of Bitcoin Vault fees\n   */\n  \n  async getFeesRequest () {\n    try {\n      const res = await this.request.send({}, 'fees', 'GET')\n      \n      if (res.status === 'success') {\n        this.fee = res.data.sort((a, b) => b.feePerByte - a.feePerByte)\n      }\n    }\n    catch (err) {\n      console.log('BTCV getFeesRequest', err)\n    }\n  }\n  \n  get DATA () {\n    return {\n      addresses: this.addresses,\n      transactions: this.transactions,\n      unspent: this.unspent,\n      balance: this.balance,\n      latestBlock: this.latestBlock,\n      fee: this.fee\n    }\n  }\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/class/BTCV/BitcoinVaultSync.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 226,
    "kind": "class",
    "name": "BitcoinVaultSync",
    "memberof": "src/class/BTCV/BitcoinVaultSync.js",
    "static": true,
    "longname": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/class/BTCV/BitcoinVaultSync.js",
    "importStyle": "BitcoinVaultSync",
    "description": "Class BitcoinVaultSync.\nThis class allows you to get information about the balance on a Bitcoin Vault wallet,\nthe list of unspent, a set of addresses that participated in transactions, and a list of transactions",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 227,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync#constructor",
    "access": "public",
    "description": "Create a BitcoinVaultSync",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "externalNode",
        "description": "External Bitcoin Vault node"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "internalNode",
        "description": "Internal Bitcoin Vault node"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "addresses",
        "description": "Internal and external Bitcoin Vault addresses"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "api",
        "description": "A set of URLs for getting information about Bitcoin Vault addresses"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "headers",
        "description": "Request headers"
      }
    ]
  },
  {
    "__docId__": 228,
    "kind": "member",
    "name": "externalNode",
    "memberof": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync",
    "static": false,
    "longname": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync#externalNode",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 229,
    "kind": "member",
    "name": "internalNode",
    "memberof": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync",
    "static": false,
    "longname": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync#internalNode",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 230,
    "kind": "member",
    "name": "api",
    "memberof": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync",
    "static": false,
    "longname": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync#api",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 231,
    "kind": "member",
    "name": "balance",
    "memberof": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync",
    "static": false,
    "longname": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync#balance",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 232,
    "kind": "member",
    "name": "latestBlock",
    "memberof": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync",
    "static": false,
    "longname": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync#latestBlock",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 233,
    "kind": "member",
    "name": "unspent",
    "memberof": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync",
    "static": false,
    "longname": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync#unspent",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 234,
    "kind": "member",
    "name": "defaultAddresses",
    "memberof": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync",
    "static": false,
    "longname": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync#defaultAddresses",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{\"external\": *, \"internal\": *}"
      ]
    }
  },
  {
    "__docId__": 235,
    "kind": "member",
    "name": "addresses",
    "memberof": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync",
    "static": false,
    "longname": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync#addresses",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "{\"external\": *, \"internal\": *, \"empty\": *, \"list\": *}"
      ]
    }
  },
  {
    "__docId__": 236,
    "kind": "member",
    "name": "transactions",
    "memberof": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync",
    "static": false,
    "longname": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync#transactions",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "{\"all\": *, \"unique\": *}"
      ]
    }
  },
  {
    "__docId__": 237,
    "kind": "member",
    "name": "fee",
    "memberof": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync",
    "static": false,
    "longname": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync#fee",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "member",
    "name": "request",
    "memberof": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync",
    "static": false,
    "longname": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync#request",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "Start",
    "memberof": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync#Start",
    "access": "public",
    "description": "The method that starts the synchronization Bitcoin Vault part of wallet",
    "lineNumber": 57,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<boolean>}"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<boolean>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 242,
    "kind": "method",
    "name": "getAddresses",
    "memberof": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync#getAddresses",
    "access": "public",
    "description": "Getting internal and external addresses that were involved in transactions",
    "lineNumber": 75,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<boolean>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<boolean>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 243,
    "kind": "method",
    "name": "_getDeriveIndexByAddress",
    "memberof": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync#_getDeriveIndexByAddress",
    "access": "private",
    "description": "Returns the derivation index for an address",
    "lineNumber": 113,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "address",
        "description": "Bitcoin Vault address"
      }
    ],
    "return": {
      "types": [
        "{\"index\": *, \"node\": *}"
      ]
    }
  },
  {
    "__docId__": 244,
    "kind": "method",
    "name": "getHistory",
    "memberof": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync#getHistory",
    "access": "public",
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "processTransactions",
    "memberof": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync#processTransactions",
    "access": "public",
    "description": "Processing transaction information: setting the type (incoming or outgoing),\ngetting addresses from and to, getting a transaction amount",
    "lineNumber": 155,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Boolean>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Boolean>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "getUnspent",
    "memberof": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync#getUnspent",
    "access": "public",
    "description": "Getting a unspent transaction output for\nall addresses in the wallet with the transaction.\nCalculates the balance of the wallet for unspent",
    "lineNumber": 232,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<boolean>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<boolean>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 250,
    "kind": "method",
    "name": "getBalance",
    "memberof": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync#getBalance",
    "access": "public",
    "description": "Getting a balance of Bitcoin Vault wallet from a list of unspent",
    "lineNumber": 258,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The balance of the Bitcoin Vault wallet"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "unspent",
        "description": "The list of unspent transaction output"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The balance of the Bitcoin Vault wallet"
    }
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "getHistoryRequest",
    "memberof": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync#getHistoryRequest",
    "access": "public",
    "description": "Getting a history of Bitcoin Vault wallet from a list of addresses",
    "lineNumber": 280,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array>} The list of transactions"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "addresses",
        "description": "The list of external and internal addresses"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array>"
      ],
      "spread": false,
      "description": "The list of transactions"
    }
  },
  {
    "__docId__": 253,
    "kind": "method",
    "name": "getUnspentOutputsRequest",
    "memberof": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync#getUnspentOutputsRequest",
    "access": "public",
    "description": "Request to receive unspent outputs",
    "lineNumber": 307,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array>} - Information about unspent output"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "addresses",
        "description": "A set of addresses to get the unspent output from"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array>"
      ],
      "spread": false,
      "description": "Information about unspent output"
    }
  },
  {
    "__docId__": 254,
    "kind": "method",
    "name": "getFeesRequest",
    "memberof": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync#getFeesRequest",
    "access": "public",
    "description": "Request to receive a recommended set of bitcoin fees",
    "lineNumber": 346,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array>} Set of Bitcoin Vault fees"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array>"
      ],
      "spread": false,
      "description": "Set of Bitcoin Vault fees"
    },
    "params": []
  },
  {
    "__docId__": 256,
    "kind": "get",
    "name": "DATA",
    "memberof": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/BTCV/BitcoinVaultSync.js~BitcoinVaultSync#DATA",
    "access": "public",
    "description": null,
    "lineNumber": 359,
    "undocument": true,
    "type": {
      "types": [
        "{\"addresses\": *, \"transactions\": *, \"unspent\": *, \"balance\": *, \"latestBlock\": *, \"fee\": *}"
      ]
    }
  },
  {
    "__docId__": 257,
    "kind": "file",
    "name": "src/class/BTCV/BitcoinVaultTx.js",
    "content": "import converter from '@/helpers/converters'\nimport {calcBtcTxSize, getBtcPrivateKeyByIndex, makeRawBtcvTx} from '@/helpers/coreHelper'\nimport CustomError from '@/helpers/handleErrors'\n\n/**\n * List of available commission types for Bitcoin Vault transactions\n * @type {Array}\n */\n\nconst FEE_IDS = ['regular', 'custom']\n\n/**\n * Class BitcoinVaultTx.\n * This class is responsible for calculating the fee,\n * calculating the available amount to send, and generating and signing a Bitcoin Vault transaction\n * @class\n */\n\nexport default class BitcoinVaultTx {\n  /**\n   * Create a BitcoinVaultTx\n   * @param {Object} data - Input data for generating a transaction, calculating a fee or available amount\n   * @param {Array} data.unspent - Array of unspent addresses\n   * @param {number} data.amount - Transaction amount\n   * @param {number} data.balance - Bitcoin Vault wallet balance\n   * @param {Array} data.feeList - Set of raw Bitcoin Vault fees\n   * @param {Object} data.customFee - Custom fee entered by the user\n   * @param {Object} data.nodes - External and internal Bitcoin Vault nodes\n   * @param {string} data.internalAddress - Address for change\n   */\n  constructor (data) {\n    this.unspent = data.unspent\n    this.amount = data.amount ? converter.btc_to_sat(data.amount) : 0\n    this.balance = data.balance\n    this.customFee = +data.customFee ? +data.customFee : 0\n    this.nodes = data.nodes\n    this.internalAddress = data.internalAddress\n    this.fee = data.feeList\n    this.feeList = []\n    this.dust = 1000\n  }\n  \n  /**\n   * Calculating the fee amount\n   * @param {number} size - Transaction size\n   * @returns {Promise<Array>} Returns a set of fees for a specific transaction amount\n   */\n  \n  async calcFee (size = 0) {\n    const fees = [...this.fee.map(item => item.feePerByte), this.customFee]\n    \n    if (this.amount <= 0 || this.balance < this.amount) {\n      return this.calcEmptyFee(fees)\n    }\n    \n    const pArray = fees.map(async fee => {\n      return await this.getInputs(fee, size)\n    })\n    \n    const res = await Promise.all(pArray)\n    \n    this.feeList = res.map((item, i) => {\n      return {\n        id: FEE_IDS[i],\n        SAT: item.fee,\n        BTCV: converter.sat_to_btc(item.fee),\n        fee: fees[i],\n        feeInBTC: converter.sat_to_btc(fees[i]),\n        inputs: item.inputs,\n        inputsAmount: item.inputsAmount,\n        custom: FEE_IDS[i] === 'custom'\n      }\n    })\n    \n    return this.feeList\n  }\n  \n  /**\n   * Sets an array of zero fees.\n   * Used when the user does not have enough funds for the transaction\n   * @param {Array} fees - set of commission types\n   * @returns {Array} Returns an array with zero fees\n   */\n  \n  calcEmptyFee (fees) {\n    this.feeList = fees.map((item, i) => {\n      return {\n        id: FEE_IDS[i],\n        SAT: 0,\n        BTCV: 0,\n        fee: item,\n        feeInBTC: converter.sat_to_btc(item),\n        inputs: [],\n        inputsAmount: 0,\n        custom: FEE_IDS[i] === 'custom'\n      }\n    })\n    \n    return this.feeList\n  }\n  \n  /**\n   * Finds a list of inputs for a specific transaction\n   * @param {number} fee - Fee size\n   * @param {number} size - Transaction size\n   * @returns {Promise<Object>} Returns an object with a list of inputs, the total fee amount, and the total amount of all inputs\n   */\n  \n  async getInputs (fee, size) {\n    let index = 0\n    let inputsAmount = 0\n    let inputs = []\n    let res = {}\n    \n    this.dust = size ? 0 : 1000\n    \n    let req = async () => {\n      let item = this.unspent[index]\n      let defaultSize = calcBtcTxSize(index + 1, 2, true)\n      let calcFee = size ? size * fee : defaultSize * fee\n      \n      inputsAmount += item.value\n      inputs.push(item)\n      \n      let total = this.amount + calcFee + this.dust\n      \n      if (total > inputsAmount) {\n        index++\n        \n        if (index >= this.unspent.length) {\n          res = {\n            fee: 0,\n            inputs: [],\n            inputsAmount: 0\n          }\n        } else {\n          await req()\n        }\n      } else {\n        res = {\n          fee: calcFee,\n          inputs: inputs,\n          inputsAmount: inputsAmount\n        }\n      }\n    }\n    await req()\n    \n    return res\n  }\n  \n  /**\n   * Creating a Bitcoin Vault transaction\n   * @param {Object} data - Input data for a transaction\n   * @param {string} data.addressTo - Recipient address\n   * @param {Object} data.fee - The transaction fee and list of inputs\n   * @returns {Promise<Object>} Returns the raw transaction and transaction hash if sent successfully\n   */\n\n  async make (data) {\n    const {addressTo, fee} = data\n  \n    if (!this.amount) {\n      throw new CustomError('err_tx_btcv_amount')\n    }\n  \n    if (isNaN(fee.SAT)) {\n      throw new CustomError('err_tx_btcv_fee')\n    }\n  \n    const inputsAmount = +fee.inputsAmount\n    const amount = +this.amount\n    const feeSat = +fee.SAT\n    const change = inputsAmount - amount - feeSat\n    let inputs = []\n    \n    for (const utxo of fee.inputs) {\n      let item = {\n        hash: utxo.tx_hash,\n        index: utxo.tx_pos,\n        value: utxo.value,\n        key: getBtcPrivateKeyByIndex(this.nodes[utxo.nodeType], utxo.deriveIndex)\n      }\n    \n      inputs.push(item)\n    }\n  \n    if (change >= 0) {\n      let params = {\n        inputs: inputs,\n        outputs: [\n          {\n            address: addressTo,\n            value: amount\n          }\n        ]\n      }\n    \n      if (change !== 0) {\n        params.outputs[1] = {\n          address: this.internalAddress,\n          value: change\n        }\n      }\n     \n      return makeRawBtcvTx(params)\n    } else {\n      throw new CustomError('err_tx_btcv_balance')\n    }\n  }\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/class/BTCV/BitcoinVaultTx.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 258,
    "kind": "variable",
    "name": "FEE_IDS",
    "memberof": "src/class/BTCV/BitcoinVaultTx.js",
    "static": true,
    "longname": "src/class/BTCV/BitcoinVaultTx.js~FEE_IDS",
    "access": "public",
    "export": false,
    "importPath": "lumi-web-core/src/class/BTCV/BitcoinVaultTx.js",
    "importStyle": null,
    "description": "List of available commission types for Bitcoin Vault transactions",
    "lineNumber": 10,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 259,
    "kind": "class",
    "name": "BitcoinVaultTx",
    "memberof": "src/class/BTCV/BitcoinVaultTx.js",
    "static": true,
    "longname": "src/class/BTCV/BitcoinVaultTx.js~BitcoinVaultTx",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/class/BTCV/BitcoinVaultTx.js",
    "importStyle": "BitcoinVaultTx",
    "description": "Class BitcoinVaultTx.\nThis class is responsible for calculating the fee,\ncalculating the available amount to send, and generating and signing a Bitcoin Vault transaction",
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 260,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/class/BTCV/BitcoinVaultTx.js~BitcoinVaultTx",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/BTCV/BitcoinVaultTx.js~BitcoinVaultTx#constructor",
    "access": "public",
    "description": "Create a BitcoinVaultTx",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Input data for generating a transaction, calculating a fee or available amount"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "data.unspent",
        "description": "Array of unspent addresses"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.amount",
        "description": "Transaction amount"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.balance",
        "description": "Bitcoin Vault wallet balance"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "data.feeList",
        "description": "Set of raw Bitcoin Vault fees"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data.customFee",
        "description": "Custom fee entered by the user"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data.nodes",
        "description": "External and internal Bitcoin Vault nodes"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.internalAddress",
        "description": "Address for change"
      }
    ]
  },
  {
    "__docId__": 261,
    "kind": "member",
    "name": "unspent",
    "memberof": "src/class/BTCV/BitcoinVaultTx.js~BitcoinVaultTx",
    "static": false,
    "longname": "src/class/BTCV/BitcoinVaultTx.js~BitcoinVaultTx#unspent",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 262,
    "kind": "member",
    "name": "amount",
    "memberof": "src/class/BTCV/BitcoinVaultTx.js~BitcoinVaultTx",
    "static": false,
    "longname": "src/class/BTCV/BitcoinVaultTx.js~BitcoinVaultTx#amount",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 263,
    "kind": "member",
    "name": "balance",
    "memberof": "src/class/BTCV/BitcoinVaultTx.js~BitcoinVaultTx",
    "static": false,
    "longname": "src/class/BTCV/BitcoinVaultTx.js~BitcoinVaultTx#balance",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 264,
    "kind": "member",
    "name": "customFee",
    "memberof": "src/class/BTCV/BitcoinVaultTx.js~BitcoinVaultTx",
    "static": false,
    "longname": "src/class/BTCV/BitcoinVaultTx.js~BitcoinVaultTx#customFee",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 265,
    "kind": "member",
    "name": "nodes",
    "memberof": "src/class/BTCV/BitcoinVaultTx.js~BitcoinVaultTx",
    "static": false,
    "longname": "src/class/BTCV/BitcoinVaultTx.js~BitcoinVaultTx#nodes",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 266,
    "kind": "member",
    "name": "internalAddress",
    "memberof": "src/class/BTCV/BitcoinVaultTx.js~BitcoinVaultTx",
    "static": false,
    "longname": "src/class/BTCV/BitcoinVaultTx.js~BitcoinVaultTx#internalAddress",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 267,
    "kind": "member",
    "name": "fee",
    "memberof": "src/class/BTCV/BitcoinVaultTx.js~BitcoinVaultTx",
    "static": false,
    "longname": "src/class/BTCV/BitcoinVaultTx.js~BitcoinVaultTx#fee",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 268,
    "kind": "member",
    "name": "feeList",
    "memberof": "src/class/BTCV/BitcoinVaultTx.js~BitcoinVaultTx",
    "static": false,
    "longname": "src/class/BTCV/BitcoinVaultTx.js~BitcoinVaultTx#feeList",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 269,
    "kind": "member",
    "name": "dust",
    "memberof": "src/class/BTCV/BitcoinVaultTx.js~BitcoinVaultTx",
    "static": false,
    "longname": "src/class/BTCV/BitcoinVaultTx.js~BitcoinVaultTx#dust",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 270,
    "kind": "method",
    "name": "calcFee",
    "memberof": "src/class/BTCV/BitcoinVaultTx.js~BitcoinVaultTx",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BTCV/BitcoinVaultTx.js~BitcoinVaultTx#calcFee",
    "access": "public",
    "description": "Calculating the fee amount",
    "lineNumber": 49,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array>} Returns a set of fees for a specific transaction amount"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "Transaction size"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array>"
      ],
      "spread": false,
      "description": "Returns a set of fees for a specific transaction amount"
    }
  },
  {
    "__docId__": 272,
    "kind": "method",
    "name": "calcEmptyFee",
    "memberof": "src/class/BTCV/BitcoinVaultTx.js~BitcoinVaultTx",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/BTCV/BitcoinVaultTx.js~BitcoinVaultTx#calcEmptyFee",
    "access": "public",
    "description": "Sets an array of zero fees.\nUsed when the user does not have enough funds for the transaction",
    "lineNumber": 85,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} Returns an array with zero fees"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "fees",
        "description": "set of commission types"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Returns an array with zero fees"
    }
  },
  {
    "__docId__": 274,
    "kind": "method",
    "name": "getInputs",
    "memberof": "src/class/BTCV/BitcoinVaultTx.js~BitcoinVaultTx",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BTCV/BitcoinVaultTx.js~BitcoinVaultTx#getInputs",
    "access": "public",
    "description": "Finds a list of inputs for a specific transaction",
    "lineNumber": 109,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} Returns an object with a list of inputs, the total fee amount, and the total amount of all inputs"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "fee",
        "description": "Fee size"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "Transaction size"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "Returns an object with a list of inputs, the total fee amount, and the total amount of all inputs"
    }
  },
  {
    "__docId__": 276,
    "kind": "method",
    "name": "make",
    "memberof": "src/class/BTCV/BitcoinVaultTx.js~BitcoinVaultTx",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BTCV/BitcoinVaultTx.js~BitcoinVaultTx#make",
    "access": "public",
    "description": "Creating a Bitcoin Vault transaction",
    "lineNumber": 160,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} Returns the raw transaction and transaction hash if sent successfully"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Input data for a transaction"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.addressTo",
        "description": "Recipient address"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data.fee",
        "description": "The transaction fee and list of inputs"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "Returns the raw transaction and transaction hash if sent successfully"
    }
  },
  {
    "__docId__": 277,
    "kind": "file",
    "name": "src/class/Core.js",
    "content": "import {validateMnemonic} from 'bip39'\nimport {normalize, checkWords} from 'bip39-checker'\nimport CustomError from '@/helpers/handleErrors'\nimport * as core from '@/helpers/coreHelper'\nimport {getBnbCore} from '@/class/BNB/core'\nimport {getBnbAddressByPublicKey} from '@/class/BNB/address'\n\n/**\n * Class Wallet\n * @class\n */\n\nexport default class Core {\n  /**\n   * Create a core\n   * @param {Object} data\n   * @param {string} data.from - A type new wallet creating: new, mnemonic or xprv\n   * @param {number} data.count - Number of words for the new mnemonic. Is used when parameter from is 'new'\n   * @param {string} data.mnemonic - The mnemonic phrase. It used when parameter from is 'mnemonic'\n   * @param {string} data.key - BIP32 Root Key. It used when parameter from is 'mnemonic'\n   */\n  constructor (data = {}) {\n    const {from, count, mnemonic, key} = data\n    this.from = from\n    this.count = count || 12\n    this.mnemonic = mnemonic\n    this.xprv = key\n    this.seed = null\n    this.hdkey = null\n    this.coins = {}\n  }\n\n  /**\n   * The main method that starts the generation of the core.\n   * The type of generation depends on the parameter 'from'\n   */\n\n  async generateWallet () {\n    switch (this.from) {\n      case 'new':\n        this._generateNewMnemonic()\n        break\n      case 'mnemonic':\n        this._importByMnemonic()\n        break\n      case 'xprv':\n        this._importByKey()\n        break\n      default:\n        this._generateNewMnemonic()\n    }\n  }\n\n  /**\n   * Generating a new mnemonic.\n   * The number of words in a mnemonic depends on the parameter 'count'\n   * @private\n   */\n\n  _generateNewMnemonic () {\n    const entropy = this._getEntropyLength(this.count)\n    this.mnemonic = core.generateMnemonic(entropy)\n    this.seed = core.mnemonicToSeed(this.mnemonic)\n    this.hdkey = core.hdFromSeed(this.seed)\n    this.xprv = core.getXprv(this.hdkey)\n  }\n\n  /**\n   * Importing a wallet by mnemonic\n   * @private\n   */\n\n  _importByMnemonic () {\n    this.mnemonic = normalize(this.mnemonic)\n    if (!this.checkMnemonic(this.mnemonic)) {\n      throw new CustomError('err_core_mnemonic')\n    }\n    this.seed = core.mnemonicToSeed(this.mnemonic)\n    this.hdkey = core.hdFromSeed(this.seed)\n    this.xprv = core.getXprv(this.hdkey)\n  }\n\n  /**\n   * Importing a wallet by key\n   * @private\n   */\n\n  _importByKey () {\n    if (!this.xprv || typeof this.xprv !== 'string') {\n      throw new CustomError('err_core_xprv')\n    }\n    this.hdkey = core.hdFromXprv(this.xprv)\n  }\n\n  /**\n   * Creating a core for each supported currency type\n   *\n   * @param {Array<{coin: String, type: String}>} coins\n   * @param {string} coins[].coin - Short name of coin. Supported coins are BTC, ETH, BCH, BTCV and DOGE\n   * @param {string|number} coins[].type - Coin type (additional).\n   * For BTC supported types are p2pkh and p2wpkh. For ETH type is a account number (by default 0).\n   * */\n\n  async createCoinsCores (coins = []) {\n    let core = {}\n\n    for (let item of coins) {\n      const {coin, type} = item\n      if (!core.hasOwnProperty(coin)) {\n        core[coin] = {}\n      }\n\n      switch (coin) {\n        case 'BTC':\n          core[coin][type] = await this._generateBTCcore(type)\n          break\n        case 'ETH':\n          core[coin][type] = await this._generateETHcore(type)\n          break\n        case 'BCH':\n          core[coin].p2pkh = await this._generateBCHcore()\n          break\n        case 'BTCV':\n          core[coin].p2wpkh = await this._generateBTCVcore()\n          break\n        case 'DOGE':\n          core[coin].p2pkh = await this._generateDOGEcore()\n          break\n        case 'BNB':\n          core[coin].p2pkh = await this._generateBNBcore()\n          break\n      }\n    }\n\n    return core\n  }\n\n  /**\n   * Creating a core for Bitcoin.\n   * At the output, we get a external and internal node,\n   * derivation path and the first addresses of the external and internal cores\n   *\n   * @param {string} type - Bitcoin type. There may be p2pkh or p2wpkh\n   * @private\n   */\n\n  _generateBTCcore (type = 'p2pkh') {\n    const bitcoin_paths = {\n      p2pkh: `m/44'/0'/0'`,\n      p2wpkh: `m/84'/0'/0'`\n    }\n\n    if (!(type in bitcoin_paths)) {\n      throw new CustomError('err_core_btc_type')\n    }\n\n    const bitcoin_external_path = bitcoin_paths[type] + '/0'\n    const bitcoin_internal_path = bitcoin_paths[type] + '/1'\n\n    let item = {}\n    item.externalNode = core.derive(this.hdkey, bitcoin_external_path)\n    item.internalNode = core.derive(this.hdkey, bitcoin_internal_path)\n    item.externalAddress = core.getBtcAddress(item.externalNode, 0, type)\n    item.internalAddress = core.getBtcAddress(item.internalNode, 0, type)\n    item.dp = {\n      external: bitcoin_external_path,\n      internal: bitcoin_internal_path\n    }\n\n    if (!this.coins.hasOwnProperty('BTC')) {\n      this.coins.BTC = {}\n    }\n\n    this.coins.BTC[type] = item\n    return item\n  }\n\n  /**\n   * Creating a core for Ethereum.\n   * At the output, we get a Ethereum node, derivation path,\n   * a private and public key, and the Ethereum address\n   *\n   * @param {number} type - Ethereum account number. By default 0\n   * @private\n   */\n\n  _generateETHcore (type = 0) {\n    if (!Number.isInteger(type)) {\n      throw new CustomError('err_core_eth_account')\n    }\n\n    const ethereum_path = `m/44'/60'/${ type }'/0/0`\n    let item = {}\n\n    item.node = core.derive(this.hdkey, ethereum_path)\n    item.privateKey = core.getEthPrivateKey(item.node)\n    item.privateKeyHex = '0x' + item.privateKey.toString('hex')\n    item.publicKey = core.getEthPublicKey(item.privateKey)\n    item.externalAddress = core.getEthAddress(item.publicKey)\n    item.dp = ethereum_path\n\n    if (!this.coins.hasOwnProperty('ETH')) {\n      this.coins.ETH = {}\n    }\n\n    this.coins.ETH[type] = item\n    return item\n  }\n\n  /**\n   * Creating a core for Bitcoin Cash.\n   * At the output, we get a external and internal node,\n   * derivation path and the first addresses of the external and internal cores\n   * @private\n   */\n\n  _generateBCHcore () {\n    const type = 'p2pkh'\n    const bitcoincash_external_path = `m/44'/145'/0'/0`\n    const bitcoincash_internal_path = `m/44'/145'/0'/1`\n    let item = {}\n    item.externalNode = core.derive(this.hdkey, bitcoincash_external_path)\n    item.internalNode = core.derive(this.hdkey, bitcoincash_internal_path)\n    item.externalAddress = core.getBtcAddress(item.externalNode, 0)\n    item.internalAddress = core.getBtcAddress(item.internalNode, 0)\n    item.dp = {external: bitcoincash_external_path, internal: bitcoincash_internal_path}\n\n    if (!this.coins.hasOwnProperty('BCH')) {\n      this.coins.BCH = {}\n    }\n\n    this.coins.BCH[type] = item\n    return item\n  }\n\n  /**\n   * Creating a core for Bitcoin Vault.\n   * At the output, we get a external and internal node,\n   * derivation path and the first addresses of the external and internal cores\n   * @private\n   */\n\n  async _generateBTCVcore () {\n    const type = 'p2wpkh'\n    const network = 'btcv'\n    const bitcoinvault_external_path = `m/84'/440'/0'/0`\n    const bitcoinvault_internal_path = `m/84'/440'/0'/1`\n\n    let item = {}\n    item.externalNode = core.derive(this.hdkey, bitcoinvault_external_path)\n    item.internalNode = core.derive(this.hdkey, bitcoinvault_internal_path)\n    item.externalAddress = core.getBtcAddress(item.externalNode, 0, 'p2wpkh', network)\n    item.internalAddress = core.getBtcAddress(item.internalNode, 0, 'p2wpkh', network)\n    item.dp = {external: bitcoinvault_external_path, internal: bitcoinvault_internal_path}\n\n    if (!this.coins.hasOwnProperty('BTCV')) {\n      this.coins.BTCV = {}\n    }\n\n    this.coins.BTCV[type] = item\n    return item\n  }\n\n  /**\n   * Creating a core for Dogecoin.\n   * At the output, we get a external and internal node,\n   * derivation path and the first addresses of the external and internal cores\n   * @private\n   */\n  async _generateDOGEcore () {\n    const type = 'p2pkh'\n    const dogecoin_external_path = `m/44'/3'/0'/0`\n    const dogecoin_internal_path = `m/44'/3'/0'/1`\n\n    let item = {}\n    item.externalNode = core.derive(this.hdkey, dogecoin_external_path)\n    item.internalNode = core.derive(this.hdkey, dogecoin_internal_path)\n    item.externalAddress = core.getDogeAddress(item.externalNode, 0)\n    item.internalAddress = core.getDogeAddress(item.internalNode, 0)\n    item.dp = {external: dogecoin_external_path, internal: dogecoin_internal_path}\n\n    if (!this.coins.hasOwnProperty('DOGE')) {\n      this.coins.DOGE = {}\n    }\n\n    this.coins.DOGE[type] = item\n    return item\n  }\n\n  /**\n   * Creating a core for Binance Coin.\n   * At the output, we get a external and internal node,\n   * derivation path and the external address\n   * @private\n   */\n  async _generateBNBcore () {\n    const type = 'p2pkh'\n\n    if (!Object.prototype.hasOwnProperty.call(this.coins, 'BNB')) {\n      this.coins.BNB = {}\n    }\n    this.coins.BNB[type] = getBnbCore(this.hdkey)\n    return this.coins.BNB[type]\n  }\n\n  /**\n   * The method returns information about child nodes by the derivation path and range\n   * @param {Object} data\n   * @param {number} data.from - Top of the derivation range\n   * @param {number} data.to - End of the derivation range\n   * @param {string} data.path - Derivation path\n   * @param {Array} data.coins - Array of coins for generating addresses. Includes the coin param (e.g. BTC) and the type param (e.g. p2pkh or account number) parameters\n   * @returns {{node: {privateExtendedKey: *, publicExtendedKey: *}, list: []}} Returns object with node information\n   * @returns {Object} node - Contains privateExtendedKey and publicExtendedKey\n   * @returns {Array} list - Array of child nodes. Every child node contains the following parameters:\n   * derivation path, publick key, private key in WIF format and addresses if a list of coins was sent\n   */\n\n  getChildNodes (data = {}) {\n    const types = ['p2pkh', 'p2wpkh']\n    let {from, to, path, coins} = data\n\n    from = +from\n    to = +to\n    coins = coins || []\n\n    if (!Number.isInteger(from) || !Number.isInteger(to) || from > to) {\n      throw new CustomError('err_core_derivation_range')\n    }\n\n    try {\n      const node = core.derive(this.hdkey, path)\n\n      let info = {\n        node: {\n          privateExtendedKey: node.privateExtendedKey,\n          publicExtendedKey: node.publicExtendedKey\n        },\n        list: []\n      }\n\n      for (let i = from; i <= to; i++) {\n        const child = {}\n        const deriveChild = node.deriveChild(i)\n        child.path = `${ path }/${ i }`\n        child.privateKey = core.privateKeyToWIF(deriveChild.privateKey)\n        child.publicKey = deriveChild.publicKey.toString('hex')\n        for (let item of coins) {\n          let {coin, type} = item\n\n          switch (coin) {\n            case 'BTC':\n              if (!types.includes(type)) continue\n              child[`${ type }Address`] = core.getBtcAddress(node, i, type, 'btc')\n              break\n            case 'BCH':\n              child.bchAddress = core.getCashAddress(node, i)\n              break\n            case 'BTCV':\n              child.btcvAddress = core.getBtcAddress(node, i, 'p2wpkh', 'btcv')\n              break\n            case 'ETH':\n              child.ethAddress = core.getEthAddressByNode(deriveChild)\n              break\n            case 'DOGE':\n              child.dogeAddress = core.getDogeAddress(node, i)\n              break\n            case 'BNB':\n              child.bnbAddress = getBnbAddressByPublicKey(node._publicKey.toString('hex'))\n              break\n          }\n        }\n        info.list.push(child)\n      }\n\n      return info\n    }\n    catch (e) {\n      throw new CustomError('err_core_derivation')\n    }\n  }\n\n  /**\n   * Checking the mnemonic for validity\n   * @param mnemonic\n   * @returns {boolean}\n   */\n\n  checkMnemonic (mnemonic) {\n    let words = mnemonic.split(' ')\n    let withTypo = []\n\n    words.forEach((word, index) => {\n      if (!checkWords(word, 'english')) {\n        withTypo.push(index)\n      }\n    })\n\n    if (withTypo.length) {\n      throw new CustomError('err_core_mnemonic')\n    }\n\n    return validateMnemonic(mnemonic)\n  }\n\n  /**\n   * Getting the entropy size by the number of words in a mnemonic\n   * @param words\n   * @returns {number} Bits of entropy\n   * @private\n   */\n\n  _getEntropyLength (words) {\n    let bitsOfEntropy = {\n      12: 128,\n      15: 160,\n      18: 192,\n      21: 224,\n      24: 256\n    }\n\n    if (!bitsOfEntropy.hasOwnProperty(+words)) {\n      throw new CustomError('err_core_entropy')\n    }\n\n    return bitsOfEntropy[words]\n  }\n\n  get DATA () {\n    return {\n      mnemonic: this.mnemonic,\n      xprv: this.xprv,\n      from: this.from,\n      hdkey: this.hdkey,\n      seed: this.seed,\n      seedInHex: this.seed ? this.seed.toString('hex') : null\n    }\n  }\n\n  get COINS () {\n    return {\n      ...this.coins\n    }\n  }\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/class/Core.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 278,
    "kind": "class",
    "name": "Core",
    "memberof": "src/class/Core.js",
    "static": true,
    "longname": "src/class/Core.js~Core",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/class/Core.js",
    "importStyle": "Core",
    "description": "Class Wallet",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 279,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/class/Core.js~Core",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/Core.js~Core#constructor",
    "access": "public",
    "description": "Create a core",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.from",
        "description": "A type new wallet creating: new, mnemonic or xprv"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.count",
        "description": "Number of words for the new mnemonic. Is used when parameter from is 'new'"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.mnemonic",
        "description": "The mnemonic phrase. It used when parameter from is 'mnemonic'"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.key",
        "description": "BIP32 Root Key. It used when parameter from is 'mnemonic'"
      }
    ]
  },
  {
    "__docId__": 280,
    "kind": "member",
    "name": "from",
    "memberof": "src/class/Core.js~Core",
    "static": false,
    "longname": "src/class/Core.js~Core#from",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 281,
    "kind": "member",
    "name": "count",
    "memberof": "src/class/Core.js~Core",
    "static": false,
    "longname": "src/class/Core.js~Core#count",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 282,
    "kind": "member",
    "name": "mnemonic",
    "memberof": "src/class/Core.js~Core",
    "static": false,
    "longname": "src/class/Core.js~Core#mnemonic",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 283,
    "kind": "member",
    "name": "xprv",
    "memberof": "src/class/Core.js~Core",
    "static": false,
    "longname": "src/class/Core.js~Core#xprv",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 284,
    "kind": "member",
    "name": "seed",
    "memberof": "src/class/Core.js~Core",
    "static": false,
    "longname": "src/class/Core.js~Core#seed",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 285,
    "kind": "member",
    "name": "hdkey",
    "memberof": "src/class/Core.js~Core",
    "static": false,
    "longname": "src/class/Core.js~Core#hdkey",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 286,
    "kind": "member",
    "name": "coins",
    "memberof": "src/class/Core.js~Core",
    "static": false,
    "longname": "src/class/Core.js~Core#coins",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 287,
    "kind": "method",
    "name": "generateWallet",
    "memberof": "src/class/Core.js~Core",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/Core.js~Core#generateWallet",
    "access": "public",
    "description": "The main method that starts the generation of the core.\nThe type of generation depends on the parameter 'from'",
    "lineNumber": 38,
    "params": [],
    "return": null
  },
  {
    "__docId__": 288,
    "kind": "method",
    "name": "_generateNewMnemonic",
    "memberof": "src/class/Core.js~Core",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/Core.js~Core#_generateNewMnemonic",
    "access": "private",
    "description": "Generating a new mnemonic.\nThe number of words in a mnemonic depends on the parameter 'count'",
    "lineNumber": 60,
    "params": [],
    "return": null
  },
  {
    "__docId__": 293,
    "kind": "method",
    "name": "_importByMnemonic",
    "memberof": "src/class/Core.js~Core",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/Core.js~Core#_importByMnemonic",
    "access": "private",
    "description": "Importing a wallet by mnemonic",
    "lineNumber": 73,
    "params": [],
    "return": null
  },
  {
    "__docId__": 298,
    "kind": "method",
    "name": "_importByKey",
    "memberof": "src/class/Core.js~Core",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/Core.js~Core#_importByKey",
    "access": "private",
    "description": "Importing a wallet by key",
    "lineNumber": 88,
    "params": [],
    "return": null
  },
  {
    "__docId__": 300,
    "kind": "method",
    "name": "createCoinsCores",
    "memberof": "src/class/Core.js~Core",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/Core.js~Core#createCoinsCores",
    "access": "public",
    "description": "Creating a core for each supported currency type",
    "lineNumber": 104,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<{coin: String, type: String}>"
        ],
        "spread": false,
        "optional": false,
        "name": "coins",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "coins[].coin",
        "description": "Short name of coin. Supported coins are BTC, ETH, BCH, BTCV and DOGE"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "coins[].type",
        "description": "Coin type (additional).\nFor BTC supported types are p2pkh and p2wpkh. For ETH type is a account number (by default 0)."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 301,
    "kind": "method",
    "name": "_generateBTCcore",
    "memberof": "src/class/Core.js~Core",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/Core.js~Core#_generateBTCcore",
    "access": "private",
    "description": "Creating a core for Bitcoin.\nAt the output, we get a external and internal node,\nderivation path and the first addresses of the external and internal cores",
    "lineNumber": 147,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Bitcoin type. There may be p2pkh or p2wpkh"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 302,
    "kind": "method",
    "name": "_generateETHcore",
    "memberof": "src/class/Core.js~Core",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/Core.js~Core#_generateETHcore",
    "access": "private",
    "description": "Creating a core for Ethereum.\nAt the output, we get a Ethereum node, derivation path,\na private and public key, and the Ethereum address",
    "lineNumber": 187,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Ethereum account number. By default 0"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 303,
    "kind": "method",
    "name": "_generateBCHcore",
    "memberof": "src/class/Core.js~Core",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/Core.js~Core#_generateBCHcore",
    "access": "private",
    "description": "Creating a core for Bitcoin Cash.\nAt the output, we get a external and internal node,\nderivation path and the first addresses of the external and internal cores",
    "lineNumber": 217,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 304,
    "kind": "method",
    "name": "_generateBTCVcore",
    "memberof": "src/class/Core.js~Core",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/Core.js~Core#_generateBTCVcore",
    "access": "private",
    "description": "Creating a core for Bitcoin Vault.\nAt the output, we get a external and internal node,\nderivation path and the first addresses of the external and internal cores",
    "lineNumber": 243,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 305,
    "kind": "method",
    "name": "_generateDOGEcore",
    "memberof": "src/class/Core.js~Core",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/Core.js~Core#_generateDOGEcore",
    "access": "private",
    "description": "Creating a core for Dogecoin.\nAt the output, we get a external and internal node,\nderivation path and the first addresses of the external and internal cores",
    "lineNumber": 270,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 306,
    "kind": "method",
    "name": "_generateBNBcore",
    "memberof": "src/class/Core.js~Core",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/Core.js~Core#_generateBNBcore",
    "access": "private",
    "description": "Creating a core for Binance Coin.\nAt the output, we get a external and internal node,\nderivation path and the external address",
    "lineNumber": 296,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 307,
    "kind": "method",
    "name": "getChildNodes",
    "memberof": "src/class/Core.js~Core",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/Core.js~Core#getChildNodes",
    "access": "public",
    "description": "The method returns information about child nodes by the derivation path and range",
    "lineNumber": 319,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{node: {privateExtendedKey: *, publicExtendedKey: *}, list: []}} Returns object with node information"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Object} node - Contains privateExtendedKey and publicExtendedKey"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Array} list - Array of child nodes. Every child node contains the following parameters:\nderivation path, publick key, private key in WIF format and addresses if a list of coins was sent"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.from",
        "description": "Top of the derivation range"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.to",
        "description": "End of the derivation range"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.path",
        "description": "Derivation path"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "data.coins",
        "description": "Array of coins for generating addresses. Includes the coin param (e.g. BTC) and the type param (e.g. p2pkh or account number) parameters"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "list - Array of child nodes. Every child node contains the following parameters:\nderivation path, publick key, private key in WIF format and addresses if a list of coins was sent"
    }
  },
  {
    "__docId__": 308,
    "kind": "method",
    "name": "checkMnemonic",
    "memberof": "src/class/Core.js~Core",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/Core.js~Core#checkMnemonic",
    "access": "public",
    "description": "Checking the mnemonic for validity",
    "lineNumber": 389,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "mnemonic",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 309,
    "kind": "method",
    "name": "_getEntropyLength",
    "memberof": "src/class/Core.js~Core",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/Core.js~Core#_getEntropyLength",
    "access": "private",
    "description": "Getting the entropy size by the number of words in a mnemonic",
    "lineNumber": 413,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Bits of entropy"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "words",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Bits of entropy"
    }
  },
  {
    "__docId__": 310,
    "kind": "get",
    "name": "DATA",
    "memberof": "src/class/Core.js~Core",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/Core.js~Core#DATA",
    "access": "public",
    "description": null,
    "lineNumber": 429,
    "undocument": true,
    "type": {
      "types": [
        "{\"mnemonic\": *, \"xprv\": *, \"from\": *, \"hdkey\": *, \"seed\": *, \"seedInHex\": *}"
      ]
    }
  },
  {
    "__docId__": 311,
    "kind": "get",
    "name": "COINS",
    "memberof": "src/class/Core.js~Core",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/Core.js~Core#COINS",
    "access": "public",
    "description": null,
    "lineNumber": 440,
    "undocument": true,
    "type": {
      "types": [
        "{...undefined: Object}"
      ]
    }
  },
  {
    "__docId__": 312,
    "kind": "file",
    "name": "src/class/DOGE/DogecoinSync.js",
    "content": "import Request from '@/helpers/Request'\nimport {getDogeAddress} from '@/helpers/coreHelper'\n\n/**\n * Class DogecoinSync.\n * This class allows you to get information about the balance on a Dogecoin wallet,\n * the list of unspent, a set of addresses that participated in transactions, and a list of transactions\n * @class\n */\n\nexport default class DogecoinSync {\n  /**\n   * Create a DogecoinSync\n   * @param {Object} externalNode - External Dogecoin node\n   * @param {Object} internalNode - Internal Dogecoin node\n   * @param {Object} api - A set of URLs for getting information about Dogecoin addresses\n   * @param {Object} headers - Request headers\n   */\n  constructor (externalNode, internalNode, api, headers) {\n    this.externalNode = externalNode\n    this.internalNode = internalNode\n    this.api = api\n    this.balance = 0\n    this.latestBlock = 0\n    this.unspent = []\n    this.addresses = {\n      external: [],\n      internal: [],\n      empty: {},\n      all: []\n    }\n    this.deriveAddress = {\n      internal: {},\n      external: {}\n    }\n    this.transactions = {\n      all: [],\n      unique: []\n    }\n    this.fee = []\n    this.request = new Request(this.api.doge, headers)\n    this.type = 'p2pkh'\n  }\n\n  /**\n   * The method that starts the synchronization Dogecoin part of wallet\n   * @returns {Promise<boolean>}\n   * @constructor\n   */\n\n  async Start () {\n    this.transactions = {\n      all: [],\n      unique: []\n    }\n    this.unspent = []\n    await Promise.all([\n      await this.getAddresses(),\n      await this.getFeesRequest()\n    ])\n    this.getBalance()\n  }\n\n  /**\n   * Getting internal and external addresses that were involved in transactions\n   * @returns {Promise<boolean>}\n   */\n\n  async getAddresses () {\n    this.addresses.external = await this.getAddressesByNode(this.externalNode, 'external')\n    this.addresses.internal = await this.getAddressesByNode(this.internalNode, 'internal')\n    this.addresses.empty = {\n      external: this.addresses.external[this.addresses.external.length - 1],\n      internal: this.addresses.internal[this.addresses.internal.length - 1]\n    }\n\n    this.addresses.all = [...this.addresses.external, ...this.addresses.internal].map((item) => item.address)\n    await this.processTransactions()\n    await this.getTxInfoForUnspent()\n  }\n\n  /**\n   * Auxiliary method that gets the Dogecoin address by node and index\n   * @param {Object} node - Dogecoin node\n   * @param {string} type - Node type (external or internal)\n   * @param {number} from - The index that the derivation starts from\n   * @param {number} to - Index to which deprivation occurs\n   * @returns {Promise<Array>} Returns array of addresses\n   * @private\n   */\n\n  async _getArrayOfAddresses (node, type, from, to) {\n    let addresses = []\n\n    for (let i = from; i < to; i++) {\n      let address = ''\n\n      if (this.deriveAddress[type].hasOwnProperty(i)) {\n        address = this.deriveAddress[type][i]\n      } else {\n        address = getDogeAddress(node, i)\n        this.deriveAddress[type][i] = address\n      }\n\n      addresses.push(address)\n    }\n\n    return addresses\n  }\n\n  /**\n   * Returns the derivation index for an address\n   * @param {string} address\n   */\n\n  _getDeriveIndexByAddress (address) {\n    let find = this.addresses.external.find(item => item.address === address)\n    let node = 'external'\n\n    if (!find) {\n      find = this.addresses.internal.find(item => item.address === address)\n      node = 'internal'\n    }\n\n    return {\n      index: find ? find.derive_index : null,\n      node\n    }\n  }\n\n  /**\n   * Getting information about addresses and forming an array of addresses.\n   * Makes a request for a bundle of addresses and gets a list of transactions\n   * @param {Object} node - Dogecoin node\n   * @param {string} type - Node type (external or internal)\n   * @returns {Promise<Array>} A list of addresses with transactions\n   */\n\n  async getAddressesByNode (node, type) {\n    const CONTROL_COUNT = 100\n    let list = []\n    let counter = 0\n    let derive_index = 0\n    let empty = {\n      status: false,\n      data: null\n    }\n    let data = {\n      from: 0,\n      to: CONTROL_COUNT\n    }\n\n    const req = async () => {\n      let addresses = await this._getArrayOfAddresses(\n        node,\n        type,\n        data.from,\n        data.to\n      )\n\n      try {\n        let res = await this.getMultiAddressRequest(addresses)\n\n        if (res.hasOwnProperty('utxo')) {\n          this.unspent = [...this.unspent, ...res.utxo]\n        }\n\n        if (res.hasOwnProperty('lastblock')) {\n          this.latestBlock = res.lastblock\n        }\n\n        if (res.hasOwnProperty('transactions') && res.transactions.length) {\n          this.transactions.all = [...this.transactions.all, ...res.transactions]\n\n          for (let i = data.from; i < data.to; i++) {\n            if (counter >= CONTROL_COUNT) break\n            const index = i < CONTROL_COUNT ? i : i - CONTROL_COUNT\n            let address = addresses[index]\n            let find = res.transactions.find((itm) => itm.address === address)\n            let item = {\n              type,\n              derive_index,\n              address\n            }\n\n            if (find) {\n              counter = 0\n              list.push(item)\n            } else {\n              counter++\n              if (!empty.status) {\n                empty.status = true\n                empty.data = item\n              }\n            }\n            derive_index++\n          }\n\n          if (counter < CONTROL_COUNT) {\n            data.from += CONTROL_COUNT\n            data.to += CONTROL_COUNT\n            await req()\n          } else {\n            list.push(empty.data)\n          }\n        } else {\n          if (!empty.status) {\n            let item = {\n              type,\n              derive_index\n            }\n\n            if (type === 'external') {\n              item.address = getDogeAddress(this.externalNode, derive_index)\n            } else {\n              item.address = getDogeAddress(this.internalNode, derive_index)\n            }\n            empty.status = true\n            empty.data = item\n          }\n\n          list.push(empty.data)\n        }\n      } catch (e) {\n        console.log('DOGE getAddressesByNode error', e)\n      }\n    }\n\n    await req()\n\n    return list\n  }\n\n  /**\n   * Processing transaction information: setting the type (incoming or outgoing),\n   * getting balance, hash, time and block id\n   */\n\n  async processTransactions () {\n    const hashes = this.transactions.all.map(item => item.hash)\n    const unique_hashes = [...new Set(hashes)]\n\n    for (let hash of unique_hashes) {\n      const group = this.transactions.all.filter(item => item.hash === hash)\n      const balance_change = group.reduce((a, b) => ({balance_change: a.balance_change + b.balance_change})).balance_change\n\n      let tx = {\n        hash,\n        balance_change,\n        block_id: group[0].block_id,\n        time: group[0].time,\n        action: balance_change > 0 ? 'incoming' : 'outgoing'\n      }\n\n      this.transactions.unique.push(tx)\n    }\n  }\n\n  /**\n   * Gets information necessary to create a Dogecoin transaction\n   */\n\n  async getTxInfoForUnspent () {\n    if (!this.unspent.length) return\n    const unspent = []\n\n    for (let item of this.unspent) {\n      if (!item.address) {\n        console.log('Can\\'t find the unspent address')\n        continue\n      }\n\n      const derivationInfo = this._getDeriveIndexByAddress(item.address)\n\n      if (derivationInfo.index === null) continue\n\n      item.derive_index = derivationInfo.index\n      item.node_type = derivationInfo.node\n      unspent.push(item)\n    }\n\n    this.unspent = unspent\n  }\n\n  /**\n   * Getting a balance of Dogecoin wallet from a list of unspent\n   */\n\n  getBalance () {\n    let balance = 0\n\n    this.unspent.forEach((item) => {\n      if (item && item.hasOwnProperty('value')) {\n        balance += +item.value\n      }\n    })\n\n    this.balance = balance\n  }\n\n  /**\n   * Request for information at multiple addresses\n   * @param {Array} addresses - List of addresses to get data from\n   * @returns {Promise<Object>} Address information, including a list of transactions\n   */\n\n  async getMultiAddressRequest (addresses) {\n    if (!addresses) return false\n\n    const OFFSET_STEP = 100\n    const TXS_COUNT = 100\n    let offset = 0\n    let data = {}\n    let txs = []\n\n    const req = async () => {\n      let params = {\n        method: 'all',\n        active: addresses,\n        offset: offset,\n        limit: TXS_COUNT\n      }\n\n      try {\n        let res = await this.request.send(params)\n\n        if (res.status === 'success') {\n          data = res.data || {}\n\n          if (res.data.hasOwnProperty('transactions')) {\n            txs = [...txs, ...res.data.transactions]\n            if (res.data.transactions.length === TXS_COUNT) {\n              offset += OFFSET_STEP\n              await req()\n            }\n          }\n\n          data.transactions = txs\n        } else {\n          console.log('DOGE getAddressTransactions', res.error)\n        }\n      } catch (err) {\n        console.log('DOGE getAddressTransactions', err)\n        return []\n      }\n    }\n\n    await req()\n\n    return data\n  }\n\n  /**\n   * Request to receive a recommended set of dogecoin fees\n   * @returns {Promise<Array>} Set of dogecoin fees\n   */\n\n  async getFeesRequest () {\n    try {\n      const res = await fetch(this.api.dogeFee, {headers: this.headers})\n      const resJson = await res.json()\n      this.fee = resJson.data\n    } catch (err) {\n      console.log('DOGE getFeesRequest', err)\n    }\n  }\n\n  /**\n   * Full information about the dogecoin wallet\n   * @returns {Object}\n   * @constructor\n   */\n\n  get DATA () {\n    return {\n      addresses: this.addresses,\n      transactions: this.transactions,\n      unspent: this.unspent,\n      balance: this.balance,\n      latestBlock: this.latestBlock,\n      fee: this.fee\n    }\n  }\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/class/DOGE/DogecoinSync.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 313,
    "kind": "class",
    "name": "DogecoinSync",
    "memberof": "src/class/DOGE/DogecoinSync.js",
    "static": true,
    "longname": "src/class/DOGE/DogecoinSync.js~DogecoinSync",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/class/DOGE/DogecoinSync.js",
    "importStyle": "DogecoinSync",
    "description": "Class DogecoinSync.\nThis class allows you to get information about the balance on a Dogecoin wallet,\nthe list of unspent, a set of addresses that participated in transactions, and a list of transactions",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 314,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/class/DOGE/DogecoinSync.js~DogecoinSync",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/DOGE/DogecoinSync.js~DogecoinSync#constructor",
    "access": "public",
    "description": "Create a DogecoinSync",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "externalNode",
        "description": "External Dogecoin node"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "internalNode",
        "description": "Internal Dogecoin node"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "api",
        "description": "A set of URLs for getting information about Dogecoin addresses"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "headers",
        "description": "Request headers"
      }
    ]
  },
  {
    "__docId__": 315,
    "kind": "member",
    "name": "externalNode",
    "memberof": "src/class/DOGE/DogecoinSync.js~DogecoinSync",
    "static": false,
    "longname": "src/class/DOGE/DogecoinSync.js~DogecoinSync#externalNode",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 316,
    "kind": "member",
    "name": "internalNode",
    "memberof": "src/class/DOGE/DogecoinSync.js~DogecoinSync",
    "static": false,
    "longname": "src/class/DOGE/DogecoinSync.js~DogecoinSync#internalNode",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 317,
    "kind": "member",
    "name": "api",
    "memberof": "src/class/DOGE/DogecoinSync.js~DogecoinSync",
    "static": false,
    "longname": "src/class/DOGE/DogecoinSync.js~DogecoinSync#api",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 318,
    "kind": "member",
    "name": "balance",
    "memberof": "src/class/DOGE/DogecoinSync.js~DogecoinSync",
    "static": false,
    "longname": "src/class/DOGE/DogecoinSync.js~DogecoinSync#balance",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 319,
    "kind": "member",
    "name": "latestBlock",
    "memberof": "src/class/DOGE/DogecoinSync.js~DogecoinSync",
    "static": false,
    "longname": "src/class/DOGE/DogecoinSync.js~DogecoinSync#latestBlock",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 320,
    "kind": "member",
    "name": "unspent",
    "memberof": "src/class/DOGE/DogecoinSync.js~DogecoinSync",
    "static": false,
    "longname": "src/class/DOGE/DogecoinSync.js~DogecoinSync#unspent",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 321,
    "kind": "member",
    "name": "addresses",
    "memberof": "src/class/DOGE/DogecoinSync.js~DogecoinSync",
    "static": false,
    "longname": "src/class/DOGE/DogecoinSync.js~DogecoinSync#addresses",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "{\"external\": *, \"internal\": *, \"empty\": *, \"all\": *}"
      ]
    }
  },
  {
    "__docId__": 322,
    "kind": "member",
    "name": "deriveAddress",
    "memberof": "src/class/DOGE/DogecoinSync.js~DogecoinSync",
    "static": false,
    "longname": "src/class/DOGE/DogecoinSync.js~DogecoinSync#deriveAddress",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "{\"internal\": *, \"external\": *}"
      ]
    }
  },
  {
    "__docId__": 323,
    "kind": "member",
    "name": "transactions",
    "memberof": "src/class/DOGE/DogecoinSync.js~DogecoinSync",
    "static": false,
    "longname": "src/class/DOGE/DogecoinSync.js~DogecoinSync#transactions",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "{\"all\": *, \"unique\": *}"
      ]
    }
  },
  {
    "__docId__": 324,
    "kind": "member",
    "name": "fee",
    "memberof": "src/class/DOGE/DogecoinSync.js~DogecoinSync",
    "static": false,
    "longname": "src/class/DOGE/DogecoinSync.js~DogecoinSync#fee",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 325,
    "kind": "member",
    "name": "request",
    "memberof": "src/class/DOGE/DogecoinSync.js~DogecoinSync",
    "static": false,
    "longname": "src/class/DOGE/DogecoinSync.js~DogecoinSync#request",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 326,
    "kind": "member",
    "name": "type",
    "memberof": "src/class/DOGE/DogecoinSync.js~DogecoinSync",
    "static": false,
    "longname": "src/class/DOGE/DogecoinSync.js~DogecoinSync#type",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 327,
    "kind": "method",
    "name": "Start",
    "memberof": "src/class/DOGE/DogecoinSync.js~DogecoinSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/DOGE/DogecoinSync.js~DogecoinSync#Start",
    "access": "public",
    "description": "The method that starts the synchronization Dogecoin part of wallet",
    "lineNumber": 51,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<boolean>}"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<boolean>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 330,
    "kind": "method",
    "name": "getAddresses",
    "memberof": "src/class/DOGE/DogecoinSync.js~DogecoinSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/DOGE/DogecoinSync.js~DogecoinSync#getAddresses",
    "access": "public",
    "description": "Getting internal and external addresses that were involved in transactions",
    "lineNumber": 69,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<boolean>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<boolean>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 331,
    "kind": "method",
    "name": "_getArrayOfAddresses",
    "memberof": "src/class/DOGE/DogecoinSync.js~DogecoinSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/DOGE/DogecoinSync.js~DogecoinSync#_getArrayOfAddresses",
    "access": "private",
    "description": "Auxiliary method that gets the Dogecoin address by node and index",
    "lineNumber": 92,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array>} Returns array of addresses"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "Dogecoin node"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Node type (external or internal)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": "The index that the derivation starts from"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "to",
        "description": "Index to which deprivation occurs"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array>"
      ],
      "spread": false,
      "description": "Returns array of addresses"
    }
  },
  {
    "__docId__": 332,
    "kind": "method",
    "name": "_getDeriveIndexByAddress",
    "memberof": "src/class/DOGE/DogecoinSync.js~DogecoinSync",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/DOGE/DogecoinSync.js~DogecoinSync#_getDeriveIndexByAddress",
    "access": "private",
    "description": "Returns the derivation index for an address",
    "lineNumber": 116,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "address",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "{\"index\": *, \"node\": *}"
      ]
    }
  },
  {
    "__docId__": 333,
    "kind": "method",
    "name": "getAddressesByNode",
    "memberof": "src/class/DOGE/DogecoinSync.js~DogecoinSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/DOGE/DogecoinSync.js~DogecoinSync#getAddressesByNode",
    "access": "public",
    "description": "Getting information about addresses and forming an array of addresses.\nMakes a request for a bundle of addresses and gets a list of transactions",
    "lineNumber": 139,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array>} A list of addresses with transactions"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "Dogecoin node"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Node type (external or internal)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array>"
      ],
      "spread": false,
      "description": "A list of addresses with transactions"
    }
  },
  {
    "__docId__": 336,
    "kind": "method",
    "name": "processTransactions",
    "memberof": "src/class/DOGE/DogecoinSync.js~DogecoinSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/DOGE/DogecoinSync.js~DogecoinSync#processTransactions",
    "access": "public",
    "description": "Processing transaction information: setting the type (incoming or outgoing),\ngetting balance, hash, time and block id",
    "lineNumber": 239,
    "params": [],
    "return": null
  },
  {
    "__docId__": 337,
    "kind": "method",
    "name": "getTxInfoForUnspent",
    "memberof": "src/class/DOGE/DogecoinSync.js~DogecoinSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/DOGE/DogecoinSync.js~DogecoinSync#getTxInfoForUnspent",
    "access": "public",
    "description": "Gets information necessary to create a Dogecoin transaction",
    "lineNumber": 263,
    "params": [],
    "return": null
  },
  {
    "__docId__": 339,
    "kind": "method",
    "name": "getBalance",
    "memberof": "src/class/DOGE/DogecoinSync.js~DogecoinSync",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/DOGE/DogecoinSync.js~DogecoinSync#getBalance",
    "access": "public",
    "description": "Getting a balance of Dogecoin wallet from a list of unspent",
    "lineNumber": 289,
    "params": [],
    "return": null
  },
  {
    "__docId__": 341,
    "kind": "method",
    "name": "getMultiAddressRequest",
    "memberof": "src/class/DOGE/DogecoinSync.js~DogecoinSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/DOGE/DogecoinSync.js~DogecoinSync#getMultiAddressRequest",
    "access": "public",
    "description": "Request for information at multiple addresses",
    "lineNumber": 307,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} Address information, including a list of transactions"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "addresses",
        "description": "List of addresses to get data from"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "Address information, including a list of transactions"
    }
  },
  {
    "__docId__": 342,
    "kind": "method",
    "name": "getFeesRequest",
    "memberof": "src/class/DOGE/DogecoinSync.js~DogecoinSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/DOGE/DogecoinSync.js~DogecoinSync#getFeesRequest",
    "access": "public",
    "description": "Request to receive a recommended set of dogecoin fees",
    "lineNumber": 358,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array>} Set of dogecoin fees"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array>"
      ],
      "spread": false,
      "description": "Set of dogecoin fees"
    },
    "params": []
  },
  {
    "__docId__": 344,
    "kind": "get",
    "name": "DATA",
    "memberof": "src/class/DOGE/DogecoinSync.js~DogecoinSync",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/DOGE/DogecoinSync.js~DogecoinSync#DATA",
    "access": "public",
    "description": "Full information about the dogecoin wallet",
    "lineNumber": 374,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "{\"addresses\": *, \"transactions\": *, \"unspent\": *, \"balance\": *, \"latestBlock\": *, \"fee\": *}"
      ]
    }
  },
  {
    "__docId__": 345,
    "kind": "file",
    "name": "src/class/DOGE/DogecoinTx.js",
    "content": "import converter from '@/helpers/converters'\nimport {calcBtcTxSize, getBtcPrivateKeyByIndex, makeRawDogeTx} from '@/helpers/coreHelper'\nimport CustomError from '@/helpers/handleErrors'\nimport Request from '@/helpers/Request'\n\n/**\n * List of available commission types for Dogecoin transactions\n * @type {Array}\n */\n\nconst FEE_IDS = ['regular', 'custom']\n\n/**\n * Class DogecoinTx.\n * This class is responsible for calculating the fee,\n * calculating the available amount to send, and generating and signing a Dogecoin transaction\n * @class\n */\n\nexport default class DogecoinTx {\n  /**\n   * Create a DogecoinTx\n   * @param {Object} data - Input data for generating a transaction, calculating a fee or available amount\n   * @param {Array} data.unspent - Array of unspent addresses\n   * @param {number} data.amount - Transaction amount\n   * @param {number} data.balance - Dogecoin wallet balance\n   * @param {Array} data.feeList - Set of rawDogecoin fees\n   * @param {Object} data.customFee - Custom fee entered by the user\n   * @param {Object} data.nodes - External and internal Dogecoin nodes\n   * @param {string} data.internalAddress - Address for change\n   */\n  constructor (data) {\n    this.unspent = data.unspent\n    this.amount = data.amount ? converter.btc_to_sat(data.amount) : 0\n    this.balance = data.balance\n    this.customFee = +data.customFee ? +data.customFee : 0\n    this.nodes = data.nodes\n    this.internalAddress = data.internalAddress\n    this.fee = data.feeList\n    this.feeList = []\n    this.request = new Request(data.api, data.headers)\n    this.dust = 1000\n  }\n  \n  /**\n   * Calculating the fee amount\n   * @param {number} size - Transaction size\n   * @returns {Promise<Array>} Returns a set of fees for a specific transaction amount\n   */\n  \n  async calcFee (size = 0) {\n    const fees = [...this.fee.map(item => item.feePerByte), this.customFee]\n    \n    if (this.amount <= 0 || this.balance < this.amount) {\n      return this.calcEmptyFee(fees)\n    }\n    \n    const pArray = fees.map(async fee => {\n      return await this.getInputs(fee, size)\n    })\n    \n    const res = await Promise.all(pArray)\n    \n    this.feeList = res.map((item, i) => {\n      return {\n        id: FEE_IDS[i],\n        SAT: item.fee,\n        DOGE: converter.sat_to_btc(item.fee),\n        fee: fees[i],\n        feeInBTC: converter.sat_to_btc(fees[i]),\n        inputs: item.inputs,\n        inputsAmount: item.inputsAmount,\n        custom: FEE_IDS[i] === 'custom'\n      }\n    })\n    \n    return this.feeList\n  }\n  \n  /**\n   * Sets an array of zero fees.\n   * Used when the user does not have enough funds for the transaction\n   * @param {Array} fees - set of commission types\n   * @returns {Array} Returns an array with zero fees\n   */\n  \n  calcEmptyFee (fees) {\n    this.feeList = fees.map((item, i) => {\n      return {\n        id: FEE_IDS[i],\n        SAT: 0,\n        DOGE: 0,\n        fee: item,\n        feeInBTC: converter.sat_to_btc(item),\n        inputs: [],\n        inputsAmount: 0,\n        custom: FEE_IDS[i] === 'custom'\n      }\n    })\n    \n    return this.feeList\n  }\n  \n  /**\n   * Finds a list of inputs for a specific transaction\n   * @param {number} fee - Fee size\n   * @param {number} size - Transaction size\n   * @returns {Promise<Object>} Returns an object with a list of inputs, the total fee amount, and the total amount of all inputs\n   */\n  \n  async getInputs (fee, size) {\n    let index = 0\n    let inputsAmount = 0\n    let inputs = []\n    let res = {}\n    \n    this.dust = size ? 0 : 1000\n    \n    let req = async () => {\n      let item = this.unspent[index]\n      let defaultSize = calcBtcTxSize(index + 1, 2)\n      let calcFee = size ? size * fee : defaultSize * fee\n      \n      inputsAmount += item.value\n      inputs.push(item)\n      \n      let total = this.amount + calcFee + this.dust\n      \n      if (total > inputsAmount) {\n        index++\n        \n        if (index >= this.unspent.length) {\n          res = {\n            fee: 0,\n            inputs: [],\n            inputsAmount: 0\n          }\n        } else {\n          await req()\n        }\n      } else {\n        res = {\n          fee: calcFee,\n          inputs: inputs,\n          inputsAmount: inputsAmount\n        }\n      }\n    }\n    await req()\n    \n    return res\n  }\n  \n  /**\n   * Creating a Dogecoin transaction\n   * @param {Object} data - Input data for a transaction\n   * @param {string} data.addressTo - Recipient address\n   * @param {Object} data.fee - The transaction fee and list of inputs\n   * @returns {Promise<Object>} Returns the raw transaction and transaction hash if sent successfully\n   */\n  \n  async make (data) {\n    const {addressTo, fee} = data\n    \n    if (!this.amount) {\n      throw new CustomError('err_tx_doge_amount')\n    }\n    \n    if (isNaN(fee.SAT)) {\n      throw new CustomError('err_tx_doge_fee')\n    }\n    \n    const inputsAmount = +fee.inputsAmount\n    const amount = +this.amount\n    const feeSat = +fee.SAT\n    const change = inputsAmount - amount - feeSat\n    let inputs = []\n    let hashes = []\n    \n    if (change < 0) {\n      throw new CustomError('err_tx_doge_balance')\n    }\n    \n    for (let input of fee.inputs) {\n      if (!input.tx) {\n        if (input.transaction_hash) {\n          hashes.push(input.transaction_hash)\n        } else {\n          throw new CustomError('err_tx_btc_unspent')\n        }\n      }\n    }\n    \n    const unique_hashes = [...new Set(hashes)]\n    const rawTxsData = await this.getRawTxHex(unique_hashes)\n    \n    for (const utxo of fee.inputs) {\n      hashes.push(utxo.transaction_hash)\n      \n      let item = {\n        hash: utxo.transaction_hash,\n        index: utxo.index,\n        address: utxo.address,\n        value: utxo.value,\n        key: getBtcPrivateKeyByIndex(this.nodes[utxo.node_type], utxo.derive_index)\n      }\n      let data = rawTxsData.find(item => item.hash === utxo.transaction_hash)\n      if (!utxo.tx) {\n        item.tx = data ? data.rawData : null\n      } else {\n        item.tx = utxo.tx\n      }\n      \n      inputs.push(item)\n    }\n    \n    let params = {\n      inputs: inputs,\n      outputs: [\n        {\n          address: addressTo,\n          value: amount\n        }\n      ]\n    }\n    \n    if (change !== 0) {\n      params.outputs[1] = {\n        address: this.internalAddress,\n        value: change\n      }\n    }\n    \n    return makeRawDogeTx(params)\n  }\n  \n  \n  /**\n   * Raw transaction request\n   * @param {Array} hashes - List of hashes\n   * @returns {Promise<Array>} Array of raw Dogecoin transactions for each hash\n   */\n  \n  async getRawTxHex (hashes) {\n    if (!hashes || !hashes.length) return []\n    \n    const ARRAY_SIZE = 10\n    const ARRAYS_COUNT = Math.ceil(hashes.length / ARRAY_SIZE)\n    let txs = []\n    let arrays = []\n    let counter = 0\n    \n    for (let i = 0; i < ARRAYS_COUNT; i++) {\n      arrays[i] = hashes.slice((i * ARRAY_SIZE), (i * ARRAY_SIZE) + ARRAY_SIZE)\n    }\n    \n    const req = async () => {\n      try {\n        let res = await this.request.send({\n          method: 'rawtx',\n          txs: arrays[counter]\n        })\n        \n        if (res.status === 'success' && res.data.length) {\n          txs = [...txs, ...res.data]\n          counter++\n          \n          if (counter !== ARRAYS_COUNT) {\n            await req()\n          }\n        } else {\n          throw new CustomError('err_tx_doge_raw_tx')\n        }\n      }\n      catch (e) {\n        throw new CustomError('err_tx_doge_raw_tx')\n      }\n    }\n    \n    await req()\n    \n    return txs\n  }\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/class/DOGE/DogecoinTx.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 346,
    "kind": "variable",
    "name": "FEE_IDS",
    "memberof": "src/class/DOGE/DogecoinTx.js",
    "static": true,
    "longname": "src/class/DOGE/DogecoinTx.js~FEE_IDS",
    "access": "public",
    "export": false,
    "importPath": "lumi-web-core/src/class/DOGE/DogecoinTx.js",
    "importStyle": null,
    "description": "List of available commission types for Dogecoin transactions",
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 347,
    "kind": "class",
    "name": "DogecoinTx",
    "memberof": "src/class/DOGE/DogecoinTx.js",
    "static": true,
    "longname": "src/class/DOGE/DogecoinTx.js~DogecoinTx",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/class/DOGE/DogecoinTx.js",
    "importStyle": "DogecoinTx",
    "description": "Class DogecoinTx.\nThis class is responsible for calculating the fee,\ncalculating the available amount to send, and generating and signing a Dogecoin transaction",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 348,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/class/DOGE/DogecoinTx.js~DogecoinTx",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/DOGE/DogecoinTx.js~DogecoinTx#constructor",
    "access": "public",
    "description": "Create a DogecoinTx",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Input data for generating a transaction, calculating a fee or available amount"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "data.unspent",
        "description": "Array of unspent addresses"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.amount",
        "description": "Transaction amount"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.balance",
        "description": "Dogecoin wallet balance"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "data.feeList",
        "description": "Set of rawDogecoin fees"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data.customFee",
        "description": "Custom fee entered by the user"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data.nodes",
        "description": "External and internal Dogecoin nodes"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.internalAddress",
        "description": "Address for change"
      }
    ]
  },
  {
    "__docId__": 349,
    "kind": "member",
    "name": "unspent",
    "memberof": "src/class/DOGE/DogecoinTx.js~DogecoinTx",
    "static": false,
    "longname": "src/class/DOGE/DogecoinTx.js~DogecoinTx#unspent",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 350,
    "kind": "member",
    "name": "amount",
    "memberof": "src/class/DOGE/DogecoinTx.js~DogecoinTx",
    "static": false,
    "longname": "src/class/DOGE/DogecoinTx.js~DogecoinTx#amount",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 351,
    "kind": "member",
    "name": "balance",
    "memberof": "src/class/DOGE/DogecoinTx.js~DogecoinTx",
    "static": false,
    "longname": "src/class/DOGE/DogecoinTx.js~DogecoinTx#balance",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 352,
    "kind": "member",
    "name": "customFee",
    "memberof": "src/class/DOGE/DogecoinTx.js~DogecoinTx",
    "static": false,
    "longname": "src/class/DOGE/DogecoinTx.js~DogecoinTx#customFee",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 353,
    "kind": "member",
    "name": "nodes",
    "memberof": "src/class/DOGE/DogecoinTx.js~DogecoinTx",
    "static": false,
    "longname": "src/class/DOGE/DogecoinTx.js~DogecoinTx#nodes",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 354,
    "kind": "member",
    "name": "internalAddress",
    "memberof": "src/class/DOGE/DogecoinTx.js~DogecoinTx",
    "static": false,
    "longname": "src/class/DOGE/DogecoinTx.js~DogecoinTx#internalAddress",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 355,
    "kind": "member",
    "name": "fee",
    "memberof": "src/class/DOGE/DogecoinTx.js~DogecoinTx",
    "static": false,
    "longname": "src/class/DOGE/DogecoinTx.js~DogecoinTx#fee",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 356,
    "kind": "member",
    "name": "feeList",
    "memberof": "src/class/DOGE/DogecoinTx.js~DogecoinTx",
    "static": false,
    "longname": "src/class/DOGE/DogecoinTx.js~DogecoinTx#feeList",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 357,
    "kind": "member",
    "name": "request",
    "memberof": "src/class/DOGE/DogecoinTx.js~DogecoinTx",
    "static": false,
    "longname": "src/class/DOGE/DogecoinTx.js~DogecoinTx#request",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 358,
    "kind": "member",
    "name": "dust",
    "memberof": "src/class/DOGE/DogecoinTx.js~DogecoinTx",
    "static": false,
    "longname": "src/class/DOGE/DogecoinTx.js~DogecoinTx#dust",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 359,
    "kind": "method",
    "name": "calcFee",
    "memberof": "src/class/DOGE/DogecoinTx.js~DogecoinTx",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/DOGE/DogecoinTx.js~DogecoinTx#calcFee",
    "access": "public",
    "description": "Calculating the fee amount",
    "lineNumber": 51,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array>} Returns a set of fees for a specific transaction amount"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "Transaction size"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array>"
      ],
      "spread": false,
      "description": "Returns a set of fees for a specific transaction amount"
    }
  },
  {
    "__docId__": 361,
    "kind": "method",
    "name": "calcEmptyFee",
    "memberof": "src/class/DOGE/DogecoinTx.js~DogecoinTx",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/DOGE/DogecoinTx.js~DogecoinTx#calcEmptyFee",
    "access": "public",
    "description": "Sets an array of zero fees.\nUsed when the user does not have enough funds for the transaction",
    "lineNumber": 87,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} Returns an array with zero fees"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "fees",
        "description": "set of commission types"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Returns an array with zero fees"
    }
  },
  {
    "__docId__": 363,
    "kind": "method",
    "name": "getInputs",
    "memberof": "src/class/DOGE/DogecoinTx.js~DogecoinTx",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/DOGE/DogecoinTx.js~DogecoinTx#getInputs",
    "access": "public",
    "description": "Finds a list of inputs for a specific transaction",
    "lineNumber": 111,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} Returns an object with a list of inputs, the total fee amount, and the total amount of all inputs"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "fee",
        "description": "Fee size"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "Transaction size"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "Returns an object with a list of inputs, the total fee amount, and the total amount of all inputs"
    }
  },
  {
    "__docId__": 365,
    "kind": "method",
    "name": "make",
    "memberof": "src/class/DOGE/DogecoinTx.js~DogecoinTx",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/DOGE/DogecoinTx.js~DogecoinTx#make",
    "access": "public",
    "description": "Creating a Dogecoin transaction",
    "lineNumber": 162,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} Returns the raw transaction and transaction hash if sent successfully"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Input data for a transaction"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.addressTo",
        "description": "Recipient address"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data.fee",
        "description": "The transaction fee and list of inputs"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "Returns the raw transaction and transaction hash if sent successfully"
    }
  },
  {
    "__docId__": 366,
    "kind": "method",
    "name": "getRawTxHex",
    "memberof": "src/class/DOGE/DogecoinTx.js~DogecoinTx",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/DOGE/DogecoinTx.js~DogecoinTx#getRawTxHex",
    "access": "public",
    "description": "Raw transaction request",
    "lineNumber": 244,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array>} Array of raw Dogecoin transactions for each hash"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "hashes",
        "description": "List of hashes"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array>"
      ],
      "spread": false,
      "description": "Array of raw Dogecoin transactions for each hash"
    }
  },
  {
    "__docId__": 367,
    "kind": "file",
    "name": "src/class/ETH/EthereumSync.js",
    "content": "import Request from '@/helpers/Request'\n\n/**\n * Class EthereumSync\n * This class allows you to get information about the balance on a ethereum wallet,\n * the list of transactions and optimal gas price\n * @class\n */\n\nexport default class EthereumSync {\n  /**\n   * Create a EthereumSync\n   * @param {string} address - Ethereum wallet address\n   * @param {Object} api - A set of URLs for getting information about ethereum address\n   * @param {Object} headers - Request headers\n   */\n  constructor (address, api, headers) {\n    this.address = address\n    this.api = api\n    this.balance = 0\n    this.transactions = []\n    this.gasPrice = 0\n    this.request = new Request(this.api.eth, headers)\n  }\n  \n  /**\n   * The method that starts the synchronization Ethereum part of the wallet\n   * @returns {Promise<number>}\n   * @constructor\n   */\n  \n  async Start () {\n    this.balance = await this.getBalance()\n    this.transactions = await this.getTransactions()\n    this.gasPrice = await this.getGasPrice()\n  }\n  \n  /**\n   * Request to receive a balance of Ethereum wallet\n   * @returns {Promise<number>}\n   */\n  \n  async getBalance () {\n    this.balance = 0\n    \n    let params = {\n      module: 'account',\n      action: 'balance',\n      address: this.address,\n      tag: 'latest'\n    }\n    \n    let res = await this.request.send(params)\n    \n    return res && res.hasOwnProperty('result') && !isNaN(res.result) ? +res.result : 0\n  }\n  \n  /**\n   * Request to receive Ethereum transaction list\n   * @returns {Promise<Array>}\n   */\n  \n  async getTransactions () {\n    this.transactions = []\n    \n    let params = {\n      module: 'account',\n      action: 'txlist',\n      address: this.address,\n      sort: 'asc'\n    }\n    \n    let res = await this.request.send(params)\n    \n    return res && res.hasOwnProperty('result') && Array.isArray(res.result) ? res.result : []\n  }\n  \n  /**\n   * Request to receive a amount of gas price\n   * @returns {Promise<number>}\n   */\n  \n  async getGasPrice () {\n    let params = {\n      module: 'proxy',\n      action: 'eth_gasPrice'\n    }\n    \n    let res = await this.request.send(params)\n    \n    return res && res.hasOwnProperty('result') ? parseInt(res.result, 16) : 0\n  }\n  \n  get DATA () {\n    return {\n      address: this.address,\n      balance: this.balance,\n      transactions: this.transactions,\n      gasPrice: this.gasPrice\n    }\n  }\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/class/ETH/EthereumSync.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 368,
    "kind": "class",
    "name": "EthereumSync",
    "memberof": "src/class/ETH/EthereumSync.js",
    "static": true,
    "longname": "src/class/ETH/EthereumSync.js~EthereumSync",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/class/ETH/EthereumSync.js",
    "importStyle": "EthereumSync",
    "description": "Class EthereumSync\nThis class allows you to get information about the balance on a ethereum wallet,\nthe list of transactions and optimal gas price",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 369,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/class/ETH/EthereumSync.js~EthereumSync",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/ETH/EthereumSync.js~EthereumSync#constructor",
    "access": "public",
    "description": "Create a EthereumSync",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "address",
        "description": "Ethereum wallet address"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "api",
        "description": "A set of URLs for getting information about ethereum address"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "headers",
        "description": "Request headers"
      }
    ]
  },
  {
    "__docId__": 370,
    "kind": "member",
    "name": "address",
    "memberof": "src/class/ETH/EthereumSync.js~EthereumSync",
    "static": false,
    "longname": "src/class/ETH/EthereumSync.js~EthereumSync#address",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 371,
    "kind": "member",
    "name": "api",
    "memberof": "src/class/ETH/EthereumSync.js~EthereumSync",
    "static": false,
    "longname": "src/class/ETH/EthereumSync.js~EthereumSync#api",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 372,
    "kind": "member",
    "name": "balance",
    "memberof": "src/class/ETH/EthereumSync.js~EthereumSync",
    "static": false,
    "longname": "src/class/ETH/EthereumSync.js~EthereumSync#balance",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 373,
    "kind": "member",
    "name": "transactions",
    "memberof": "src/class/ETH/EthereumSync.js~EthereumSync",
    "static": false,
    "longname": "src/class/ETH/EthereumSync.js~EthereumSync#transactions",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 374,
    "kind": "member",
    "name": "gasPrice",
    "memberof": "src/class/ETH/EthereumSync.js~EthereumSync",
    "static": false,
    "longname": "src/class/ETH/EthereumSync.js~EthereumSync#gasPrice",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 375,
    "kind": "member",
    "name": "request",
    "memberof": "src/class/ETH/EthereumSync.js~EthereumSync",
    "static": false,
    "longname": "src/class/ETH/EthereumSync.js~EthereumSync#request",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 376,
    "kind": "method",
    "name": "Start",
    "memberof": "src/class/ETH/EthereumSync.js~EthereumSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/ETH/EthereumSync.js~EthereumSync#Start",
    "access": "public",
    "description": "The method that starts the synchronization Ethereum part of the wallet",
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<number>}"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<number>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 380,
    "kind": "method",
    "name": "getBalance",
    "memberof": "src/class/ETH/EthereumSync.js~EthereumSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/ETH/EthereumSync.js~EthereumSync#getBalance",
    "access": "public",
    "description": "Request to receive a balance of Ethereum wallet",
    "lineNumber": 43,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<number>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<number>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 382,
    "kind": "method",
    "name": "getTransactions",
    "memberof": "src/class/ETH/EthereumSync.js~EthereumSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/ETH/EthereumSync.js~EthereumSync#getTransactions",
    "access": "public",
    "description": "Request to receive Ethereum transaction list",
    "lineNumber": 63,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 384,
    "kind": "method",
    "name": "getGasPrice",
    "memberof": "src/class/ETH/EthereumSync.js~EthereumSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/ETH/EthereumSync.js~EthereumSync#getGasPrice",
    "access": "public",
    "description": "Request to receive a amount of gas price",
    "lineNumber": 83,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<number>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<number>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 385,
    "kind": "get",
    "name": "DATA",
    "memberof": "src/class/ETH/EthereumSync.js~EthereumSync",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/ETH/EthereumSync.js~EthereumSync#DATA",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "type": {
      "types": [
        "{\"address\": *, \"balance\": *, \"transactions\": *, \"gasPrice\": *}"
      ]
    }
  },
  {
    "__docId__": 386,
    "kind": "file",
    "name": "src/class/ETH/EthereumTx.js",
    "content": "import converter from '@/helpers/converters'\nimport toFormatDecimal from '@/helpers/toFormatDecimal'\nimport {makeRawEthTx} from '@/helpers/coreHelper'\nimport CustomError from '@/helpers/handleErrors'\n\n/**\n * Class EthereumTx.\n * This class is responsible for calculating the fee and generating and signing a Ethereum transaction\n * @class\n */\n\nexport default class EthereumTx {\n  /**\n   * Create a EthereumTx\n   * @param {Object} data - Input data for generating a transaction or calculating a fee\n   * @param {string} data.address - Ethereum wallet address\n   * @param {Array} data.privateKey - Ethereum private key in Uint8Array format\n   * @param {number} data.balance - Ethereum wallet balance\n   * @param {number} data.gasPrice - Gas price for transaction\n   */\n  constructor (data) {\n    this.address = data.address\n    this.privateKey = data.privateKey\n    this.balance = data.balance\n    this.gasPrice = data.gasPrice\n    this.defaultGasLimit = 21000\n    this.feeList = []\n  }\n  \n  /**\n   * Calculating the fee amount\n   * @param {number} customGasPrice - Amount of custom gas price\n   * @param {number} customGasLimit - Amount of custom gas limit\n   * @returns {Array} A list with the optimal and custom fee\n   */\n  \n  calcFee (customGasPrice = 0, customGasLimit = 0) {\n    this.feeList = [\n      {\n        id: 'optimal',\n        gasPrice: this.gasPrice,\n        gasLimit: this.defaultGasLimit,\n        fee: toFormatDecimal(\n          converter.wei_to_eth(this.gasPrice * this.defaultGasLimit)\n        )\n      },\n      {\n        custom: true,\n        id: 'custom',\n        gasPrice: customGasPrice,\n        gasLimit: customGasLimit,\n        fee: toFormatDecimal(\n          converter.wei_to_eth(customGasPrice * customGasLimit)\n        )\n      }\n    ]\n    \n    return this.feeList\n  }\n  \n  /**\n   * Creating a transaction\n   * @param {Object} data - Input data for a transaction\n   * @param {string} data.addressTo - Recipient address\n   * @param {number} data.amount - Transaction amount in ETH\n   * @param {Object} data.fee - Object with amount of gas price and gas limit\n   * @param {number} data.nonce - Nonce, transaction count of an account\n   * @returns {Promise<Object>} Return a raw transaction in hex to send and transaction hash\n   */\n  \n  async make (data) {\n    const {addressTo, value, fee, nonce} = data\n    const amountInWei = converter.eth_to_wei(value)\n    const surrender = this.balance - (amountInWei + fee.gasPrice * fee.gasLimit)\n    \n    if (surrender < 0) {\n      throw new CustomError('err_tx_eth_balance')\n    }\n    \n    let params = {\n      to: addressTo,\n      value: amountInWei,\n      nonce,\n      gasPrice: fee.gasPrice,\n      gasLimit: fee.gasLimit,\n      privateKey: this.privateKey\n    }\n    \n    return makeRawEthTx(params)\n  }\n  \n  get DATA () {\n    return {\n      fee: this.feeList\n    }\n  }\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/class/ETH/EthereumTx.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 387,
    "kind": "class",
    "name": "EthereumTx",
    "memberof": "src/class/ETH/EthereumTx.js",
    "static": true,
    "longname": "src/class/ETH/EthereumTx.js~EthereumTx",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/class/ETH/EthereumTx.js",
    "importStyle": "EthereumTx",
    "description": "Class EthereumTx.\nThis class is responsible for calculating the fee and generating and signing a Ethereum transaction",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 388,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/class/ETH/EthereumTx.js~EthereumTx",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/ETH/EthereumTx.js~EthereumTx#constructor",
    "access": "public",
    "description": "Create a EthereumTx",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Input data for generating a transaction or calculating a fee"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.address",
        "description": "Ethereum wallet address"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "data.privateKey",
        "description": "Ethereum private key in Uint8Array format"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.balance",
        "description": "Ethereum wallet balance"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.gasPrice",
        "description": "Gas price for transaction"
      }
    ]
  },
  {
    "__docId__": 389,
    "kind": "member",
    "name": "address",
    "memberof": "src/class/ETH/EthereumTx.js~EthereumTx",
    "static": false,
    "longname": "src/class/ETH/EthereumTx.js~EthereumTx#address",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 390,
    "kind": "member",
    "name": "privateKey",
    "memberof": "src/class/ETH/EthereumTx.js~EthereumTx",
    "static": false,
    "longname": "src/class/ETH/EthereumTx.js~EthereumTx#privateKey",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 391,
    "kind": "member",
    "name": "balance",
    "memberof": "src/class/ETH/EthereumTx.js~EthereumTx",
    "static": false,
    "longname": "src/class/ETH/EthereumTx.js~EthereumTx#balance",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 392,
    "kind": "member",
    "name": "gasPrice",
    "memberof": "src/class/ETH/EthereumTx.js~EthereumTx",
    "static": false,
    "longname": "src/class/ETH/EthereumTx.js~EthereumTx#gasPrice",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 393,
    "kind": "member",
    "name": "defaultGasLimit",
    "memberof": "src/class/ETH/EthereumTx.js~EthereumTx",
    "static": false,
    "longname": "src/class/ETH/EthereumTx.js~EthereumTx#defaultGasLimit",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 394,
    "kind": "member",
    "name": "feeList",
    "memberof": "src/class/ETH/EthereumTx.js~EthereumTx",
    "static": false,
    "longname": "src/class/ETH/EthereumTx.js~EthereumTx#feeList",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 395,
    "kind": "method",
    "name": "calcFee",
    "memberof": "src/class/ETH/EthereumTx.js~EthereumTx",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/ETH/EthereumTx.js~EthereumTx#calcFee",
    "access": "public",
    "description": "Calculating the fee amount",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} A list with the optimal and custom fee"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "customGasPrice",
        "description": "Amount of custom gas price"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "customGasLimit",
        "description": "Amount of custom gas limit"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "A list with the optimal and custom fee"
    }
  },
  {
    "__docId__": 397,
    "kind": "method",
    "name": "make",
    "memberof": "src/class/ETH/EthereumTx.js~EthereumTx",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/ETH/EthereumTx.js~EthereumTx#make",
    "access": "public",
    "description": "Creating a transaction",
    "lineNumber": 71,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} Return a raw transaction in hex to send and transaction hash"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Input data for a transaction"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.addressTo",
        "description": "Recipient address"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.amount",
        "description": "Transaction amount in ETH"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data.fee",
        "description": "Object with amount of gas price and gas limit"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.nonce",
        "description": "Nonce, transaction count of an account"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "Return a raw transaction in hex to send and transaction hash"
    }
  },
  {
    "__docId__": 398,
    "kind": "get",
    "name": "DATA",
    "memberof": "src/class/ETH/EthereumTx.js~EthereumTx",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/ETH/EthereumTx.js~EthereumTx#DATA",
    "access": "public",
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "type": {
      "types": [
        "{\"fee\": *}"
      ]
    }
  },
  {
    "__docId__": 399,
    "kind": "file",
    "name": "src/class/WalletWrapper.js",
    "content": "import Core from '@/class/Core'\nimport BitcoinSync from '@/class/BTC/BitcoinSync'\nimport EthereumSync from '@/class/ETH/EthereumSync'\nimport BitcoinCashSync from '@/class/BCH/BitcoinCashSync'\nimport BitcoinVaultSync from '@/class/BTCV/BitcoinVaultSync'\nimport DogecoinSync from '@/class/DOGE/DogecoinSync'\nimport BinanceSync from '@/class/BNB/sync'\nimport BitcoinTx from '@/class/BTC/BitcoinTx'\nimport EthereumTx from '@/class/ETH/EthereumTx'\nimport BitcoinCashTx from '@/class/BCH/BitcoinCashTx'\nimport BitcoinVaultTx from '@/class/BTCV/BitcoinVaultTx'\nimport DogecoinTx from '@/class/DOGE/DogecoinTx'\nimport BinanceTx from '@/class/BNB/transaction'\n/**\n * Class WalletWrapper\n * @class\n */\n\nexport default class WalletWrapper {\n  /**\n   * Create a wallet wrapper\n   * @param {Object} params\n   * @param {Object} params.data - Input information for creating the core.\n   * Contains a method for the creation and optionally a key or mnemonics\n   * @param {Object} params.api - A set of URLs for getting information about addresses\n   */\n\n  constructor (params) {\n    this.data = params.data\n    this.api = params.api\n    this.core = null\n    this.headers = {}\n    this.sync = {\n      BTC: {},\n      ETH: {},\n      BCH: null,\n      BTCV: null,\n      DOGE: null,\n      BNB: null\n    }\n  }\n\n  /**\n   * Creating a wallet core\n   * @constructor\n   */\n\n  async Create () {\n    try {\n      this.core = new Core(this.data)\n      await this.core.generateWallet()\n    }\n    catch (e) {\n      throw new Error(e.message)\n    }\n  }\n\n  /**\n   * Creating a core for each supported currency type\n   *\n   * @param {Array<{coin: String, type: String}>} coins\n   * @param {string} coins[].coin - Short name of coin. Supported coins are BTC, ETH, BCH, BTCV and DOGE\n   * @param {string|number} coins[].type - Coin type (additional).\n   * For BTC supported types are p2pkh and p2wpkh. For ETH type is a account number (by default 0).\n   * */\n\n  async CreateCoins (coins) {\n    try {\n      return await this.core.createCoinsCores(coins)\n    }\n    catch (e) {\n      throw new Error(e.message)\n    }\n  }\n\n  /**\n   * Getting information about bitcoin or ether addresses\n   * @param {Object} data - Type of synchronization method\n   * @param {string} data.coin - Coin name for synchronization\n   * @param {string} data.type - Coin type. There may be p2pkh or p2wpkh\n   * @returns {Promise<Object>} Returns object with bitcoin or ethereum synchronization information\n   * @constructor\n   */\n\n  async Sync (data) {\n    const {coin, type} = data\n\n    try {\n      switch (coin) {\n        case 'BTC':\n          return await this.SyncBTC(type)\n        case 'ETH':\n          return await this.SyncETH(type)\n        case 'BCH':\n          return await this.SyncBCH()\n        case 'BTCV':\n          return await this.SyncBTCV()\n        case 'DOGE':\n          return await this.SyncDOGE()\n        case 'BNB':\n          return await this.SyncBNB()\n      }\n    }\n    catch (e) {\n      throw new Error(e.message)\n    }\n  }\n\n  /**\n   * Getting information about Bitcoin wallet from blockchain\n   * @param {string} type - Bitcoin type. There may be p2pkh or p2wpkh\n   * @returns {Promise<Object>}\n   * @constructor\n   */\n\n  async SyncBTC (type = 'p2pkh') {\n    if (!this.sync.BTC[type]) {\n      this.sync.BTC[type] = new BitcoinSync(\n        this.core.COINS.BTC[type].externalNode,\n        this.core.COINS.BTC[type].internalNode,\n        this.api,\n        type,\n        this.headers\n      )\n    }\n\n    try {\n      await this.sync.BTC[type].Start()\n      return this.sync.BTC[type].DATA\n    }\n    catch (e) {\n      console.log('SyncBTC error', e)\n    }\n  }\n\n  /**\n   * Getting information about Ethereum wallet from blockchain\n   * @param {number} type - Ethereum account number. By default 0\n   * @returns {Promise<Object>}\n   * @constructor\n   */\n\n  async SyncETH (type = 0) {\n    if (!this.sync.ETH[type]) {\n      this.sync.ETH[type] = new EthereumSync(this.core.COINS.ETH[type].externalAddress, this.api, this.headers)\n    }\n\n    try {\n      await this.sync.ETH[type].Start()\n      return this.sync.ETH[type].DATA\n    }\n    catch (e) {\n      console.log('SyncETH error', e)\n    }\n  }\n\n  /**\n   * Getting information about Bitcoin Cash wallet from blockchain\n   * @returns {Promise<Object>}\n   * @constructor\n   */\n\n  async SyncBCH () {\n    const type = 'p2pkh'\n\n    if (!this.sync.BCH) {\n      this.sync.BCH = new BitcoinCashSync(\n        this.core.COINS.BCH[type].externalNode,\n        this.core.COINS.BCH[type].internalNode,\n        this.api,\n        this.headers\n      )\n    }\n\n    try {\n      await this.sync.BCH.Start()\n      return this.sync.BCH.DATA\n    }\n    catch (e) {\n      console.log('SyncBCH error', e)\n    }\n  }\n\n  /**\n   * Getting information about Dogecoin wallet from blockchain\n   * @returns {Promise<Object>}\n   * @constructor\n   */\n\n  async SyncDOGE () {\n    const type = 'p2pkh'\n\n    if (!this.sync.DOGE) {\n      this.sync.DOGE = new DogecoinSync(\n        this.core.COINS.DOGE[type].externalNode,\n        this.core.COINS.DOGE[type].internalNode,\n        this.api,\n        this.headers\n      )\n    }\n\n    try {\n      await this.sync.DOGE.Start()\n      return this.sync.DOGE.DATA\n    }\n    catch (e) {\n      console.log('SyncDOGE error', e)\n    }\n  }\n\n  /**\n   * Getting information about Bitcoin Vault wallet from blockchain\n   * @returns {Promise<Object>}\n   * @constructor\n   */\n\n  async SyncBTCV () {\n    const type = 'p2wpkh'\n\n    if (!this.sync.BTCV) {\n      let addresses = {\n        external: this.core.COINS.BTCV[type].externalAddress,\n        internal: this.core.COINS.BTCV[type].internalAddress\n      }\n\n      this.sync.BTCV = new BitcoinVaultSync(\n        this.core.COINS.BTCV[type].externalNode,\n        this.core.COINS.BTCV[type].internalNode,\n        addresses,\n        this.api,\n        this.headers\n      )\n    }\n\n    try {\n      await this.sync.BTCV.Start()\n      return this.sync.BTCV.DATA\n    }\n    catch (e) {\n      console.log('SyncBTCV error', e)\n    }\n  }\n\n  /**\n   * Getting information about Binance wallet from blockchain\n   * @returns {Promise<Object>}\n   * @constructor\n   */\n\n  async SyncBNB () {\n    const type = 'p2pkh'\n    if (!this.sync.BNB) {\n      this.sync.BNB = new BinanceSync(this.core.COINS.BNB[type].externalAddress, this.api, this.headers)\n    }\n\n    try {\n      await this.sync.BNB.Start()\n      return this.sync.BNB.DATA\n    }\n    catch (e) {\n      console.log('SyncBNB error', e)\n    }\n  }\n\n  /**\n   * Creating a transaction or getting information about fee\n   * @param {Object} data\n   * @param {string} data.currency - Transaction currency. It can be of the following types: BTC, ETH, BCH or BTCV\n   * @param {string} data.method - Methods 'make' or 'calcFee'\n   * @param {Object} data.tx - Input data for the transaction\n   * @param {string} data.addressType - Bitcoin address type. It can be p2pkh or p2wpkh (only for BTC)\n   * @param {number} data.account - Ethereum account number (only for ETH)\n   * @returns {Promise<Object>}\n   * @constructor\n   */\n\n  async Transaction (data) {\n    const {currency, method, tx, addressType, account} = data\n\n    switch (currency) {\n      case 'BTC':\n        return this.createBTCTx(method, tx, addressType)\n      case 'ETH':\n        return this.createETHTx(method, tx, account)\n      case 'BCH':\n        return this.createBCHTx(method, tx)\n      case 'BTCV':\n        return this.createBTCVTx(method, tx)\n      case 'DOGE':\n        return this.createDOGETx(method, tx)\n      case 'BNB':\n        return this.createBNBTx(method, tx)\n      default:\n        throw new Error('Unknown txs type (currency)')\n    }\n  }\n\n  /**\n   * Creating a bitcoin transaction\n   * @param {string} method - Method 'make' for creating a transaction and method 'calcFee' for calculating fee\n   * @param {Object} txData - Input data for the transaction\n   * @param {string} addressType - Bitcoin type. There may be p2pkh or p2wpkh\n   * @returns {Promise<Object>} Information about the transaction or fee\n   */\n\n  async createBTCTx (method, txData, addressType = 'p2pkh') {\n    let BTCdata = {\n      unspent: this.sync.BTC[addressType].unspent,\n      balance: this.sync.BTC[addressType].balance,\n      feeList: this.sync.BTC[addressType].fee,\n      amount: txData.amount,\n      customFee: txData.customFee,\n      api: this.api.btc,\n      type: addressType,\n      headers: this.headers\n    }\n\n    if (method === 'make') {\n      BTCdata.internalAddress = this.sync.BTC[addressType].addresses.empty.internal.address\n      BTCdata.nodes = {\n        external: this.core.COINS.BTC[addressType].externalNode,\n        internal: this.core.COINS.BTC[addressType].internalNode\n      }\n    }\n\n    let tx = new BitcoinTx(BTCdata)\n\n    switch (method) {\n      case 'make':\n        return tx.make(txData)\n      case 'calcFee':\n        return tx.calcFee(txData.size)\n      default:\n        throw new Error('Unknown btc txs method')\n    }\n  }\n\n  /**\n   * Creating a ethereum transaction\n   * @param {string} method - Method 'make' for creating a transaction and method 'calcFee' for calculating fee\n   * @param {Object} txData - Input data for the transaction\n   * @param {number} account - Ethereum account number. By default 0\n   * @returns {Promise<Object>} Information about the transaction or fee\n   */\n\n  async createETHTx (method, txData, account = 0) {\n    let ETHdata = {\n      address: this.sync.ETH[account].address,\n      gasPrice: this.sync.ETH[account].gasPrice,\n      balance: this.sync.ETH[account].balance,\n      privateKey: this.core.COINS.ETH[account].privateKey\n    }\n\n    let tx = new EthereumTx(ETHdata)\n\n    switch (method) {\n      case 'make':\n        return tx.make(txData)\n      case 'calcFee':\n        return tx.calcFee()\n      default:\n        throw new Error('Unknown eth txs method')\n    }\n  }\n\n  // todo\n  async createBCHTx (method, txData) {\n    const type = 'p2pkh'\n\n    let BCHdata = {\n      unspent: this.sync.BCH.unspent,\n      balance: this.sync.BCH.balance,\n      feeList: this.sync.BCH.fee,\n      amount: txData.amount,\n      customFee: txData.customFee\n    }\n\n    if (method === 'make') {\n      BCHdata.internalAddress = this.sync.BCH.addresses.empty.internal.address\n      BCHdata.nodes = {\n        external: this.core.COINS.BCH[type].externalNode,\n        internal: this.core.COINS.BCH[type].internalNode\n      }\n    }\n\n    let tx = new BitcoinCashTx(BCHdata)\n\n    switch (method) {\n      case 'make':\n        return tx.make(txData)\n      case 'calcFee':\n        return tx.calcFee(txData.size)\n      default:\n        throw new Error('Unknown BCH txs method')\n    }\n  }\n\n  // todo\n  async createDOGETx (method, txData) {\n    const type = 'p2pkh'\n\n    let DOGEdata = {\n      unspent: this.sync.DOGE.unspent,\n      balance: this.sync.DOGE.balance,\n      feeList: this.sync.DOGE.fee,\n      amount: txData.amount,\n      customFee: txData.customFee,\n      api: this.api.doge,\n      headers: this.headers\n    }\n\n    if (method === 'make') {\n      DOGEdata.internalAddress = this.sync.DOGE.addresses.empty.internal.address\n      DOGEdata.nodes = {\n        external: this.core.COINS.DOGE[type].externalNode,\n        internal: this.core.COINS.DOGE[type].internalNode\n      }\n    }\n\n    let tx = new DogecoinTx(DOGEdata)\n\n    switch (method) {\n      case 'make':\n        return tx.make(txData)\n      case 'calcFee':\n        return tx.calcFee(txData.size)\n      default:\n        throw new Error('Unknown DOGE txs method')\n    }\n  }\n\n  //todo\n  async createBTCVTx (method, txData) {\n    const type = 'p2wpkh'\n\n    let BTCVdata = {\n      unspent: this.sync.BTCV.unspent,\n      balance: this.sync.BTCV.balance,\n      feeList: this.sync.BTCV.fee,\n      amount: txData.amount,\n      customFee: txData.customFee\n    }\n\n    if (method === 'make') {\n      BTCVdata.internalAddress = this.sync.BTCV.addresses.empty.internal.address\n      BTCVdata.nodes = {\n        external: this.core.COINS.BTCV[type].externalNode,\n        internal: this.core.COINS.BTCV[type].internalNode\n      }\n    }\n\n    let tx = new BitcoinVaultTx(BTCVdata)\n\n    switch (method) {\n      case 'make':\n        return tx.make(txData)\n      case 'calcFee':\n        return tx.calcFee(txData.size)\n      default:\n        throw new Error('Unknown BTCV txs method')\n    }\n  }\n\n  async createBNBTx (method, txData) {\n    const type = 'p2pkh'\n\n    let data = {\n      address: this.core.COINS.BNB[type].externalAddress,\n      account_number: this.sync.BNB.account_number,\n      sequence: this.sync.BNB.sequence,\n      source: this.sync.BNB.source,\n      balance: this.sync.BNB.balance,\n      fee: this.sync.BNB.fee,\n      privateKey: this.core.COINS.BNB[type].privateKeyHex,\n      publicKey: this.core.COINS.BNB[type].publicKeyHex\n    }\n\n    let tx = new BinanceTx(data)\n\n    switch (method) {\n      case 'make':\n        let rawTx = tx.make({\n          addressTo: txData.addressTo,\n          amount: txData.amount,\n          fee: txData.fee,\n          memo: txData.memo\n        }).serialize()\n\n        const hash = tx.getHash()\n\n        return {\n          tx: rawTx,\n          hash\n        }\n      case 'calcFee':\n        return tx.calcFee()\n      default:\n        throw new Error('Unknown BNB txs method')\n    }\n  }\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/class/WalletWrapper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 400,
    "kind": "class",
    "name": "WalletWrapper",
    "memberof": "src/class/WalletWrapper.js",
    "static": true,
    "longname": "src/class/WalletWrapper.js~WalletWrapper",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/class/WalletWrapper.js",
    "importStyle": "WalletWrapper",
    "description": "Class WalletWrapper",
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 401,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/class/WalletWrapper.js~WalletWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/WalletWrapper.js~WalletWrapper#constructor",
    "access": "public",
    "description": "Create a wallet wrapper",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params.data",
        "description": "Input information for creating the core.\nContains a method for the creation and optionally a key or mnemonics"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params.api",
        "description": "A set of URLs for getting information about addresses"
      }
    ]
  },
  {
    "__docId__": 402,
    "kind": "member",
    "name": "data",
    "memberof": "src/class/WalletWrapper.js~WalletWrapper",
    "static": false,
    "longname": "src/class/WalletWrapper.js~WalletWrapper#data",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 403,
    "kind": "member",
    "name": "api",
    "memberof": "src/class/WalletWrapper.js~WalletWrapper",
    "static": false,
    "longname": "src/class/WalletWrapper.js~WalletWrapper#api",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 404,
    "kind": "member",
    "name": "core",
    "memberof": "src/class/WalletWrapper.js~WalletWrapper",
    "static": false,
    "longname": "src/class/WalletWrapper.js~WalletWrapper#core",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 405,
    "kind": "member",
    "name": "headers",
    "memberof": "src/class/WalletWrapper.js~WalletWrapper",
    "static": false,
    "longname": "src/class/WalletWrapper.js~WalletWrapper#headers",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 406,
    "kind": "member",
    "name": "sync",
    "memberof": "src/class/WalletWrapper.js~WalletWrapper",
    "static": false,
    "longname": "src/class/WalletWrapper.js~WalletWrapper#sync",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "{\"BTC\": *, \"ETH\": *, \"BCH\": *, \"BTCV\": *, \"DOGE\": *, \"BNB\": *}"
      ]
    }
  },
  {
    "__docId__": 407,
    "kind": "method",
    "name": "Create",
    "memberof": "src/class/WalletWrapper.js~WalletWrapper",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/WalletWrapper.js~WalletWrapper#Create",
    "access": "public",
    "description": "Creating a wallet core",
    "lineNumber": 48,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 409,
    "kind": "method",
    "name": "CreateCoins",
    "memberof": "src/class/WalletWrapper.js~WalletWrapper",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/WalletWrapper.js~WalletWrapper#CreateCoins",
    "access": "public",
    "description": "Creating a core for each supported currency type",
    "lineNumber": 67,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<{coin: String, type: String}>"
        ],
        "spread": false,
        "optional": false,
        "name": "coins",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "coins[].coin",
        "description": "Short name of coin. Supported coins are BTC, ETH, BCH, BTCV and DOGE"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "coins[].type",
        "description": "Coin type (additional).\nFor BTC supported types are p2pkh and p2wpkh. For ETH type is a account number (by default 0)."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 410,
    "kind": "method",
    "name": "Sync",
    "memberof": "src/class/WalletWrapper.js~WalletWrapper",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/WalletWrapper.js~WalletWrapper#Sync",
    "access": "public",
    "description": "Getting information about bitcoin or ether addresses",
    "lineNumber": 85,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} Returns object with bitcoin or ethereum synchronization information"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Type of synchronization method"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.coin",
        "description": "Coin name for synchronization"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.type",
        "description": "Coin type. There may be p2pkh or p2wpkh"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "Returns object with bitcoin or ethereum synchronization information"
    }
  },
  {
    "__docId__": 411,
    "kind": "method",
    "name": "SyncBTC",
    "memberof": "src/class/WalletWrapper.js~WalletWrapper",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/WalletWrapper.js~WalletWrapper#SyncBTC",
    "access": "public",
    "description": "Getting information about Bitcoin wallet from blockchain",
    "lineNumber": 116,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>}"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Bitcoin type. There may be p2pkh or p2wpkh"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 412,
    "kind": "method",
    "name": "SyncETH",
    "memberof": "src/class/WalletWrapper.js~WalletWrapper",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/WalletWrapper.js~WalletWrapper#SyncETH",
    "access": "public",
    "description": "Getting information about Ethereum wallet from blockchain",
    "lineNumber": 143,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>}"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Ethereum account number. By default 0"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 413,
    "kind": "method",
    "name": "SyncBCH",
    "memberof": "src/class/WalletWrapper.js~WalletWrapper",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/WalletWrapper.js~WalletWrapper#SyncBCH",
    "access": "public",
    "description": "Getting information about Bitcoin Cash wallet from blockchain",
    "lineNumber": 163,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>}"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 414,
    "kind": "method",
    "name": "SyncDOGE",
    "memberof": "src/class/WalletWrapper.js~WalletWrapper",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/WalletWrapper.js~WalletWrapper#SyncDOGE",
    "access": "public",
    "description": "Getting information about Dogecoin wallet from blockchain",
    "lineNumber": 190,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>}"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 415,
    "kind": "method",
    "name": "SyncBTCV",
    "memberof": "src/class/WalletWrapper.js~WalletWrapper",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/WalletWrapper.js~WalletWrapper#SyncBTCV",
    "access": "public",
    "description": "Getting information about Bitcoin Vault wallet from blockchain",
    "lineNumber": 217,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>}"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 416,
    "kind": "method",
    "name": "SyncBNB",
    "memberof": "src/class/WalletWrapper.js~WalletWrapper",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/WalletWrapper.js~WalletWrapper#SyncBNB",
    "access": "public",
    "description": "Getting information about Binance wallet from blockchain",
    "lineNumber": 250,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>}"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 417,
    "kind": "method",
    "name": "Transaction",
    "memberof": "src/class/WalletWrapper.js~WalletWrapper",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/WalletWrapper.js~WalletWrapper#Transaction",
    "access": "public",
    "description": "Creating a transaction or getting information about fee",
    "lineNumber": 277,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>}"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.currency",
        "description": "Transaction currency. It can be of the following types: BTC, ETH, BCH or BTCV"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.method",
        "description": "Methods 'make' or 'calcFee'"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data.tx",
        "description": "Input data for the transaction"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.addressType",
        "description": "Bitcoin address type. It can be p2pkh or p2wpkh (only for BTC)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.account",
        "description": "Ethereum account number (only for ETH)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 418,
    "kind": "method",
    "name": "createBTCTx",
    "memberof": "src/class/WalletWrapper.js~WalletWrapper",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/WalletWrapper.js~WalletWrapper#createBTCTx",
    "access": "public",
    "description": "Creating a bitcoin transaction",
    "lineNumber": 306,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} Information about the transaction or fee"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "Method 'make' for creating a transaction and method 'calcFee' for calculating fee"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "txData",
        "description": "Input data for the transaction"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "addressType",
        "description": "Bitcoin type. There may be p2pkh or p2wpkh"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "Information about the transaction or fee"
    }
  },
  {
    "__docId__": 419,
    "kind": "method",
    "name": "createETHTx",
    "memberof": "src/class/WalletWrapper.js~WalletWrapper",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/WalletWrapper.js~WalletWrapper#createETHTx",
    "access": "public",
    "description": "Creating a ethereum transaction",
    "lineNumber": 346,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} Information about the transaction or fee"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "Method 'make' for creating a transaction and method 'calcFee' for calculating fee"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "txData",
        "description": "Input data for the transaction"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "account",
        "description": "Ethereum account number. By default 0"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "Information about the transaction or fee"
    }
  },
  {
    "__docId__": 420,
    "kind": "method",
    "name": "createBCHTx",
    "memberof": "src/class/WalletWrapper.js~WalletWrapper",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/WalletWrapper.js~WalletWrapper#createBCHTx",
    "access": "public",
    "description": null,
    "lineNumber": 367,
    "undocument": true,
    "params": [
      {
        "name": "method",
        "types": [
          "*"
        ]
      },
      {
        "name": "txData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 421,
    "kind": "method",
    "name": "createDOGETx",
    "memberof": "src/class/WalletWrapper.js~WalletWrapper",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/WalletWrapper.js~WalletWrapper#createDOGETx",
    "access": "public",
    "description": null,
    "lineNumber": 399,
    "undocument": true,
    "params": [
      {
        "name": "method",
        "types": [
          "*"
        ]
      },
      {
        "name": "txData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 422,
    "kind": "method",
    "name": "createBTCVTx",
    "memberof": "src/class/WalletWrapper.js~WalletWrapper",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/WalletWrapper.js~WalletWrapper#createBTCVTx",
    "access": "public",
    "description": null,
    "lineNumber": 433,
    "undocument": true,
    "params": [
      {
        "name": "method",
        "types": [
          "*"
        ]
      },
      {
        "name": "txData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 423,
    "kind": "method",
    "name": "createBNBTx",
    "memberof": "src/class/WalletWrapper.js~WalletWrapper",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/WalletWrapper.js~WalletWrapper#createBNBTx",
    "access": "public",
    "description": null,
    "lineNumber": 464,
    "undocument": true,
    "params": [
      {
        "name": "method",
        "types": [
          "*"
        ]
      },
      {
        "name": "txData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 424,
    "kind": "file",
    "name": "src/helpers/Request.js",
    "content": "import handleErrors from './requestHandleErrors'\n\n/**\n * Class Request.\n * Wrapper for making requests\n * @class\n */\n\nexport default class Request {\n  /**\n   * Create a Request\n   * @param {string} url - Base url\n   * @param {Object} headers - Request headers\n   * @param {Object} basicData - A set of basic data that will participate in all requests in the 'body' object\n   */\n  constructor (url, headers = {}, basicData = {}) {\n    this.url = url\n    this.basicData = basicData\n    this.headers = new Headers({\n      'Content-Type': 'application/json',\n      'Cache-Control': 'no-cache',\n      ...headers\n    })\n  }\n  \n  /**\n   * Method for sending the request\n   * @param {Object} params - Request parameter\n   * @param {string} method - Request method\n   * @param {string} type - Type of request. Default 'POST'\n   * @returns {Promise<Object>}\n   */\n  \n  send (params = {}, method, type = 'POST') {\n    let fullUrl = this.url\n    let body = null\n    \n    if (method) {\n      fullUrl += `/${ method }`\n    }\n    \n    if (type === 'POST') {\n      body = JSON.stringify({...params, ...this.basicData})\n    } else {\n      fullUrl += '?' + this.serialize(params)\n    }\n    \n    let initParams = {\n      method: type,\n      headers: this.headers,\n      body: body\n    }\n    \n    return new Promise((resolve, reject) => {\n      fetch(fullUrl, initParams)\n        .then(handleErrors)\n        .then((res) => {\n          resolve(res)\n        })\n        .catch((err) => {\n          console.log('Request Class Error', err)\n          reject(err)\n        })\n    })\n  }\n  \n  /**\n   * Serialize parameters for GET requests\n   * @param {Object} obj - Parameters to serialize\n   * @returns {string}\n   */\n  \n  serialize (obj) {\n    if (!obj || typeof obj !== 'object') return ''\n    \n    return Object.keys(obj)\n      .reduce(function (a, k) {\n        a.push(k + '=' + encodeURIComponent(obj[k]))\n        return a\n      }, [])\n      .join('&')\n  }\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/helpers/Request.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 425,
    "kind": "class",
    "name": "Request",
    "memberof": "src/helpers/Request.js",
    "static": true,
    "longname": "src/helpers/Request.js~Request",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/Request.js",
    "importStyle": "Request",
    "description": "Class Request.\nWrapper for making requests",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 426,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/helpers/Request.js~Request",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/Request.js~Request#constructor",
    "access": "public",
    "description": "Create a Request",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "Base url"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "headers",
        "description": "Request headers"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "basicData",
        "description": "A set of basic data that will participate in all requests in the 'body' object"
      }
    ]
  },
  {
    "__docId__": 427,
    "kind": "member",
    "name": "url",
    "memberof": "src/helpers/Request.js~Request",
    "static": false,
    "longname": "src/helpers/Request.js~Request#url",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 428,
    "kind": "member",
    "name": "basicData",
    "memberof": "src/helpers/Request.js~Request",
    "static": false,
    "longname": "src/helpers/Request.js~Request#basicData",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 429,
    "kind": "member",
    "name": "headers",
    "memberof": "src/helpers/Request.js~Request",
    "static": false,
    "longname": "src/helpers/Request.js~Request#headers",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 430,
    "kind": "method",
    "name": "send",
    "memberof": "src/helpers/Request.js~Request",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/Request.js~Request#send",
    "access": "public",
    "description": "Method for sending the request",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Request parameter"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "Request method"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Type of request. Default 'POST'"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 431,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/helpers/Request.js~Request",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/Request.js~Request#serialize",
    "access": "public",
    "description": "Serialize parameters for GET requests",
    "lineNumber": 73,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "Parameters to serialize"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 432,
    "kind": "file",
    "name": "src/helpers/converters.js",
    "content": "/**\n * Bitcoin and Ethereum converter\n */\n\nexport default {\n  /**\n   * Convert Satoshi to Bitcoin\n   * @param {number} sat\n   * @returns {number} btc\n   */\n  sat_to_btc (sat) {\n    if (!+sat) return 0\n    return parseFloat((+sat / Math.pow(10, 8)).toFixed(8))\n  },\n  /**\n   * Convert Bitcoin to Satoshi\n   * @param {number} btc\n   * @returns {number} sat\n   */\n  btc_to_sat (btc) {\n    if (!+btc) return 0\n    return Math.round(+btc * Math.pow(10, 8))\n  },\n  /**\n   * Convert WEI to Ethereum\n   * @param {number} wei\n   * @returns {number} eth\n   */\n  wei_to_eth (wei) {\n    if (!+wei) return 0\n    return parseFloat(+wei / Math.pow(10, 18).toFixed(8))\n  },\n  /**\n   * Convert Ethereum to WEI\n   * @param {number} eth\n   * @returns {number} wei\n   */\n  eth_to_wei (eth) {\n    if (!+eth) return 0\n    return Math.round(+eth * Math.pow(10, 18))\n  }\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/helpers/converters.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 433,
    "kind": "file",
    "name": "src/helpers/coreHelper.js",
    "content": "import * as bip39 from 'bip39'\nimport * as bitcoin from 'bitcoinjs-lib'\nimport * as coininfo from 'coininfo'\nimport {Transaction} from 'ethereumjs-tx'\nimport * as ethUtil from 'ethereumjs-util'\nimport * as HDkey from 'hdkey'\nimport * as utils from 'web3-utils'\nimport wif from 'wif'\nimport * as bchaddr from 'bchaddrjs'\nimport * as bitcore from 'bitcore-lib-cash'\nimport CustomError from '@/helpers/handleErrors'\nimport {networks} from '@/helpers/networks'\n\n/**\n * Generation of mnemonics.\n * The number of words in a mnemonic depends on the length of the entropy\n * @param {number} entropyLength - The number of bits in the entropy. It can be equal to 128, 160, 192, 224 or 256 bits\n * @returns {string} - A mnemonic whose words are separated by spaces\n */\nexport function generateMnemonic (entropyLength = 128) {\n  try {\n    return bip39.generateMnemonic(entropyLength)\n  }\n  catch (e) {\n    console.log(e)\n    throw new CustomError('err_core_entropy')\n  }\n}\n\n/**\n * Converting a mnemonic to seed\n * @param {string} mnemonic - Mnemonic phrase\n * @returns {Buffer} - Seed in Uint8Array format\n */\nexport function mnemonicToSeed (mnemonic) {\n  try {\n    return bip39.mnemonicToSeedSync(mnemonic)\n  }\n  catch (e) {\n    console.log(e)\n    throw new CustomError('err_core_mnemonic')\n  }\n}\n\n/**\n * Converting a mnemonic to entropy\n * @param {string} mnemonic - Mnemonic phrase\n * @returns {string} HEX strings entropy\n */\nexport function mnemonicToEntropy (mnemonic) {\n  try {\n    return bip39.mnemonicToEntropy(mnemonic)\n  }\n  catch (e) {\n    console.log(e)\n    throw new CustomError('err_core_mnemonic')\n  }\n}\n\n/**\n * Converting a seed to hdkey (Hierarchical Deterministic Key)\n * @param {Buffer} seed - Mnemonic seed in Buffer\n * @returns {Object} hdkey object with private and public key\n */\nexport function hdFromSeed (seed) {\n  try {\n    return HDkey.fromMasterSeed(seed)\n  }\n  catch (e) {\n    console.log(e)\n    throw new CustomError('err_core_seed')\n  }\n}\n\n\n/**\n * Converting a xprv to hdkey (Hierarchical Deterministic Key)\n * @param {string} xprv - Extended private key\n * @returns {Object} hdkey object with private and public key\n */\nexport function hdFromXprv (xprv) {\n  try {\n    return HDkey.fromExtendedKey(xprv)\n  }\n  catch (e) {\n    console.log(e)\n    throw new CustomError('err_core_xprv')\n  }\n}\n\n/**\n * Getting xprv by hdkey\n * @param {Object} hd - HDkey node\n * @returns {string} Extended private key\n */\nexport function getXprv (hd) {\n  try {\n    return hd.privateExtendedKey\n  }\n  catch (e) {\n    console.log(e)\n    throw new CustomError('err_core_hdkey')\n  }\n}\n\n/**\n * Derivation of node. Getting child node by path\n * @param {Object} hd - HDkey node\n * @param {string} path - Derivation path\n * @returns {Object} - Child node\n */\n\nexport function derive (hd, path) {\n  if (!hd) {\n    throw new CustomError('err_core_derivation_hdkey')\n  }\n  \n  if (!path) {\n    throw new CustomError('err_core_derivation_path')\n  }\n  let regex = new RegExp(/(^m\\/\\d+\\')([\\/{1}\\d+\\'{1}]+)/mg)\n  \n  if (!regex.test(path)) {\n    throw new CustomError('err_core_derivation_path')\n  }\n  \n  try {\n    return hd.derive(path)\n  }\n  catch (e) {\n    console.log(e)\n    throw new CustomError('err_core_derivation')\n  }\n}\n\n/**\n * Getting a bitcoin address by node and child index\n * @param {Object} node - HDkey node\n * @param {number} childIndex - Index of the child node\n * @param {string} type - Bitcoin type. There may be p2pkh or p2wpkh\n * @param {string} network - Custom network for different coins\n * @returns {string} Bitcoin address\n */\n\nexport function getBtcAddress (node, childIndex = 0, type = 'p2pkh', network = 'btc') {\n  const types = ['p2pkh', 'p2wpkh']\n  \n  if (!types.includes(type)) {\n    throw new CustomError('err_core_btc_type')\n  }\n  \n  try {\n    let pubKey = node.deriveChild(childIndex).publicKey\n    \n    return bitcoin.payments[type]({\n      pubkey: pubKey,\n      network: networks[network] || network.btc\n    }).address\n  }\n  catch (e) {\n    console.log(e)\n    throw new CustomError('err_core_btc_address')\n  }\n}\n\n/**\n * Getting an address by public key\n * @param {string} key - Coin public key\n * @param {string} type - Bitcoin type. There may be p2pkh or p2wpkh\n * @param {string} network - Custom network for different coins\n * @returns {string} Bitcoin address\n */\n\nexport function getBtcAddressByPublicKey (key, type = 'p2pkh', network = 'btc') {\n  if (!key) return ''\n  \n  try {\n    return bitcoin.payments[type]({\n      pubkey: new Buffer(key, 'hex'),\n      network: networks[network]\n    }).address\n  }\n  catch (e) {\n    console.log(e)\n    throw new CustomError('err_core_btc_address')\n  }\n  \n}\n\n/**\n * Getting a Ethereum private key by node\n * @param {Object} node - Ethereum node\n * @returns {Buffer} Ethereum private key in Uint8Array format\n */\n\nexport function getEthPrivateKey (node) {\n  try {\n    return node._privateKey\n  }\n  catch (e) {\n    console.log(e)\n    throw new CustomError('err_core_eth_node')\n  }\n}\n\n/**\n * Getting a Ethereum public key by private key\n * @param {Buffer} privateKey - Ethereum private key\n * @returns {Buffer} Ethereum public key in Uint8Array format\n */\n\nexport function getEthPublicKey (privateKey) {\n  try {\n    return ethUtil.privateToPublic(privateKey)\n  }\n  catch (e) {\n    console.log(e)\n    throw new CustomError('err_core_eth_private_key')\n  }\n}\n\n/**\n * Getting a Ethereum wallet address by public key\n * @param {Buffer} publicKey - Ethereum public key\n * @returns {string} Ethereum wallet address\n */\n\nexport function getEthAddress (publicKey) {\n  try {\n    let addrBuffer = ethUtil\n      .publicToAddress(publicKey)\n      .toString('hex')\n    return ethUtil.toChecksumAddress(addrBuffer).toLowerCase()\n  }\n  catch (e) {\n    console.log(e)\n    throw new CustomError('err_core_eth_public_key')\n  }\n}\n\n/**\n * Getting Ethereum wallet address by node\n * @param {Object} node - Ethereum node\n * @returns {string} Ethereum wallet address\n */\n\nexport function getEthAddressByNode (node) {\n  try {\n    let privateKey = getEthPrivateKey(node)\n    let publicKey = getEthPublicKey(privateKey)\n    return getEthAddress(publicKey)\n  }\n  catch (e) {\n    console.log(e)\n    throw new CustomError('err_core_eth_public_key')\n  }\n}\n\n/**\n * Convert a Bitcoin private key to the WIF (Wallet Import Format)\n * @param {Buffer} privateKey - Private key in Uint8Array format\n * @returns {string} Private key in WIF\n */\nexport function privateKeyToWIF (privateKey) {\n  try {\n    return wif.encode(128, privateKey, true)\n  }\n  catch (e) {\n    throw new CustomError('err_core_private_key')\n  }\n}\n\n/**\n * Calculating the transaction size by the number of inputs and outputs\n * @param {number} i - Number of inputs. By default 1\n * @param {number} o - Number of outputs. By default 2\n * @param {boolean} isWitness - Flag signaling that there is a witness in the transaction\n * @returns {number} Transaction size\n */\n\nexport function calcBtcTxSize (i = 1, o = 2, isWitness = false) {\n  let result = 0\n  \n  if (isWitness) {\n    let base_size = (41 * i) + (32 * o) + 10\n    let total_size = (149 * i) + (32 * o) + 12\n    \n    result = ((3 * base_size) + total_size) / 4\n  } else {\n    result = i * 148 + o * 34 + 10\n  }\n  \n  return Math.ceil(result)\n}\n\n/**\n * Creating a raw Bitcoin transaction\n * @param {Object} data - Input data for a transaction\n * @param {Array} data.inputs - List of inputs\n * @param {Array} data.outputs - List of outputs\n * @returns {Object} Returns raw Bitcoin transaction and transaction hash\n */\n\nexport function makeRawBtcTx (data = {}) {\n  try {\n    const {inputs, outputs} = data\n    const psbt = new bitcoin.Psbt()\n    let keyPairs = []\n    \n    psbt.setVersion(1)\n    \n    inputs.forEach(input => {\n      const isSegwit = input.address.substring(0, 3) === 'bc1'\n      const keyPair = bitcoin.ECPair.fromWIF(input.key)\n      \n      keyPairs.push(keyPair)\n      \n      let data = {\n        hash: input.hash,\n        index: input.index\n      }\n      \n      if (isSegwit) {\n        const p2wpkh = bitcoin.payments.p2wpkh({pubkey: keyPair.publicKey})\n        const script = p2wpkh.output.toString('hex')\n        \n        data.witnessUtxo = {\n          script: Buffer.from(script, 'hex'),\n          value: input.value\n        }\n      } else {\n        data.nonWitnessUtxo = Buffer.from(input.tx, 'hex')\n      }\n      psbt.addInput(data)\n    })\n    \n    outputs.forEach(output => {\n      psbt.addOutput({\n        address: output.address,\n        value: output.value\n      })\n    })\n    \n    keyPairs.forEach((key, i) => {\n      psbt.signInput(i, key)\n    })\n    \n    psbt.validateSignaturesOfAllInputs()\n    psbt.finalizeAllInputs()\n    \n    const transaction = psbt.extractTransaction()\n    const signedTransaction = transaction.toHex()\n    const hash = transaction.getId()\n    \n    return {\n      hash,\n      tx: signedTransaction\n    }\n  }\n  catch (e) {\n    console.log(e)\n    throw new CustomError('err_tx_btc_build')\n  }\n}\n\n/**\n * Creating a raw Bitcoin Vault transaction\n * @param {Object} data - Input data for a transaction\n * @param {Array} data.inputs - List of inputs\n * @param {Array} data.outputs - List of outputs\n * @returns {Object} Returns raw Bitcoin Vault transaction and transaction hash\n */\n\nexport function makeRawBtcvTx (data = {}) {\n  try {\n    const {inputs, outputs} = data\n    const psbt = new bitcoin.Psbt({network: networks.btcv})\n    let keyPairs = []\n    psbt.setVersion(1)\n    \n    inputs.forEach(input => {\n      const keyPair = bitcoin.ECPair.fromWIF(input.key, networks.btcv)\n      \n      keyPairs.push(keyPair)\n      \n      let data = {\n        hash: input.hash,\n        index: input.index\n      }\n      \n      \n      const p2wpkh = bitcoin.payments.p2wpkh({pubkey: keyPair.publicKey, network: networks.btcv})\n      const script = p2wpkh.output.toString('hex')\n      \n      data.witnessUtxo = {\n        script: Buffer.from(script, 'hex'),\n        value: input.value\n      }\n      \n      psbt.addInput(data)\n    })\n    \n    outputs.forEach(output => {\n      psbt.addOutput({\n        address: output.address,\n        value: output.value\n      })\n    })\n    \n    keyPairs.forEach((key, i) => {\n      psbt.signInput(i, key)\n    })\n    \n    psbt.validateSignaturesOfAllInputs()\n    psbt.finalizeAllInputs()\n    \n    const transaction = psbt.extractTransaction()\n    const signedTransaction = transaction.toHex()\n    const hash = transaction.getId()\n    \n    return {\n      hash,\n      tx: signedTransaction\n    }\n  }\n  catch (e) {\n    console.log(e)\n    throw new CustomError('err_tx_btc_build')\n  }\n}\n\n/**\n * Creating a raw Ethereum transaction\n * @param {Object} data - Input data for a transaction\n * @param {string} data.to - Recipient address or contract address\n * @param {number} data.value - Transaction amount\n * @param {number} data.nonce - Nonce, transaction count of an account\n * @param {number} data.gasPrice - Transaction gas price\n * @param {number} data.gasLimit - Transaction gas limit\n * @param {string} data.from - Ethereum sender address (required for ERC20 transactions)\n * @param {string} data.data - Data in hex representation (required for ERC20 transactions)\n * @param {string|Buffer} data.privateKey - Ethereum private key in hex or Buffer format\n * @returns {Object} Returns raw Ethereum transaction and transaction hash\n */\n\nexport function makeRawEthTx (data = {}) {\n  const {to, value, nonce, gasPrice, gasLimit, privateKey, chainId} = data\n  \n  if (isNaN(nonce) || isNaN(value) || isNaN(gasPrice) ||\n    isNaN(gasLimit)) {\n    throw new CustomError('err_tx_eth_invalid_params')\n  }\n  \n  if (typeof to !== 'string') {\n    throw new CustomError('err_tx_eth_invalid_params_string')\n  }\n  \n  try {\n    let params = {\n      to: to,\n      nonce: utils.toHex(parseInt(nonce)),\n      value: utils.toHex(parseInt(value)),\n      gasPrice: utils.toHex(parseInt(gasPrice)),\n      gasLimit: utils.toHex(parseInt(gasLimit)),\n      chainId: utils.toHex(1)\n    }\n    \n    if (data.hasOwnProperty('from') && data.from) {\n      params.from = data.from\n    }\n    \n    if (data.hasOwnProperty('data') && data.data) {\n      params.data = data.data\n    }\n    \n    const tx = new Transaction(params)\n    const privateKeyBuffer = ethUtil.toBuffer(privateKey)\n    \n    tx.sign(privateKeyBuffer)\n    \n    const serializedTx = tx.serialize()\n    const hash = tx.hash().toString('hex')\n    \n    return {\n      hash: `0x${ hash }`,\n      tx: `0x${ serializedTx.toString('hex') }`\n    }\n  }\n  catch (e) {\n    console.log(e)\n    throw new CustomError('err_tx_eth_build')\n  }\n}\n\n/**\n * Creating a raw Bitcoin Cash transaction\n * @param {Object} data - Input data for a transaction\n * @param {Array} data.inputs - List of inputs\n * @param {Array} data.outputs - List of outputs\n * @returns {Object} Returns raw Bitcoin Cash transaction and transaction hash\n */\n\nexport function makeRawBchTx (data = {}) {\n  try {\n    const {inputs, outputs} = data\n    let privateKeys = []\n    let utxos = []\n    \n    for (let input of inputs) {\n      let item = {\n        outputIndex: +input.index,\n        satoshis: +input.value,\n        address: convertToCashAddress(input.address),\n        txId: input.hash\n      }\n      item.script = new bitcore.Script.buildPublicKeyHashOut(item.address)\n      privateKeys.push(input.key)\n      utxos.push(item)\n    }\n    \n    const outputsInCashFormat = outputs.map(output => {\n      return {\n        address: convertToCashAddress(output.address),\n        satoshis: +output.value\n      }\n    })\n    \n    const tx = new bitcore.Transaction()\n      .from(utxos)\n      .to(outputsInCashFormat)\n      .sign(privateKeys)\n    \n    const txData = tx.serialize()\n    \n    return {\n      tx: txData.toString('hex'),\n      hash: tx.hash\n    }\n  }\n  catch (e) {\n    console.log(e)\n    throw new CustomError('err_tx_bch_build')\n  }\n}\n\n/**\n * Getting Bitcoin Cash address by node and derivation index\n * @param {Object} node - Input data for a transaction\n * @param {number} childIndex - Derivation index\n * @param {boolean} withoutPrefix - Flag for prefix\n * @returns {string} Returns address\n */\n\nexport function getCashAddress (node, childIndex, withoutPrefix = true) {\n  try {\n    let pubKey = node.deriveChild(childIndex).pubKeyHash\n    let address = new bitcore.Address.fromPublicKeyHash(pubKey)\n    return address.toCashAddress(withoutPrefix)\n  }\n  catch (e) {\n    console.log(e)\n    throw new CustomError('err_core_bch_address')\n  }\n}\n\n/**\n * Convert a Bitcoin Cash address from Legacy format to CashAddr format\n * @param {string} address - Bitcoin Cash address in Legacy format\n * @returns {string} Returns Bitcoin Cash address in CashAddr format\n */\n\nexport function convertToCashAddress (address = '') {\n  try {\n    const toCashAddress = bchaddr.toCashAddress\n    \n    return toCashAddress(address)\n  }\n  catch (e) {\n    console.log(e)\n    throw new CustomError('err_get_bch_address')\n  }\n}\n\n/**\n * Creating a raw Dogecoin transaction\n * @param {Object} data - Input data for a transaction\n * @param {Array} data.inputs - List of inputs\n * @param {Array} data.outputs - List of outputs\n * @returns {Object} Returns raw Dogecoin transaction and transaction hash\n */\n\nexport function makeRawDogeTx (data = {}) {\n  try {\n    const {inputs, outputs} = data\n    \n    let curr = coininfo.dogecoin.main\n    let frmt = curr.toBitcoinJS()\n    const netGain = {\n      messagePrefix: '\\x19' + frmt.name + ' Signed Message:\\n',\n      bip32: {\n        public: frmt.bip32.public,\n        private: frmt.bip32.private\n      },\n      pubKeyHash: frmt.pubKeyHash,\n      scriptHash: frmt.scriptHash,\n      wif: frmt.wif\n    }\n    \n    const psbt = new bitcoin.Psbt({network: netGain, maximumFeeRate: 2000000})\n    let keyPairs = []\n    psbt.setVersion(1)\n    \n    inputs.forEach(input => {\n      const keyPair = bitcoin.ECPair.fromWIF(input.key)\n      keyPair.network = netGain\n      keyPairs.push(keyPair)\n      \n      let data = {\n        hash: input.hash,\n        index: input.index\n      }\n      \n      data.nonWitnessUtxo = Buffer.from(input.tx, 'hex')\n      \n      psbt.addInput(data)\n    })\n    \n    outputs.forEach(output => {\n      psbt.addOutput({\n        address: output.address,\n        value: output.value\n      })\n    })\n    \n    keyPairs.forEach((key, i) => {\n      psbt.signInput(i, key)\n    })\n    \n    psbt.validateSignaturesOfAllInputs()\n    psbt.finalizeAllInputs()\n    \n    const transaction = psbt.extractTransaction()\n    const signedTransaction = transaction.toHex()\n    const hash = transaction.getId()\n\n    return {\n      hash,\n      tx: signedTransaction\n    }\n  }\n  catch (e) {\n    console.log(e)\n    throw new CustomError('err_tx_doge_build')\n  }\n}\n\n/**\n * Getting Dogecoin address by node and derivation index\n * @param {Object} node - Input data for a transaction\n * @param {number} childIndex - Derivation index\n * @param {boolean} withoutPrefix - Flag for prefix\n * @returns {string} Returns address\n */\n\nexport function getDogeAddress (node, childIndex, withoutPrefix = true) {\n  try {\n    let curr = coininfo.dogecoin.main\n    let frmt = curr.toBitcoinJS()\n    const netGain = {\n      messagePrefix: '\\x19' + frmt.name + ' Signed Message:\\n',\n      bip32: {\n        public: frmt.bip32.public,\n        private: frmt.bip32.private\n      },\n      pubKeyHash: frmt.pubKeyHash,\n      scriptHash: frmt.scriptHash,\n      wif: frmt.wif\n    }\n    const address = bitcoin.payments.p2pkh({pubkey: node.deriveChild(childIndex).publicKey, network: netGain})\n    return address.address\n  }\n  catch (e) {\n    console.log(e)\n    throw new CustomError('err_core_doge_address')\n  }\n}\n\n\n/**\n * Getting Bitcoin private key for address by derivation index\n * @param {Object} node - Input data for a transaction\n * @param {number} index - Derivation index\n * @returns {string} Returns Private key in WIF format\n */\n\nexport function getBtcPrivateKeyByIndex (node, index) {\n  try {\n    const key = node.deriveChild(index).privateKey\n    \n    return privateKeyToWIF(key)\n  }\n  catch (e) {\n    throw new CustomError('err_btc_private_key_by_index')\n  }\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/helpers/coreHelper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 434,
    "kind": "function",
    "name": "generateMnemonic",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~generateMnemonic",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{generateMnemonic}",
    "description": "Generation of mnemonics.\nThe number of words in a mnemonic depends on the length of the entropy",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - A mnemonic whose words are separated by spaces"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "entropyLength",
        "description": "The number of bits in the entropy. It can be equal to 128, 160, 192, 224 or 256 bits"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "A mnemonic whose words are separated by spaces"
    }
  },
  {
    "__docId__": 435,
    "kind": "function",
    "name": "mnemonicToSeed",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~mnemonicToSeed",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{mnemonicToSeed}",
    "description": "Converting a mnemonic to seed",
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Buffer} - Seed in Uint8Array format"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "mnemonic",
        "description": "Mnemonic phrase"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": "Seed in Uint8Array format"
    }
  },
  {
    "__docId__": 436,
    "kind": "function",
    "name": "mnemonicToEntropy",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~mnemonicToEntropy",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{mnemonicToEntropy}",
    "description": "Converting a mnemonic to entropy",
    "lineNumber": 50,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} HEX strings entropy"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "mnemonic",
        "description": "Mnemonic phrase"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "HEX strings entropy"
    }
  },
  {
    "__docId__": 437,
    "kind": "function",
    "name": "hdFromSeed",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~hdFromSeed",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{hdFromSeed}",
    "description": "Converting a seed to hdkey (Hierarchical Deterministic Key)",
    "lineNumber": 65,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} hdkey object with private and public key"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "seed",
        "description": "Mnemonic seed in Buffer"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "hdkey object with private and public key"
    }
  },
  {
    "__docId__": 438,
    "kind": "function",
    "name": "hdFromXprv",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~hdFromXprv",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{hdFromXprv}",
    "description": "Converting a xprv to hdkey (Hierarchical Deterministic Key)",
    "lineNumber": 81,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} hdkey object with private and public key"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "xprv",
        "description": "Extended private key"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "hdkey object with private and public key"
    }
  },
  {
    "__docId__": 439,
    "kind": "function",
    "name": "getXprv",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~getXprv",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{getXprv}",
    "description": "Getting xprv by hdkey",
    "lineNumber": 96,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Extended private key"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "hd",
        "description": "HDkey node"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Extended private key"
    }
  },
  {
    "__docId__": 440,
    "kind": "function",
    "name": "derive",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~derive",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{derive}",
    "description": "Derivation of node. Getting child node by path",
    "lineNumber": 113,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - Child node"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "hd",
        "description": "HDkey node"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "Derivation path"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Child node"
    }
  },
  {
    "__docId__": 441,
    "kind": "function",
    "name": "getBtcAddress",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~getBtcAddress",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{getBtcAddress}",
    "description": "Getting a bitcoin address by node and child index",
    "lineNumber": 145,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Bitcoin address"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "HDkey node"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "childIndex",
        "description": "Index of the child node"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Bitcoin type. There may be p2pkh or p2wpkh"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "network",
        "description": "Custom network for different coins"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Bitcoin address"
    }
  },
  {
    "__docId__": 442,
    "kind": "function",
    "name": "getBtcAddressByPublicKey",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~getBtcAddressByPublicKey",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{getBtcAddressByPublicKey}",
    "description": "Getting an address by public key",
    "lineNumber": 174,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Bitcoin address"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "Coin public key"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Bitcoin type. There may be p2pkh or p2wpkh"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "network",
        "description": "Custom network for different coins"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Bitcoin address"
    }
  },
  {
    "__docId__": 443,
    "kind": "function",
    "name": "getEthPrivateKey",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~getEthPrivateKey",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{getEthPrivateKey}",
    "description": "Getting a Ethereum private key by node",
    "lineNumber": 196,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Buffer} Ethereum private key in Uint8Array format"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "Ethereum node"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": "Ethereum private key in Uint8Array format"
    }
  },
  {
    "__docId__": 444,
    "kind": "function",
    "name": "getEthPublicKey",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~getEthPublicKey",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{getEthPublicKey}",
    "description": "Getting a Ethereum public key by private key",
    "lineNumber": 212,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Buffer} Ethereum public key in Uint8Array format"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "privateKey",
        "description": "Ethereum private key"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": "Ethereum public key in Uint8Array format"
    }
  },
  {
    "__docId__": 445,
    "kind": "function",
    "name": "getEthAddress",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~getEthAddress",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{getEthAddress}",
    "description": "Getting a Ethereum wallet address by public key",
    "lineNumber": 228,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Ethereum wallet address"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "publicKey",
        "description": "Ethereum public key"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Ethereum wallet address"
    }
  },
  {
    "__docId__": 446,
    "kind": "function",
    "name": "getEthAddressByNode",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~getEthAddressByNode",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{getEthAddressByNode}",
    "description": "Getting Ethereum wallet address by node",
    "lineNumber": 247,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Ethereum wallet address"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "Ethereum node"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Ethereum wallet address"
    }
  },
  {
    "__docId__": 447,
    "kind": "function",
    "name": "privateKeyToWIF",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~privateKeyToWIF",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{privateKeyToWIF}",
    "description": "Convert a Bitcoin private key to the WIF (Wallet Import Format)",
    "lineNumber": 264,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Private key in WIF"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "privateKey",
        "description": "Private key in Uint8Array format"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Private key in WIF"
    }
  },
  {
    "__docId__": 448,
    "kind": "function",
    "name": "calcBtcTxSize",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~calcBtcTxSize",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{calcBtcTxSize}",
    "description": "Calculating the transaction size by the number of inputs and outputs",
    "lineNumber": 281,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Transaction size"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "i",
        "description": "Number of inputs. By default 1"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": "Number of outputs. By default 2"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isWitness",
        "description": "Flag signaling that there is a witness in the transaction"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Transaction size"
    }
  },
  {
    "__docId__": 449,
    "kind": "function",
    "name": "makeRawBtcTx",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~makeRawBtcTx",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{makeRawBtcTx}",
    "description": "Creating a raw Bitcoin transaction",
    "lineNumber": 304,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} Returns raw Bitcoin transaction and transaction hash"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Input data for a transaction"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "data.inputs",
        "description": "List of inputs"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "data.outputs",
        "description": "List of outputs"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Returns raw Bitcoin transaction and transaction hash"
    }
  },
  {
    "__docId__": 450,
    "kind": "function",
    "name": "makeRawBtcvTx",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~makeRawBtcvTx",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{makeRawBtcvTx}",
    "description": "Creating a raw Bitcoin Vault transaction",
    "lineNumber": 374,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} Returns raw Bitcoin Vault transaction and transaction hash"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Input data for a transaction"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "data.inputs",
        "description": "List of inputs"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "data.outputs",
        "description": "List of outputs"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Returns raw Bitcoin Vault transaction and transaction hash"
    }
  },
  {
    "__docId__": 451,
    "kind": "function",
    "name": "makeRawEthTx",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~makeRawEthTx",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{makeRawEthTx}",
    "description": "Creating a raw Ethereum transaction",
    "lineNumber": 446,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} Returns raw Ethereum transaction and transaction hash"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Input data for a transaction"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.to",
        "description": "Recipient address or contract address"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.value",
        "description": "Transaction amount"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.nonce",
        "description": "Nonce, transaction count of an account"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.gasPrice",
        "description": "Transaction gas price"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.gasLimit",
        "description": "Transaction gas limit"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.from",
        "description": "Ethereum sender address (required for ERC20 transactions)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.data",
        "description": "Data in hex representation (required for ERC20 transactions)"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "data.privateKey",
        "description": "Ethereum private key in hex or Buffer format"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Returns raw Ethereum transaction and transaction hash"
    }
  },
  {
    "__docId__": 452,
    "kind": "function",
    "name": "makeRawBchTx",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~makeRawBchTx",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{makeRawBchTx}",
    "description": "Creating a raw Bitcoin Cash transaction",
    "lineNumber": 503,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} Returns raw Bitcoin Cash transaction and transaction hash"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Input data for a transaction"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "data.inputs",
        "description": "List of inputs"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "data.outputs",
        "description": "List of outputs"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Returns raw Bitcoin Cash transaction and transaction hash"
    }
  },
  {
    "__docId__": 453,
    "kind": "function",
    "name": "getCashAddress",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~getCashAddress",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{getCashAddress}",
    "description": "Getting Bitcoin Cash address by node and derivation index",
    "lineNumber": 554,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Returns address"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "Input data for a transaction"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "childIndex",
        "description": "Derivation index"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "withoutPrefix",
        "description": "Flag for prefix"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Returns address"
    }
  },
  {
    "__docId__": 454,
    "kind": "function",
    "name": "convertToCashAddress",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~convertToCashAddress",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{convertToCashAddress}",
    "description": "Convert a Bitcoin Cash address from Legacy format to CashAddr format",
    "lineNumber": 572,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Returns Bitcoin Cash address in CashAddr format"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "address",
        "description": "Bitcoin Cash address in Legacy format"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Returns Bitcoin Cash address in CashAddr format"
    }
  },
  {
    "__docId__": 455,
    "kind": "function",
    "name": "makeRawDogeTx",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~makeRawDogeTx",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{makeRawDogeTx}",
    "description": "Creating a raw Dogecoin transaction",
    "lineNumber": 592,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} Returns raw Dogecoin transaction and transaction hash"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Input data for a transaction"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "data.inputs",
        "description": "List of inputs"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "data.outputs",
        "description": "List of outputs"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Returns raw Dogecoin transaction and transaction hash"
    }
  },
  {
    "__docId__": 456,
    "kind": "function",
    "name": "getDogeAddress",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~getDogeAddress",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{getDogeAddress}",
    "description": "Getting Dogecoin address by node and derivation index",
    "lineNumber": 665,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Returns address"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "Input data for a transaction"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "childIndex",
        "description": "Derivation index"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "withoutPrefix",
        "description": "Flag for prefix"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Returns address"
    }
  },
  {
    "__docId__": 457,
    "kind": "function",
    "name": "getBtcPrivateKeyByIndex",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~getBtcPrivateKeyByIndex",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{getBtcPrivateKeyByIndex}",
    "description": "Getting Bitcoin private key for address by derivation index",
    "lineNumber": 696,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Returns Private key in WIF format"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "Input data for a transaction"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "Derivation index"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Returns Private key in WIF format"
    }
  },
  {
    "__docId__": 458,
    "kind": "file",
    "name": "src/helpers/errors.js",
    "content": "export default {\n  err_core_mnemonic: 'Wrong mnemonic phrase. Please, check the spelling and try again',\n  err_core_mnemonic_length: 'Bad word count for mnemonic',\n  err_core_mnemonic_empty: 'Invalid mnemonic',\n  err_core_seed: 'Invalid seed',\n  err_core_entropy: 'Bad entropy',\n  err_core_xprv: 'Invalid xprv',\n  err_core_hdkey: 'Invalid hdkey',\n  err_core_btc_node: 'Error generating address. Check BTC node',\n  err_core_btc_type: 'Invalid bitcoin address type. Supported types are p2pkh and p2wpkh',\n  err_core_eth_node: 'Error generating ETH private key. Check ETH node',\n  err_core_eth_private_key: 'Error generating ETH public key. Check ETH private key',\n  err_core_eth_public_key: 'Error generating ETH address. Check ETH public key',\n  err_core_eth_account: 'Invalid account. It must be an integer',\n  err_core_derivation: 'Problem with derivation. Check node and derivation path',\n  err_core_derivation_hdkey: 'HDkey is required',\n  err_core_derivation_path: 'Invalid derivation path',\n  err_core_derivation_range: 'Bad range. Check from/to params',\n  err_core_private_key: 'Invalid private key. Expect buffer',\n  err_tx_btc_balance: 'Insufficient balance',\n  err_tx_btc_build: 'BTC transaction failed. Check all parameters',\n  err_tx_btc_amount: 'Invalid amount. Amount must be a Number',\n  err_tx_btc_fee: 'Invalid fee. Fee must be a Object with \\`SAT\\` parameter',\n  err_tx_btc_unspent: 'Invalid unspent. Try to resync the BTC wallet',\n  err_tx_btc_raw_tx: 'Problem getting raw transaction. Try to send again',\n  err_tx_bch_amount: 'Invalid amount. Amount must be a Number',\n  err_tx_bch_fee: 'Invalid fee. Fee must be a Object with \\`SAT\\` parameter',\n  err_tx_bch_balance: 'Insufficient balance',\n  err_tx_bch_build: 'BCH transaction failed. Check all parameters',\n  err_tx_eth_balance: 'Insufficient balance',\n  err_tx_eth_address: 'Invalid ethereum address',\n  err_tx_eth_build: 'ETH transaction failed. Check all parameters',\n  err_tx_bnb_build: 'BNB transaction failed. Check all parameters',\n  err_tx_eth_invalid_params: 'Invalid params. Nonce, value, gas price and gas limit have to be a number',\n  err_tx_eth_invalid_params_string: 'Invalid params. Parameters \"to\" must be string based',\n  err_tx_btcv_balance: 'Insufficient balance',\n  err_tx_btcv_amount: 'Invalid amount. Amount must be a Number',\n  err_tx_btcv_fee: 'Invalid fee. Fee must be a Object with \\`SAT\\` parameter',\n  err_wallet_exist: 'Wallet not created. Use this method after creating a wallet',\n  err_wallet_api: 'Api is not found! Please, use the setter apiEndpoint to install',\n  err_wallet_api_type: 'Api must be an object!',\n  err_btc_private_key_by_index: 'Key generation problem. Check the node and derivation index',\n  err_get_bch_address: 'Problem with address conversion. Check the format of the source address',\n  err_tx_doge_amount: 'Invalid amount. Amount must be a Number',\n  err_tx_doge_fee: 'Invalid fee. Fee must be a Object with \\`SAT\\` parameter',\n  err_tx_doge_balance: 'Insufficient balance',\n  err_tx_doge_build: 'DOGE transaction failed. Check all parameters',\n  err_tx_doge_raw_tx: 'Problem getting raw transaction. Try to send again',\n  err_sync_coin: 'Coin is required',\n  err_sync_coin_not_supported: 'Selected coin is not supported for sync',\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/helpers/errors.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 459,
    "kind": "file",
    "name": "src/helpers/handleErrors.js",
    "content": "import errors from '@/helpers/errors'\n\n/**\n * Custom error object.\n * By the error code it substitutes the desired message from object 'errors'\n * @extends Error\n */\n\nclass CustomError extends Error {\n  constructor(code) {\n    super(code)\n    this.name = 'CustomError'\n    this.message = errors.hasOwnProperty(code) ? `${code}: ${errors[code]}` : 'Uncaught error'\n  \n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor)\n    } else {\n      this.stack = (new Error()).stack\n    }\n  }\n}\n\nexport default CustomError\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/helpers/handleErrors.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 460,
    "kind": "class",
    "name": "CustomError",
    "memberof": "src/helpers/handleErrors.js",
    "static": true,
    "longname": "src/helpers/handleErrors.js~CustomError",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/handleErrors.js",
    "importStyle": "CustomError",
    "description": "Custom error object.\nBy the error code it substitutes the desired message from object 'errors'",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 461,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/helpers/handleErrors.js~CustomError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/handleErrors.js~CustomError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 462,
    "kind": "member",
    "name": "name",
    "memberof": "src/helpers/handleErrors.js~CustomError",
    "static": false,
    "longname": "src/helpers/handleErrors.js~CustomError#name",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 463,
    "kind": "member",
    "name": "message",
    "memberof": "src/helpers/handleErrors.js~CustomError",
    "static": false,
    "longname": "src/helpers/handleErrors.js~CustomError#message",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 464,
    "kind": "member",
    "name": "stack",
    "memberof": "src/helpers/handleErrors.js~CustomError",
    "static": false,
    "longname": "src/helpers/handleErrors.js~CustomError#stack",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 465,
    "kind": "file",
    "name": "src/helpers/networks.js",
    "content": "export const networks = {\n  btc: {\n    messagePrefix: '\\x18Bitcoin Signed Message:\\n',\n    bech32: 'bc',\n    bip32: {\n      public: 0x0488b21e,\n      private: 0x0488ade4,\n    },\n    pubKeyHash: 0x00,\n    scriptHash: 0x05,\n    wif: 0x80,\n  },\n  btcv: {\n    messagePrefix: '\\x18Bitcoin Signed Message:\\n',\n    bech32: 'royale',\n    bip32: {\n      public: 0x0488b21e,\n      private: 0x0488ade4\n    },\n    pubKeyHash: 0x4e,\n    scriptHash: 0x3c,\n    wif: 0x80\n  }\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/helpers/networks.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 466,
    "kind": "variable",
    "name": "networks",
    "memberof": "src/helpers/networks.js",
    "static": true,
    "longname": "src/helpers/networks.js~networks",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/networks.js",
    "importStyle": "{networks}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "{\"btc\": *, \"btcv\": *}"
      ]
    }
  },
  {
    "__docId__": 467,
    "kind": "file",
    "name": "src/helpers/requestHandleErrors.js",
    "content": "/**\n * Handling requests\n * @param response\n * @returns {any | Promise<any>} Response decoded in json or error if the request failed\n */\nexport default function (response) {\n  if (response.ok) {\n    const contentType = response.headers.get('content-type')\n    if (contentType && contentType.indexOf('application/json') !== -1) {\n      return response.json()\n    } else {\n      return response.text()\n    }\n  } else {\n    throw new Error(response.statusText)\n  }\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/helpers/requestHandleErrors.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 468,
    "kind": "function",
    "name": "requestHandleErrors",
    "memberof": "src/helpers/requestHandleErrors.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/requestHandleErrors.js~requestHandleErrors",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/requestHandleErrors.js",
    "importStyle": "requestHandleErrors",
    "description": "Handling requests",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{any | Promise<any>} Response decoded in json or error if the request failed"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "response",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any ",
        " Promise<any>"
      ],
      "spread": false,
      "description": "Response decoded in json or error if the request failed"
    }
  },
  {
    "__docId__": 469,
    "kind": "file",
    "name": "src/helpers/toFormatDecimal.js",
    "content": "/**\n * Formatting numbers with the number of digits after the decimal point\n * @param {number|string} value - Value for formatting\n * @param {number} x - Number of digits after the decimal point\n * @param {boolean} floor - type of rounding\n * @returns {string} Formatted value or 0 if no value is specified\n */\nexport default function (value, x = 8, floor = false) {\n  value = parseFloat(value)\n  \n  if (!value) return '0'\n  \n  let num = 0\n  \n  if (floor) {\n    let pow = Math.pow(10, 8)\n    num = Math.floor(value * pow) / pow\n  } else {\n    num = value.toFixed(x)\n  }\n  \n  while (num[num.length - 1] === '0') {\n    num = num.slice(0, -1)\n  }\n  \n  if (num[num.length - 1] === '.') {\n    num = num.slice(0, -1)\n  }\n  \n  return num\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/helpers/toFormatDecimal.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 470,
    "kind": "function",
    "name": "toFormatDecimal",
    "memberof": "src/helpers/toFormatDecimal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/toFormatDecimal.js~toFormatDecimal",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/toFormatDecimal.js",
    "importStyle": "toFormatDecimal",
    "description": "Formatting numbers with the number of digits after the decimal point",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Formatted value or 0 if no value is specified"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Value for formatting"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Number of digits after the decimal point"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "floor",
        "description": "type of rounding"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Formatted value or 0 if no value is specified"
    }
  },
  {
    "__docId__": 471,
    "kind": "file",
    "name": "src/index.js",
    "content": "import Wrapper from '@/Wrapper'\nimport CustomError from '@/helpers/handleErrors'\nimport {\n  makeRawBtcTx,\n  makeRawEthTx,\n  makeRawBchTx,\n  makeRawDogeTx,\n  getBtcPrivateKeyByIndex,\n  calcBtcTxSize\n} from '@/helpers/coreHelper'\nimport BinanceTx from '@/class/BNB/transaction'\n\nexport {default as converter} from '@/helpers/converters'\nexport {default as toDecimal} from '@/helpers/toFormatDecimal'\nexport {\n  makeRawBtcTx,\n  makeRawEthTx,\n  makeRawBchTx,\n  makeRawDogeTx,\n  BinanceTx,\n  getBtcPrivateKeyByIndex,\n  calcBtcTxSize\n}\n\n/**\n * Currencies that are supported in the wallet\n */\nconst AVAILABLE_COINS = ['BTC', 'ETH', 'BCH', 'BTCV', 'DOGE', 'BNB']\n\n/**\n * Class Wallet\n * @class\n */\n\nexport default class Wallet {\n  /**\n   * Create a Wallet\n   * @param {Object} api - A set of URLs for getting information about addresses\n   */\n  constructor (api) {\n    this.wrapper = new Wrapper()\n    this.core = null\n    this.sync = {}\n    this.api = {\n      btc: '',\n      btcFee: '',\n      eth: '',\n      bch: '',\n      btcv: '',\n      doge: '',\n      dogeFee: '',\n      bnb: ''\n    }\n    this._apiReady = false\n\n    if (api) {\n      this.setApiEndpoint(api)\n    }\n  }\n\n  /**\n   * Creating a new wallet\n   *\n   * @param {number} count - Mnemonic words count\n   * @returns {Promise<Object>} An object with core's information\n   * @returns {string} core.mnemonic - Imported mnemonic\n   * @returns {string} core.xprv - xprv key\n   * @returns {string} core.from - A import type\n   * @returns {Object} core.hdkey - A hierarchical deterministic keys\n   * @returns {Uint8Array} core.seed - Seed\n   * @returns {string} core.seedInHex - Seed in hex format\n   */\n\n  async createNew (count = 12) {\n    let data = {\n      data: {\n        from: 'new',\n        count: count\n      },\n      api: this.api\n    }\n\n    this.core = await this.wrapper.method('create', data)\n\n    return this.core\n  }\n\n  /**\n   * Creating a wallet by mnemonic\n   *\n   * @param {string} mnemonic\n   * @returns {Promise<Object>} An object with core's information\n   * @returns {string} core.mnemonic - Imported mnemonic\n   * @returns {string} core.xprv - xprv key\n   * @returns {string} core.from - A import type\n   * @returns {Object} core.hdkey - A hierarchical deterministic keys\n   * @returns {Uint8Array} core.seed - Seed\n   * @returns {string} core.seedInHex - Seed in hex format\n   */\n\n  async createByMnemonic (mnemonic = '') {\n    if (!mnemonic) {\n      throw new CustomError('err_core_mnemonic_empty')\n    }\n\n    let data = {\n      data: {\n        from: 'mnemonic',\n        mnemonic: mnemonic\n      },\n      api: this.api\n    }\n\n    this.core = await this.wrapper.method('create', data)\n\n    return this.core\n  }\n\n  /**\n   * Creating a wallet by xprv key\n   *\n   * @param {string} key - BIP32 Root Key\n   * @returns {Promise<Object>} An object with core's information\n   * @returns {string} core.mnemonic - Imported mnemonic\n   * @returns {string} core.xprv - xprv key\n   * @returns {string} core.from - A import type\n   * @returns {Object} core.hdkey - A hierarchical deterministic keys\n   * @returns {Uint8Array} core.seed - Seed\n   * @returns {string} core.seedInHex - Seed in hex format\n   */\n\n  async createByKey (key = '') {\n    if (!key) {\n      throw new CustomError('err_core_xprv')\n    }\n\n    let data = {\n      data: {\n        from: 'xprv',\n        key: key\n      },\n      api: this.api\n    }\n\n    this.core = await this.wrapper.method('create', data)\n\n    return this.core\n  }\n\n  /**\n   * Creating a core for each supported currency type\n   *\n   * @param {Array<{coin: String, type: String}>} coins\n   * @param {string} coins[].coin - Short name of coin. Supported coins are BTC, ETH, BCH and BTCV\n   * @param {string|number} coins[].type - Coin type (additional). For BTC supported types are p2pkh and p2wpkh. For ETH type is a account number (by default 0).\n   * @returns {Object} core.BTC - A BTC core that contains internal and external nodes, private and public keys and the first external user address\n   * @returns {Object} core.ETH - A ETH core that contains node, private and public keys and user address\n   * */\n\n  async createCoins (coins) {\n    if (!coins || !Array.isArray(coins)) {\n      coins = [\n        {coin: 'BTC', type: 'p2pkh'},\n        {coin: 'ETH', type: 0}\n      ]\n    }\n\n    return await this.wrapper.method('createCoins', coins)\n  }\n\n  /**\n   * The method returns node by derivation path\n   *\n   * @param {Object} data\n   * @param {number} data.from - Top of the derivation range\n   * @param {number} data.to - End of the derivation range\n   * @param {string} data.path - Derivation path\n   * @param {Array} data.coins - Array of coins for generating addresses\n   * @returns {{node: {privateExtendedKey: *, publicExtendedKey: *}, list: []}} Returns object with node information\n   * @returns {Object} node - Contains privateExtendedKey and publicExtendedKey\n   * @returns {Array} list - Array of child nodes. Every child node contains the following parameters:\n   * derivation path, publick key, private key in WIF format and addresses if a list of coins was sent\n   */\n\n  async getChildNodes (data) {\n    if (!this.core) {\n      throw new CustomError('err_wallet_exist')\n    }\n\n    return await this.wrapper.method('getNodes', data)\n  }\n\n  /**\n   * The method starts synchronization of selected coin wallet\n   * @param {string} coin - Coin ticker (required)\n   * @param {number, string} type - Type of coin (optional)\n   * @returns {Promise<Object>} Returns object with synchronization information\n   * @returns {Object} sync\n   * @returns {string} sync.address - Ethereum wallet address\n   * @returns {number} sync.balance - Ethereum balance in wei\n   * @returns {Array} sync.transactions - The list of Ethereum transactions\n   */\n  async startSync ({coin, type}) {\n    if (!this._apiReady) {\n      throw new CustomError('err_wallet_api')\n    }\n\n    if (!coin || typeof coin !== 'string') {\n      throw new CustomError('err_sync_coin')\n    }\n    coin = coin.toUpperCase()\n\n    if (!AVAILABLE_COINS.includes(coin)) {\n      throw new CustomError('err_sync_coin_not_supported')\n    }\n\n    let sync = {}\n\n    if (typeof type === 'number' || typeof type === 'string') {\n      sync = await this.wrapper.method('sync', {coin, type})\n      if (!this.sync[coin]) {\n        this.sync[coin] = {}\n      }\n\n      this.sync[coin][type] = sync\n    } else {\n      sync = await this.wrapper.method('sync', {coin})\n      this.sync[coin] = sync\n    }\n\n    return sync\n  }\n\n  /**\n   * The method returns a raw BTC transaction\n   *\n   * @param {Object} data\n   * @param {string} data.inputs - List of transaction inputs. Input contains the following parameters:\n   * transaction hash, output n, address, value, script and private key in WIF format\n   * @param {string} data.outputs - List of transaction outpus. Output contains the following parameters: address and value\n   * @returns {Promise<Object>} Returns object with transaction hash and raw transaction data\n   * @returns {string} hash - Transaction hash\n   * @returns {string} tx - Raw Bitcoin transaction\n   */\n\n  async makeRawBtcTx (data) {\n    return await makeRawBtcTx(data)\n  }\n\n  /**\n   * The method returns a raw BCH transaction\n   *\n   * @param {Object} data\n   * @param {string} data.inputs - List of transaction inputs. Input contains the following parameters:\n   * transaction hash, output n, address, value in satoshis, script and private key in WIF format\n   * @param {string} data.outputs - List of transaction outpus. Output contains the following parameters: address and value in satoshis\n   * @returns {Promise<Object>} Returns object with transaction hash and raw transaction data\n   * @returns {string} hash - Transaction hash\n   * @returns {string} tx - Raw Bitcoin Cash transaction\n   */\n\n  async makeRawBchTx (data) {\n    return await makeRawBchTx(data)\n  }\n\n  /**\n   * The method returns a raw BCH transaction\n   *\n   * @param {Object} data\n   * @param {string} data.inputs - List of transaction inputs. Input contains the following parameters:\n   * transaction hash, output n, address, value in satoshis, script and private key in WIF format\n   * @param {string} data.outputs - List of transaction outpus. Output contains the following parameters: address and value in satoshis\n   * @returns {Promise<Object>} Returns object with transaction hash and raw transaction data\n   * @returns {string} hash - Transaction hash\n   * @returns {string} tx - Raw Bitcoin Cash transaction\n   */\n\n  async makeRawDogeTx (data) {\n    return await makeRawDogeTx(data)\n  }\n\n  /**\n   * The method returns a raw ETH transaction\n   *\n   * @param {Object} data\n   * @param {string} data.address - Ethereum address\n   * @param {number} data.amount - The transaction's amount in wei\n   * @param {number} data.nonce - The transaction's nonce\n   * @param {number} data.gasPrice - The transaction's gas price in wei\n   * @param {number} data.gasLimit - The transaction's gas limit\n   * @param {string} data.privateKey - Private key of ether wallet in hex\n   * @returns {Promise<Object>} Returns object with transaction hash and raw transaction data\n   * @returns {string} hash - Transaction hash\n   * @returns {string} tx - Raw Ethereum transaction\n   */\n\n  async makeRawEthTx (data) {\n    return await makeRawEthTx(data)\n  }\n\n  /**\n   * This method generates a list of transaction fees for the selected currency\n   * @param {Object} params\n   * @param {string} params.currency - Selected currency. BTC, ETH, BCH or BTCV\n   * @param {string} params.addressType - Address type. Required for BTC transaction. Supported types are p2pkh or p2wpkh\n   * @param {string} params.account - Account number. Required for ETH transaction\n   * @param {number} params.amount - Amount of transaction\n   * @param {number} params.customFee - Custom fee per byte\n   * @param {number} params.size - Transaction size. Relevant for bitcoin transactions\n   * @returns {Promise<Array>} The list of transaction fees\n   */\n\n  async calculateFee (params) {\n    if (!this._apiReady) {\n      throw new CustomError('err_wallet_api')\n    }\n\n    return await this.wrapper.method('transaction', {\n      method: 'calcFee',\n      currency: params.currency,\n      addressType: params.addressType,\n      account: params.account,\n      tx: {\n        amount: params.amount,\n        customFee: params.customFee,\n        size: params.size\n      }\n    })\n  }\n\n  /**\n   * Wrapper for the compilation of transactions of bitcoin and ether\n   * @param {Object} data\n   * @param {string} data.currency - Transaction currency\n   * @param {string} data.addressType - Address type. Required for BTC transaction. Supported types are p2pkh or p2wpkh\n   * @param {string} data.account - Account number. Required for ETH transaction\n   * @param {Object} data.tx\n   * @param {string} data.tx.addressTo - Recipient address\n   * @param {number} data.tx.amount - Transaction amount\n   * @param {number} data.tx.fee - Transaction fee\n   * @returns {Promise<Object>}\n   * @returns {string} hash - Transaction hash\n   * @returns {string} tx - Raw bitcoin or ethereum transaction\n   */\n\n  async makeTransaction (data) {\n    if (!this._apiReady) {\n      throw new CustomError('err_wallet_api')\n    }\n\n    let params = {\n      method: 'make',\n      currency: data.currency,\n      addressType: data.addressType,\n      account: data.account,\n      tx: data.tx\n    }\n\n    return await this.wrapper.method('transaction', params)\n  }\n\n  /**\n   * Sets the API Endpoint\n   *\n   * @type {Object} api\n   * @param {string} api.btc - Url address of bitcoin endpoint\n   * @param {string} api.btcFee - Url address of bitcoin fee endpoint\n   * @param {string} api.eth - Url address of ethereum endpoint\n   * @param {string} api.bch - Url address of bitcoin cash endpoint\n   * @param {string} api.btcv - Url address of bitcoin vault endpoint\n   * @param {string} api.doge - Url address of dogecoin endpoint\n   * @param {string} api.dogeFee - Url address of dogecoin endpoint\n   */\n\n  setApiEndpoint (api) {\n    if (!api || typeof api !== 'object' || Array.isArray(api)) {\n      throw new CustomError('err_wallet_api_type')\n    }\n\n    for (let key in this.api) {\n      if (api.hasOwnProperty(key)) {\n        this.api[key] = api[key]\n      } else {\n        throw Error(`Api must be contains ${ key } value`)\n      }\n    }\n    this._apiReady = true\n  }\n\n  /**\n   * Set request headers\n   *\n   * @type {Object} headers - Set of HTTP headers\n   */\n\n  setHeaders(headers) {\n    this.wrapper.method('setHeaders', headers)\n  }\n\n  get Core () {\n    return this.core\n  }\n\n  get getApiState () {\n    return this._apiReady\n  }\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 472,
    "kind": "variable",
    "name": "AVAILABLE_COINS",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~AVAILABLE_COINS",
    "access": "public",
    "export": false,
    "importPath": "lumi-web-core/src/index.js",
    "importStyle": null,
    "description": "Currencies that are supported in the wallet",
    "lineNumber": 28,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 473,
    "kind": "class",
    "name": "Wallet",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~Wallet",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/index.js",
    "importStyle": "Wallet",
    "description": "Class Wallet",
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 474,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/index.js~Wallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Wallet#constructor",
    "access": "public",
    "description": "Create a Wallet",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "api",
        "description": "A set of URLs for getting information about addresses"
      }
    ]
  },
  {
    "__docId__": 475,
    "kind": "member",
    "name": "wrapper",
    "memberof": "src/index.js~Wallet",
    "static": false,
    "longname": "src/index.js~Wallet#wrapper",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 476,
    "kind": "member",
    "name": "core",
    "memberof": "src/index.js~Wallet",
    "static": false,
    "longname": "src/index.js~Wallet#core",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 477,
    "kind": "member",
    "name": "sync",
    "memberof": "src/index.js~Wallet",
    "static": false,
    "longname": "src/index.js~Wallet#sync",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 478,
    "kind": "member",
    "name": "api",
    "memberof": "src/index.js~Wallet",
    "static": false,
    "longname": "src/index.js~Wallet#api",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "{\"btc\": *, \"btcFee\": *, \"eth\": *, \"bch\": *, \"btcv\": *, \"doge\": *, \"dogeFee\": *, \"bnb\": *}"
      ]
    }
  },
  {
    "__docId__": 479,
    "kind": "member",
    "name": "_apiReady",
    "memberof": "src/index.js~Wallet",
    "static": false,
    "longname": "src/index.js~Wallet#_apiReady",
    "access": "private",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 480,
    "kind": "method",
    "name": "createNew",
    "memberof": "src/index.js~Wallet",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/index.js~Wallet#createNew",
    "access": "public",
    "description": "Creating a new wallet",
    "lineNumber": 74,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} An object with core's information"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} core.mnemonic - Imported mnemonic"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} core.xprv - xprv key"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} core.from - A import type"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Object} core.hdkey - A hierarchical deterministic keys"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Uint8Array} core.seed - Seed"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} core.seedInHex - Seed in hex format"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "count",
        "description": "Mnemonic words count"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "core.seedInHex - Seed in hex format"
    }
  },
  {
    "__docId__": 482,
    "kind": "method",
    "name": "createByMnemonic",
    "memberof": "src/index.js~Wallet",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/index.js~Wallet#createByMnemonic",
    "access": "public",
    "description": "Creating a wallet by mnemonic",
    "lineNumber": 101,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} An object with core's information"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} core.mnemonic - Imported mnemonic"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} core.xprv - xprv key"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} core.from - A import type"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Object} core.hdkey - A hierarchical deterministic keys"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Uint8Array} core.seed - Seed"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} core.seedInHex - Seed in hex format"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "mnemonic",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "core.seedInHex - Seed in hex format"
    }
  },
  {
    "__docId__": 484,
    "kind": "method",
    "name": "createByKey",
    "memberof": "src/index.js~Wallet",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/index.js~Wallet#createByKey",
    "access": "public",
    "description": "Creating a wallet by xprv key",
    "lineNumber": 132,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} An object with core's information"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} core.mnemonic - Imported mnemonic"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} core.xprv - xprv key"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} core.from - A import type"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Object} core.hdkey - A hierarchical deterministic keys"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Uint8Array} core.seed - Seed"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} core.seedInHex - Seed in hex format"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "BIP32 Root Key"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "core.seedInHex - Seed in hex format"
    }
  },
  {
    "__docId__": 486,
    "kind": "method",
    "name": "createCoins",
    "memberof": "src/index.js~Wallet",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/index.js~Wallet#createCoins",
    "access": "public",
    "description": "Creating a core for each supported currency type",
    "lineNumber": 160,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} core.BTC - A BTC core that contains internal and external nodes, private and public keys and the first external user address"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Object} core.ETH - A ETH core that contains node, private and public keys and user address"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<{coin: String, type: String}>"
        ],
        "spread": false,
        "optional": false,
        "name": "coins",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "coins[].coin",
        "description": "Short name of coin. Supported coins are BTC, ETH, BCH and BTCV"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "coins[].type",
        "description": "Coin type (additional). For BTC supported types are p2pkh and p2wpkh. For ETH type is a account number (by default 0)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "core.ETH - A ETH core that contains node, private and public keys and user address"
    }
  },
  {
    "__docId__": 487,
    "kind": "method",
    "name": "getChildNodes",
    "memberof": "src/index.js~Wallet",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/index.js~Wallet#getChildNodes",
    "access": "public",
    "description": "The method returns node by derivation path",
    "lineNumber": 185,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{node: {privateExtendedKey: *, publicExtendedKey: *}, list: []}} Returns object with node information"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Object} node - Contains privateExtendedKey and publicExtendedKey"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Array} list - Array of child nodes. Every child node contains the following parameters:\nderivation path, publick key, private key in WIF format and addresses if a list of coins was sent"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.from",
        "description": "Top of the derivation range"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.to",
        "description": "End of the derivation range"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.path",
        "description": "Derivation path"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "data.coins",
        "description": "Array of coins for generating addresses"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "list - Array of child nodes. Every child node contains the following parameters:\nderivation path, publick key, private key in WIF format and addresses if a list of coins was sent"
    }
  },
  {
    "__docId__": 488,
    "kind": "method",
    "name": "startSync",
    "memberof": "src/index.js~Wallet",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/index.js~Wallet#startSync",
    "access": "public",
    "description": "The method starts synchronization of selected coin wallet",
    "lineNumber": 203,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} Returns object with synchronization information"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Object} sync"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} sync.address - Ethereum wallet address"
      },
      {
        "tagName": "@returns",
        "tagValue": "{number} sync.balance - Ethereum balance in wei"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Array} sync.transactions - The list of Ethereum transactions"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "coin",
        "description": "Coin ticker (required)"
      },
      {
        "nullable": null,
        "types": [
          "number, string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Type of coin (optional)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "sync.transactions - The list of Ethereum transactions"
    }
  },
  {
    "__docId__": 489,
    "kind": "method",
    "name": "makeRawBtcTx",
    "memberof": "src/index.js~Wallet",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/index.js~Wallet#makeRawBtcTx",
    "access": "public",
    "description": "The method returns a raw BTC transaction",
    "lineNumber": 246,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} Returns object with transaction hash and raw transaction data"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} hash - Transaction hash"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} tx - Raw Bitcoin transaction"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.inputs",
        "description": "List of transaction inputs. Input contains the following parameters:\ntransaction hash, output n, address, value, script and private key in WIF format"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.outputs",
        "description": "List of transaction outpus. Output contains the following parameters: address and value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "tx - Raw Bitcoin transaction"
    }
  },
  {
    "__docId__": 490,
    "kind": "method",
    "name": "makeRawBchTx",
    "memberof": "src/index.js~Wallet",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/index.js~Wallet#makeRawBchTx",
    "access": "public",
    "description": "The method returns a raw BCH transaction",
    "lineNumber": 262,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} Returns object with transaction hash and raw transaction data"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} hash - Transaction hash"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} tx - Raw Bitcoin Cash transaction"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.inputs",
        "description": "List of transaction inputs. Input contains the following parameters:\ntransaction hash, output n, address, value in satoshis, script and private key in WIF format"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.outputs",
        "description": "List of transaction outpus. Output contains the following parameters: address and value in satoshis"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "tx - Raw Bitcoin Cash transaction"
    }
  },
  {
    "__docId__": 491,
    "kind": "method",
    "name": "makeRawDogeTx",
    "memberof": "src/index.js~Wallet",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/index.js~Wallet#makeRawDogeTx",
    "access": "public",
    "description": "The method returns a raw BCH transaction",
    "lineNumber": 278,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} Returns object with transaction hash and raw transaction data"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} hash - Transaction hash"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} tx - Raw Bitcoin Cash transaction"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.inputs",
        "description": "List of transaction inputs. Input contains the following parameters:\ntransaction hash, output n, address, value in satoshis, script and private key in WIF format"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.outputs",
        "description": "List of transaction outpus. Output contains the following parameters: address and value in satoshis"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "tx - Raw Bitcoin Cash transaction"
    }
  },
  {
    "__docId__": 492,
    "kind": "method",
    "name": "makeRawEthTx",
    "memberof": "src/index.js~Wallet",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/index.js~Wallet#makeRawEthTx",
    "access": "public",
    "description": "The method returns a raw ETH transaction",
    "lineNumber": 297,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} Returns object with transaction hash and raw transaction data"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} hash - Transaction hash"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} tx - Raw Ethereum transaction"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.address",
        "description": "Ethereum address"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.amount",
        "description": "The transaction's amount in wei"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.nonce",
        "description": "The transaction's nonce"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.gasPrice",
        "description": "The transaction's gas price in wei"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.gasLimit",
        "description": "The transaction's gas limit"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.privateKey",
        "description": "Private key of ether wallet in hex"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "tx - Raw Ethereum transaction"
    }
  },
  {
    "__docId__": 493,
    "kind": "method",
    "name": "calculateFee",
    "memberof": "src/index.js~Wallet",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/index.js~Wallet#calculateFee",
    "access": "public",
    "description": "This method generates a list of transaction fees for the selected currency",
    "lineNumber": 313,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array>} The list of transaction fees"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.currency",
        "description": "Selected currency. BTC, ETH, BCH or BTCV"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.addressType",
        "description": "Address type. Required for BTC transaction. Supported types are p2pkh or p2wpkh"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.account",
        "description": "Account number. Required for ETH transaction"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.amount",
        "description": "Amount of transaction"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.customFee",
        "description": "Custom fee per byte"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.size",
        "description": "Transaction size. Relevant for bitcoin transactions"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array>"
      ],
      "spread": false,
      "description": "The list of transaction fees"
    }
  },
  {
    "__docId__": 494,
    "kind": "method",
    "name": "makeTransaction",
    "memberof": "src/index.js~Wallet",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/index.js~Wallet#makeTransaction",
    "access": "public",
    "description": "Wrapper for the compilation of transactions of bitcoin and ether",
    "lineNumber": 346,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>}"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} hash - Transaction hash"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} tx - Raw bitcoin or ethereum transaction"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.currency",
        "description": "Transaction currency"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.addressType",
        "description": "Address type. Required for BTC transaction. Supported types are p2pkh or p2wpkh"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.account",
        "description": "Account number. Required for ETH transaction"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data.tx",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.tx.addressTo",
        "description": "Recipient address"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.tx.amount",
        "description": "Transaction amount"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.tx.fee",
        "description": "Transaction fee"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "tx - Raw bitcoin or ethereum transaction"
    }
  },
  {
    "__docId__": 495,
    "kind": "method",
    "name": "setApiEndpoint",
    "memberof": "src/index.js~Wallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Wallet#setApiEndpoint",
    "access": "public",
    "description": "Sets the API Endpoint",
    "lineNumber": 375,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "api.btc",
        "description": "Url address of bitcoin endpoint"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "api.btcFee",
        "description": "Url address of bitcoin fee endpoint"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "api.eth",
        "description": "Url address of ethereum endpoint"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "api.bch",
        "description": "Url address of bitcoin cash endpoint"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "api.btcv",
        "description": "Url address of bitcoin vault endpoint"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "api.doge",
        "description": "Url address of dogecoin endpoint"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "api.dogeFee",
        "description": "Url address of dogecoin endpoint"
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    },
    "return": null
  },
  {
    "__docId__": 497,
    "kind": "method",
    "name": "setHeaders",
    "memberof": "src/index.js~Wallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Wallet#setHeaders",
    "access": "public",
    "description": "Set request headers",
    "lineNumber": 396,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    },
    "params": [
      {
        "name": "headers",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 498,
    "kind": "get",
    "name": "Core",
    "memberof": "src/index.js~Wallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Wallet#Core",
    "access": "public",
    "description": null,
    "lineNumber": 400,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 499,
    "kind": "get",
    "name": "getApiState",
    "memberof": "src/index.js~Wallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Wallet#getApiState",
    "access": "public",
    "description": null,
    "lineNumber": 404,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 500,
    "kind": "file",
    "name": "src/utils/crypto.js",
    "content": "import hexEncoding from 'crypto-js/enc-hex'\nimport RIPEMD160 from 'crypto-js/ripemd160'\nimport SHA256 from 'crypto-js/sha256'\nimport SHA3 from 'crypto-js/sha3'\nimport {UVarInt} from '@/utils/varint'\n\n/**\n * Computes a single SHA256 digest.\n * @param {string} hex message to hash\n * @returns {string} hash output\n */\nexport const sha256 = (hex) => {\n  if (typeof hex !== 'string') throw new Error('sha256 expects a hex string')\n  if (hex.length % 2 !== 0) throw new Error(`invalid hex string length: ${ hex }`)\n  const hexEncoded = hexEncoding.parse(hex)\n  return SHA256(hexEncoded).toString()\n}\n\n/**\n * Computes a single SHA3 (Keccak) digest.\n * @param {string} hex message to hash\n * @returns {string} hash output\n */\nexport const sha3 = (hex) => {\n  if (typeof hex !== 'string') throw new Error('sha3 expects a hex string')\n  if (hex.length % 2 !== 0) throw new Error(`invalid hex string length: ${ hex }`)\n  const hexEncoded = hexEncoding.parse(hex)\n  return SHA3(hexEncoded).toString()\n}\n\n/**\n * Computes a SHA256 followed by a RIPEMD160.\n * @param {string} hex message to hash\n * @returns {string} hash output\n */\nexport const sha256ripemd160 = (hex) => {\n  if (typeof hex !== 'string')\n    throw new Error('sha256ripemd160 expects a string')\n  if (hex.length % 2 !== 0) throw new Error(`invalid hex string length: ${ hex }`)\n  const hexEncoded = hexEncoding.parse(hex)\n  const ProgramSha256 = SHA256(hexEncoded)\n  return RIPEMD160(ProgramSha256).toString()\n}\n\n/**\n * @param {arrayBuffer} arr\n * @returns {string} HEX string\n */\nexport const ab2hexstring = (arr) => {\n  if (typeof arr !== 'object') {\n    throw new Error('ab2hexstring expects an array')\n  }\n  let result = ''\n  for (let i = 0; i < arr.length; i++) {\n    let str = arr[i].toString(16)\n    str = str.length === 0 ? '00' : str.length === 1 ? '0' + str : str\n    result += str\n  }\n  return result\n}\n\n/**\n * prefixed with bytes length\n * @category amino\n * @param {Buffer} bytes\n * @return {Buffer} with bytes length prefixed\n */\nexport const encodeBinaryByteArray = (bytes) => {\n  const lenPrefix = bytes.length\n\n  return Buffer.concat([UVarInt.encode(lenPrefix), bytes])\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/utils/crypto.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 501,
    "kind": "function",
    "name": "sha256",
    "memberof": "src/utils/crypto.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/crypto.js~sha256",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/utils/crypto.js",
    "importStyle": "{sha256}",
    "description": "Computes a single SHA256 digest.",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} hash output"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hex",
        "description": "message to hash"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "hash output"
    }
  },
  {
    "__docId__": 502,
    "kind": "function",
    "name": "sha3",
    "memberof": "src/utils/crypto.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/crypto.js~sha3",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/utils/crypto.js",
    "importStyle": "{sha3}",
    "description": "Computes a single SHA3 (Keccak) digest.",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} hash output"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hex",
        "description": "message to hash"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "hash output"
    }
  },
  {
    "__docId__": 503,
    "kind": "function",
    "name": "sha256ripemd160",
    "memberof": "src/utils/crypto.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/crypto.js~sha256ripemd160",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/utils/crypto.js",
    "importStyle": "{sha256ripemd160}",
    "description": "Computes a SHA256 followed by a RIPEMD160.",
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} hash output"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hex",
        "description": "message to hash"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "hash output"
    }
  },
  {
    "__docId__": 504,
    "kind": "function",
    "name": "ab2hexstring",
    "memberof": "src/utils/crypto.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/crypto.js~ab2hexstring",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/utils/crypto.js",
    "importStyle": "{ab2hexstring}",
    "description": "",
    "lineNumber": 49,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} HEX string"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "arrayBuffer"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "HEX string"
    }
  },
  {
    "__docId__": 505,
    "kind": "function",
    "name": "encodeBinaryByteArray",
    "memberof": "src/utils/crypto.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/crypto.js~encodeBinaryByteArray",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/utils/crypto.js",
    "importStyle": "{encodeBinaryByteArray}",
    "description": "prefixed with bytes length",
    "lineNumber": 68,
    "unknown": [
      {
        "tagName": "@category",
        "tagValue": "amino"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "bytes",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": "with bytes length prefixed"
    }
  },
  {
    "__docId__": 506,
    "kind": "file",
    "name": "src/utils/varint.js",
    "content": "import BN from \"bn.js\"\n\nfunction VarIntFunc(signed) {\n  const encodingLength = (n) => {\n    if (signed) n *= 2\n    if (n < 0) {\n      throw Error(\"varint value is out of bounds\")\n    }\n    const bits = Math.log2(n + 1)\n    return Math.ceil(bits / 7) || 1\n  }\n  \n  const encode = (n, buffer, offset) => {\n    if (n < 0) {\n      throw Error(\"varint value is out of bounds\")\n    }\n    \n    buffer = buffer || Buffer.alloc(encodingLength(n))\n    offset = offset || 0\n    const nStr = n.toString()\n    let bn = new BN(nStr, 10)\n    const num255 = new BN(0xff)\n    const num128 = new BN(0x80)\n    \n    // amino signed varint is multiplied by 2\n    if (signed) {\n      bn = bn.muln(2)\n    }\n    \n    let i = 0\n    while (bn.gten(0x80)) {\n      buffer[offset + i] = bn.and(num255).or(num128).toNumber()\n      bn = bn.shrn(7)\n      i++\n    }\n    \n    buffer[offset + i] = bn.andln(0xff)\n    \n    // TODO\n    // encode.bytes = i + 1\n    \n    return buffer\n  }\n  \n  /**\n   * https://github.com/golang/go/blob/master/src/encoding/binary/varint.go#L60\n   */\n  const decode = (bytes) => {\n    let x = 0\n    let s = 0\n    for (let i = 0, len = bytes.length; i < len; i++) {\n      const b = bytes[i]\n      if (b < 0x80) {\n        if (i > 9 || (i === 9 && b > 1)) {\n          return 0\n        }\n        return x | (b << s)\n      }\n      x |= (b & 0x7f) << s\n      s += 7\n    }\n    \n    return 0\n  }\n  \n  return { encode, decode, encodingLength }\n}\n\nexport const UVarInt = VarIntFunc(false)\nexport const VarInt = VarIntFunc(true)\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/utils/varint.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 507,
    "kind": "function",
    "name": "VarIntFunc",
    "memberof": "src/utils/varint.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/varint.js~VarIntFunc",
    "access": "public",
    "export": false,
    "importPath": "lumi-web-core/src/utils/varint.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "signed",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"encode\": *, \"decode\": *, \"encodingLength\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 508,
    "kind": "variable",
    "name": "UVarInt",
    "memberof": "src/utils/varint.js",
    "static": true,
    "longname": "src/utils/varint.js~UVarInt",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/utils/varint.js",
    "importStyle": "{UVarInt}",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 509,
    "kind": "variable",
    "name": "VarInt",
    "memberof": "src/utils/varint.js",
    "static": true,
    "longname": "src/utils/varint.js~VarInt",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/utils/varint.js",
    "importStyle": "{VarInt}",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 510,
    "kind": "file",
    "name": "src/workers/wallet.worker.js",
    "content": "import WalletWrapper from '@/class/WalletWrapper'\n\nlet Wrapper = {}\n\n/**\n * Creating a wallet core\n *\n * @param {Object} payload - Data for creating a core. Include in the creation method and mnemonic or key\n * @param {number} id - Promise id\n * @returns {Promise<Object>} Returns information about the core\n */\n\nasync function create (payload, id) {\n  try {\n    Wrapper = new WalletWrapper(payload)\n    await Wrapper.Create()\n    postMessage({\n      id,\n      payload: Wrapper.core.DATA\n    })\n  }\n  catch (e) {\n    postMessage({\n      id,\n      error: e.message\n    })\n  }\n}\n\n/**\n * Creating a core for each supported currency type\n *\n * @param payload - Array of coins to create cores for\n * @param id - Promise id\n * */\n\nasync function createCoins (payload, id) {\n  try {\n    const cores = await Wrapper.CreateCoins(payload)\n    postMessage({\n      id,\n      payload: cores\n    })\n  }\n  catch (e) {\n    postMessage({\n      id,\n      error: e.message\n    })\n  }\n}\n\n/**\n * Creating a transaction or getting fee\n *\n * @param payload - Transaction method and input data for the transaction\n * @param id - Promise id\n * @returns {Promise<Object>} Returns information about the success or failure of sending a transaction.\n * Or it returns the fee list\n */\n\nasync function transaction (payload, id) {\n  try {\n    let txs = await Wrapper.Transaction(payload)\n    postMessage({\n      id,\n      payload: txs\n    })\n  }\n  catch (e) {\n    postMessage({\n      id,\n      error: e.message\n    })\n  }\n}\n\n/**\n * Handler that runs the main wallet methods.\n * Methods such as create, sync, transaction and getNodes\n * @param e - event. Get parameters id and payload from the e.data object\n * @returns {Promise<Object>} Returns a data set that depends on the specific method\n */\n\n/* eslint-disable no-undef */\nonmessage = async (e) => {\n  const {id, payload} = e.data\n  \n  if (\n    !payload ||\n    !payload.hasOwnProperty('method') ||\n    !payload.hasOwnProperty('value')\n  ) {\n    postMessage({\n      id,\n      payload: 'error'\n    })\n    return\n  }\n  \n  switch (payload.method) {\n    case 'create':\n      return await create(payload.value, id)\n    case 'createCoins':\n      return await createCoins(payload.value, id)\n    case 'sync':\n      const syncRes = await Wrapper.Sync(payload.value)\n      postMessage({\n        id,\n        payload: syncRes\n      })\n      break\n    case 'transaction':\n      return transaction(payload.value, id)\n    case 'getNodes':\n      const nodes = await Wrapper.core.getChildNodes(payload.value)\n      postMessage({\n        id,\n        payload: nodes\n      })\n      break\n    case 'setHeaders':\n      Wrapper.headers = payload.value\n      break\n    default:\n      postMessage({\n        id,\n        payload: 'worker error'\n      })\n  }\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/workers/wallet.worker.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 511,
    "kind": "variable",
    "name": "Wrapper",
    "memberof": "src/workers/wallet.worker.js",
    "static": true,
    "longname": "src/workers/wallet.worker.js~Wrapper",
    "access": "public",
    "export": false,
    "importPath": "lumi-web-core/src/workers/wallet.worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 512,
    "kind": "function",
    "name": "create",
    "memberof": "src/workers/wallet.worker.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/workers/wallet.worker.js~create",
    "access": "public",
    "export": false,
    "importPath": "lumi-web-core/src/workers/wallet.worker.js",
    "importStyle": null,
    "description": "Creating a wallet core",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} Returns information about the core"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "payload",
        "description": "Data for creating a core. Include in the creation method and mnemonic or key"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Promise id"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "Returns information about the core"
    },
    "ignore": true
  },
  {
    "__docId__": 513,
    "kind": "function",
    "name": "createCoins",
    "memberof": "src/workers/wallet.worker.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/workers/wallet.worker.js~createCoins",
    "access": "public",
    "export": false,
    "importPath": "lumi-web-core/src/workers/wallet.worker.js",
    "importStyle": null,
    "description": "Creating a core for each supported currency type",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "payload",
        "description": "Array of coins to create cores for"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Promise id"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 514,
    "kind": "function",
    "name": "transaction",
    "memberof": "src/workers/wallet.worker.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/workers/wallet.worker.js~transaction",
    "access": "public",
    "export": false,
    "importPath": "lumi-web-core/src/workers/wallet.worker.js",
    "importStyle": null,
    "description": "Creating a transaction or getting fee",
    "lineNumber": 62,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} Returns information about the success or failure of sending a transaction.\nOr it returns the fee list"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "payload",
        "description": "Transaction method and input data for the transaction"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Promise id"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "Returns information about the success or failure of sending a transaction.\nOr it returns the fee list"
    },
    "ignore": true
  },
  {
    "kind": "index",
    "content": "[![License](https://img.shields.io/badge/license-MIT-green.svg?style=flat)](https://mit-license.org)\n[![NPM](https://img.shields.io/npm/v/lumi-web-core.svg)](https://www.npmjs.org/package/lumi-web-core)\n\n![lumicore](https://user-images.githubusercontent.com/63342220/80406279-7c663380-88cc-11ea-8b06-07825767b288.png)\n\n# LumiCore\nThe LumiCore library is an implementation of tools for working with Bitcoin, Ethereum, Bitcoin Cash, Bitcoin Vault and Dogecoin. It allows to create and work with mnemonic following the BIP39 standard, to run the private/public keys derivation tree following the BIP44 standard and sign transactions.\n\n> Work of this module has been tested in applications at the Vue.js. You can find it [here](https://github.com/lumiwallet/lumi-web-core-app).\n\n**Note**: Node version >= 10.19.0\n\n## Installation\nYou can install the package via npm\n``` console\nnpm install lumi-web-core\n```\nOr via yarn:\n``` console\nyarn add lumi-web-core\n```\n\n## Usage\n\n> **Warning!** Do not use the mnemonic, keys, and addresses provided in this readme for real transactions!\n>\n### Create/import\nImport the module and create a new class:\n``` js\n// typical import\nimport Wallet from 'lumi-web-core'\n\nconst WALLET = new Wallet()\n```\nYou can create a new wallet by calling the method `createNew(count)`. Count is the number of words for the new mnemonic.\nBy default it is 12. It can be also  12, 15, 18, 21, and 24 words.\n``` js\n// Create a new wallet\nconst CORE = await WALLET.createNew(15)\n```\nYou can create a wallet based on an existing mnemonic, where mnemonic is a string consisting of words and spaces:\n``` js\n// Create wallet by new mnemonic\nconst CORE = await WALLET.createByMnemonic('ramp grief anger ... olive main into throw')\n```\nOr xprv key: \n``` js\n// Create wallet by xprv key\nconst CORE = await WALLET.createByKey('xprv9s21ZrQH143K49Xa838YbhNq...VtL5sLB9JsijRG51jHjuUSDVfDXPh5PFYNTqQ')\n```\nExample of the returned core:\n``` js\n{\n    mnemonic: \"ramp grief anger ... olive main into throw\",\n    xprv: \"xprv9s21ZrQH143K49Xa838YbhNq...VtL5sLB9JsijRG51jHjuUSDVfDXPh5PFYNTqQ\",\n    from: \"mnemonic\",\n    hdkey: Object,\n    seed: Uint8Array(64),\n    seedInHex: \"1f53c65842ed3d0c54052f7f7315dbd9dcb...4af426ffb27234a0a571c44e29c1f4d1b181082e62d0a39\"\n}\n```\nAfter that, call the `createCoinsCores()` method to create cores for specific currencies.\n``` js\nconst coins = [\n    {coin: 'BTC', type: 'p2pkh'},\n    {coin: 'BTC', type: 'p2wpkh'},\n    {coin: 'ETH', type: 0},\n    {coin: 'BCH'},\n    {coin: 'BTCV'},\n    {coin: 'DOGE'},\n    {coin: 'BNB'}\n]\nconst CORES = await WALLET.createCoins(coins)\n=> {\n    BTC: {\n        p2pkh: {\n            externalNode: Object,\n            internalNode: Object,\n            externalAddress: \"1PtMtCbtgb...bivNJU5Ww3bvF3\",\n            internalAddress: \"1LvXQnwCeq...GyfMNtxpyEd3Hx\",\n            dp: {external: \"m/44'/0'/0'/0\", internal: \"m/44'/0'/0'/1\"}\n        },\n        p2wpkh: {\n            externalNode: Object,\n            internalNode: Object,\n            externalAddress: \"bc1qyluu9yjfw6...xjfjy0ht8hszx\",\n            internalAddress: \"bc1qnk6r09q97m...w9vme4zjvpct0\",\n            dp: {external: \"m/84'/0'/0'/0\", internal: \"m/84'/0'/0'/1\"}\n        }\n    },\n    ETH: {\n        0: {\n            dp: \"m/44'/60'/0'/0/0\",\n            externalAddress: \"0xcf06fa556d8ad...cc285e2b7bdf58c58\",\n            node: Object,\n            privateKey: Buffer,\n            privateKeyHex: \"0xb1f8f5df78d5a00d...6b222e54ee8abbfe6af\",\n            publicKey: Buffer,\n        }\n    },\n    BTCV: {\n        p2wpkh: {\n            dp: {external: \"m/84'/440'/0'/0\", internal: \"m/84'/440'/0'/1\"},\n            externalAddress: \"royale1q2cy79nu...am6t5svnvt9d62\",\n            externalNode: Object,\n            internalAddress: \"royale1qe9286wc4...tlqxj9sz0t7m9dg5q\",\n            internalNode: Object\n        }\n    },\n    BCH: {\n        p2pkh: {\n            dp: {external: \"m/44'/145'/0'/0\", internal: \"m/44'/145'/0'/1\"},\n            externalAddress: \"1Nbi1Roep9...SeJKwQTdFESB\",\n            externalNode: Object,\n            internalAddress: \"1135Eji7Yoop...rKJmGFi2RyX\",\n            internalNode: Object\n        }\n    },\n    DOGE: {\n        p2pkh: {\n            dp: {external: \"m/44'/3'/0'/0\", internal: \"m/44'/3'/0'/1\"},\n            externalAddress: \"DLXryK9F7k...BMrcqFMci\",\n            externalNode: Object,\n            internalAddress: \"DKqyuCkSYJXt...PxnYcUxM'\",\n            internalNode: Object\n        }\n    },\n    BNB: {\n      p2pkh: {\n        node: Object,\n        privateKey: Buffer,\n        privateKeyHex: '036852f55d1b759...2de02c72a47fea1c592',\n        publicKey: Buffer,\n        publicKeyHex: '03ec67b0636efb9e543e..4d7b458e52d9dd301da99',\n        externalAddress: 'bnb1kd4kt7x505l...9qlxp7x365ld8fkt',\n        dp: 'm/44\\'/714\\'/0\\'/0/0'\n      }\n    }\n```\nFor BTC and ETH coins, the type parameter is required.\nFor BTC, it can take the values p2pkh or p2wpkh (p2pkh by default).\nFor ETH, the type parameter is set to the account number (0 by default).\n\n### Derivation\nYou can get information about a child node using the method `getChildNodes`.\n``` js\nconst data = {\n    path: \"m/44'/0'/0'/0\",\n    from: 0,\n    to: 20,\n    coins: [\n        {coin: 'BTC', type: 'p2pkh'},\n        {coin: 'BTC', type: 'p2wpkh'},\n        {coin: 'ETH', type: 0},\n        {coin: 'BCH'},\n        {coin: 'BTCV'},\n        {coin: 'DOGE'},\n        {coin: 'BNB'}\n    ]\n}\n\nconst info = await WALLET.getChildNodes(data)\n=> {\n    node: {\n        privateExtendedKey: \"xprvA1CHKT9koKiKuhkeZ6XJxWXEQ1r...va4RtZfFmdYaQeNW72vX9q2DjMo3fsJwxCtkrVXyo2QP8\",\n        publicExtendedKey: \"xpub6EBdixgedhGd8Bq7f84KKeTxx3gYWQ...bn9YVZ8PVXb6tTnCWTorLQPKqRggvdzyHH1TkoR7vuz\"\n    },\n    list: [\n        {\n            path: \"m/44'/0'/0'/0/0\",\n            privateKey: \"KzwMNQ93Dt96Qg...mRpaBCmEXGH2Lpgr2dGZsV\",\n            publicKey: \"023b693fa7fa22e505...4cc450a463c024ab1e3ec526ba\",\n            bchAddress: \"bitcoincash:qqtne...l889v5ee6nawwvvx6t7mvkp\",\n            btcvAddress: \"royale1qzu70e44r...8eeet9xww5ltnnr6akytm\",\n            ethAddress: \"0xdd6f3cc0ed5f9...b09481090536e446ebd3\",\n            p2pkhAddress: \"137sbugaaqw3H...LZzNX3nTk1LDgCYd\",\n            p2wpkhAddress: \"bc1qzu70e44r...eet9xww5ltnnrm5mjxk\",\n            dogeAddress: 'DS58JVRHdU...zuBNNVLFo4UaTn',\n            bnbAddress: 'bnb1hvw4qlty...7xm9g3fdsrcqzzkh'\n        },\n        ...\n    ]\n}\n```\n`path` this is a string with a derivation path. The path should begin with `m/44'`.\n`from` is top of the range derivation\n`to` is end of the range derivation\n`coins` is a list of currencies for which you need to generate addresses\n\n### Creating a BTC transaction\nCreation of P2PKH or P2WPKH transactions is supported.\nTo create a Bitcoin transaction you need to send a set of inputs and outputs to the `makeRawBtcTx` method:\n``` js\nconst data = {\n    inputs: [\n        {\n            address: \"1BYRALP...ypWzTQE8BkEL\",\n            value: 10000,\n            tx_output_n: 0,\n            tx: '01000000014b172c2...0983ce0e044d91cea88ac00000000', // Raw transaction (only for P2PKH transactions)\n            tx_hash_big_endian: \"de06df091735...afd145eecfcd5649634e1d5221\",\n            key: 'L3YFJ4cBDYhZ...bzqgSUxLjTAorR5Kc47mP6x1D'\n        },\n        {\n            address: \"1BYRALPU...kLypWzTQE8BkEL\",\n            value: 10000,\n            tx_output_n: 0,\n            tx: '01000000014b172c2...0983ce0e044d91cea88ac00000000', // Raw transaction (only for P2PKH transactions)\n            tx_hash_big_endian: \"47e497fd8f6f4...5c2043e0a3c7ee0463cbc68e9\",\n            key: 'L3YFJ4cBDYhZ...xLjTAorR5Kc4AorR5K7mP6x1D'\n        }\n    ],\n    outputs: [\n        {\n            address: '1NuABwx...5V5tiXpshAWb8W',\n            value: 15000\n        },\n        {\n            address: '1PbQ36GvG...nimPD7gHPQFk3Nu',\n            value: 5000\n        }\n    ]\n}\n\nconst btc_tx = await WALLET.makeRawBtcTx(data)\n```\nWhen the transaction is created successfully, an object with the transaction hash and raw tx data is returned\n``` js\nbtc_tx => {\n    hash: '6b4a00f9fd4e5c263b5af65fed0...14cafb97e0f5738cb4a8717',\n    tx: '010000000221521d4e634956cdcfee45d1afbe79080a...04f3d76f2c65501976a914fbf7f38b23308227a308fffff88ac00000000'\n}\n```\n\n### Creating an ETH transaction\nTo make a Ethereum transaction you need to fill in the following params:\n``` js\nconst data = {\n    nonce: 280,\n    amount: 100000000000000,\n    address: '0x1e8d99d2278...d89983e2920df33b485',\n    gasPrice: 19950000002,\n    gasLimit: 21000,\n    privateKey: '0xd27c8544f946bd2a5456...d174e64e4a03030917bb8313'\n}\n\nconst eth_tx = await WALLET.makeRawEthTx(data)\n```\n\nWhen the transaction is created successfully, an object with the transaction hash and raw tx data is returned\n``` js\neth_tx => {\n    hash: '0xcb3869c19f2462a572a5ff13...d67ca71c181452e52a698d035209',\n    tx: '0xf86c8201188504a51cd782825208...6df4207768a01789b726296195a956ceb3dbe73798'\n}\n```\n\n### Creating a BCH transaction\nTo create a Bitcoin Cash transaction you need to send a set of inputs and outputs to the `makeRawBchTx` method:\n``` js\nconst data = {\n    inputs: [\n        {\n            address: \"bitcoincash:qzq29...rfavhxrhwvgm49vlhq\",\n            outputIndex: 1,\n            satoshis: 604909,\n            script: \"76a91480a2a2...81a7acb98777388ac\",\n            txId: \"0488b0c6678e527...5307ce7ddaa8cbc986e616\",\n            key: \"KxMvzeEuGyrBRo...mfR9uzU6bAuc6kyXTmN8h\"\n        }\n    ],\n    outputs: [\n        {\n            address: \"bitcoincash:qzdss...rfpnawutm9vlrh7wdcj\",\n            satoshis: 100000\n        },\n        {\n            address: \"bitcoincash:qr30f7...23hykq2fu3axuxec3g6c6\",\n            satoshis: 504231\n        }\n    ]\n}\n\nconst bch_tx = await WALLET.makeRawBchTx(data)\n```\nAddresses included in inputs and outputs can be CashAddr format or Legacy format.\nWhen the transaction is created successfully, an object with the transaction hash and raw tx data is returned\n``` js\nbch_tx => {\n    hash: 'ac5cd881770c28aad990...5d181df4b7d5a9acfec3bdf',\n    tx: '020000000116e686c9cba8da7dce075...edac9eff87677eccaa372580a4f23d3788ac00000000'\n}\n```\n\nFor more information, see the [docs](https://lumiwallet.github.io/lumi-web-core/).\n\n### Creating a BTCV transaction\nTo create a Bitcoin Vault transaction you need to send a set of inputs and outputs to the `makeRawBtcvTx` method:\n``` js\nconst data = {\n    inputs: [\n        {\n            hash: '6e87ad9bf88f7ad02bb4...65bdc31547de6c7293348',\n            index: 0,\n            value: 3000,\n            key: 'L4Whg5XDChoMm6YqfE...eDFmWwUJCxcuZ8Zk7edGUA' \n        }\n    ],\n    outputs: [\n        {\n            address: 'royale1qy6wrkv3...7nqla7dlyjd8cj83kdn0',\n            value: 1000\n        },\n        {\n            address: 'royale1q8lvf3v...j9vlu3py02klanwmzshvk',\n            value: 1571\n        }\n    ]\n}\n\nconst btcv_tx = await WALLET.makeRawBtcvTx(data)\n```\nWhen the transaction is created successfully, an object with the transaction hash and raw tx data is returned\n``` js\nbtcv_tx => {\n    hash: '98f5f94267101de83364...b4a9c74a26a05b90d4381f9479710',\n    tx: '01000000000101483329c7e67d5431dc5...c6d8daeeb40e248438119513fb455d38100000000'\n}\n```\n\n### Creating a DOGE transaction\nTo create a Dogecoin transaction you need to send a set of inputs and outputs to the `makeRawDogeTx` method:\n``` js\nconst data = {\n    inputs: [\n        {\n            hash: '49a8205185d60d66273b...d9c9d63d8e359b0c3c93a21',\n            index: 0,\n            address: 'DA7wKChj5Zi...Z84VwfS1BqcPczk',\n            value: 100000000,\n            key: 'L2Zr1gYfWUWahL...28a2AQkxGD9KhNtrb',\n            tx: '0100000002789f2641b132b219f...3a65a75888226819f66c4d4b7debc9'\n        }\n    ],\n    outputs: [\n        {\n            address: 'DGzBtLKz99r...tEEw5kQio',\n            value: 35600000\n        },\n        {\n            address: 'DQ52GryK3ni...ZjpnKHH8UY',\n            value: 64400000\n        }\n    ]\n}\n\nconst doge_tx = await WALLET.makeRawDogeTx(data)\n```\nWhen the transaction is created successfully, an object with the transaction hash and raw tx data is returned\n``` js\ndoge_tx => {\n    hash: ' 0e2578db7490a13855696...e3b2e689b89c63a55634b1a58',\n    tx: '0100000002213ac9c3b059e3d863...88c983930f02d9f636f5e354088ac00000000'\n}\n```\n\n## Nist testing\nTesting [documentation](./nist/README.md).\n\n## Created using\n* [bip39](https://github.com/bitcoinjs/bip39)\n* [bip39-checker](https://github.com/jcalfee/bip39-checker)\n* [bitcoinjs-lib](https://github.com/bitcoinjs/bitcoinjs-lib)\n* [ethereumjs-tx](https://github.com/ethereumjs/ethereumjs-vm/tree/master/packages/tx)\n* [ethereumjs-util](https://github.com/ethereumjs/ethereumjs-util)\n* [hdkey](https://github.com/cryptocoinjs/hdkey)\n* [web3-utils](https://github.com/ethereum/web3.js)\n* [wif](https://github.com/bitcoinjs/wif)\n* [worker-loader](https://github.com/webpack-contrib/worker-loader)\n* [bitcore-lib-cash](https://github.com/bitpay/bitcore/tree/master/packages/bitcore-lib-cash)\n* [bchaddrjs](https://github.com/ealmansi/bchaddrjs)\n## License\n\nLumiCore is available under the MIT license. See the [LICENSE](LICENSE) file for more info.\n",
    "longname": "/Users/user/work/lumi-web-core/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"lumi-web-core\",\n  \"description\": \"Lumi Wallet Core - Web Version\",\n  \"version\": \"1.7.0\",\n  \"author\": {\n    \"name\": \"vikowl\",\n    \"email\": \"vd@lumiwallet.com\"\n  },\n  \"main\": \"dist/index.js\",\n  \"license\": \"MIT\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/lumiwallet/lumi-web-core\"\n  },\n  \"homepage\": \"https://github.com/lumiwallet/lumi-web-core\",\n  \"keywords\": [\n    \"lumi\",\n    \"crypto\",\n    \"wallet\",\n    \"client-side\",\n    \"web\",\n    \"app\"\n  ],\n  \"bugs\": {\n    \"url\": \"https://github.com/lumiwallet/lumi-web-core/issues\"\n  },\n  \"dependencies\": {\n    \"@babel/runtime\": \"^7.11.2\",\n    \"bchaddrjs\": \"^0.4.9\",\n    \"bech32\": \"^1.1.4\",\n    \"bip39\": \"^3.0.2\",\n    \"bip39-checker\": \"^1.1.7\",\n    \"bitcoinjs-lib\": \"^5.2.0\",\n    \"bitcore-lib-cash\": \"=8.22.1\",\n    \"bn.js\": \"^4.11.8\",\n    \"coininfo\": \"^5.1.0\",\n    \"crypto-js\": \"^4.0.0\",\n    \"elliptic\": \"^6.5.4\",\n    \"ethereumjs-tx\": \"^2.1.2\",\n    \"ethereumjs-util\": \"^6.2.1\",\n    \"hdkey\": \"^1.1.2\",\n    \"is_js\": \"^0.9.0\",\n    \"js-big-decimal\": \"^1.3.4\",\n    \"protocol-buffers-encodings\": \"^1.1.1\",\n    \"tiny-secp256k1\": \"^1.1.6\",\n    \"web3-utils\": \"^1.3.5\",\n    \"wif\": \"^2.0.6\",\n    \"worker-loader\": \"^3.0.8\"\n  },\n  \"devDependencies\": {\n    \"@babel/cli\": \"^7.11.6\",\n    \"@babel/core\": \"^7.11.6\",\n    \"@babel/plugin-syntax-dynamic-import\": \"^7.8.3\",\n    \"@babel/plugin-transform-runtime\": \"^7.11.5\",\n    \"@babel/preset-env\": \"^7.11.5\",\n    \"babel-jest\": \"^26.5.2\",\n    \"babel-loader\": \"^8.1.0\",\n    \"babel-plugin-module-resolver\": \"^4.0.0\",\n    \"commitizen\": \"^4.2.1\",\n    \"cz-conventional-changelog\": \"^3.2.0\",\n    \"esdoc\": \"^1.0.4\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^6.8.0\",\n    \"eslint-plugin-import\": \"^2.22.0\",\n    \"eslint-plugin-promise\": \"^4.2.1\",\n    \"eslint-plugin-sonarjs\": \"^0.5.0\",\n    \"eslint-plugin-standard\": \"^4.0.1\",\n    \"jest\": \"^26.5.2\",\n    \"jest-fetch-mock\": \"^3.0.3\",\n    \"randombytes\": \"^2.1.0\",\n    \"webpack\": \"^4.44.1\"\n  },\n  \"engines\": {\n    \"node\": \">= 10.19.0\"\n  },\n  \"files\": [\n    \"dist/\"\n  ],\n  \"scripts\": {\n    \"clean\": \"rm -rf dist\",\n    \"lint\": \"eslint --ext .js --ignore-path .gitignore .\",\n    \"precommit\": \"npm run lint\",\n    \"commit\": \"git-cz\",\n    \"prepare\": \"npm run build\",\n    \"build\": \"npm run clean && babel src --out-dir dist\",\n    \"test\": \"jest --updateSnapshot\",\n    \"test:coverage\": \"npm run test -- --coverage --watchAll=false\",\n    \"preversion\": \"npm run test && npm run doc\",\n    \"version\": \"npm run clean && npm run build\",\n    \"postversion\": \"git add . && git push && git push --tags\",\n    \"doc\": \"esdoc -c ./.esdoc\"\n  },\n  \"config\": {\n    \"commitizen\": {\n      \"path\": \"./node_modules/cz-conventional-changelog\"\n    }\n  },\n  \"jest\": {\n    \"moduleFileExtensions\": [\n      \"js\",\n      \"json\"\n    ],\n    \"roots\": [\n      \"<rootDir>/__tests__\"\n    ],\n    \"transform\": {\n      \"^.+\\\\.js$\": \"<rootDir>/node_modules/babel-jest\"\n    },\n    \"moduleNameMapper\": {\n      \"^@/(.*)$\": \"<rootDir>/src/$1\",\n      \"\\\\.worker.js\": \"<rootDir>/__mocks__/workerMock.js\"\n    },\n    \"collectCoverage\": true,\n    \"coverageReporters\": [\n      \"html\"\n    ]\n  }\n}\n",
    "longname": "/Users/user/work/lumi-web-core/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]