[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/Wrapper.js",
    "content": "import Worker from 'worker-loader!./workers/wallet.worker.js'\n\nconst resolves = {}\nconst rejects = {}\nlet globalMsgId = 0\n\n/**\n * Class Wrapper\n * @class\n *\n * Wrapper for communicating with Web Workers, using Promises\n */\n\nexport default class Wrapper {\n  constructor () {\n    this.worker = new Worker()\n    this.worker.onmessage = handleMsg\n  }\n  \n  /**\n   * Main class method. Send message to the worker\n   * @param {string} method - Method name\n   * @param {Object} value - Data set for a specific method\n   * @returns {*|Promise<Object>} - An object with data that depends on a specific method\n   */\n  method (method, value) {\n    return sendMsg({method, value}, this.worker)\n  }\n}\n\n/**\n * Activate calculation in the worker, returning a promise\n * @param {Object} payload\n * @param {worker} worker\n * @returns {Promise<Object>}\n */\n\nfunction sendMsg (payload, worker) {\n  const msgId = globalMsgId++\n\n  const msg = {\n    id: msgId,\n    payload\n  }\n\n  return new Promise(function (resolve, reject) {\n    resolves[msgId] = resolve\n    rejects[msgId] = reject\n    worker.postMessage(msg)\n  })\n}\n\n/**\n * Handle incoming calculation result\n * @param {Object} msg\n */\n\nfunction handleMsg (msg) {\n  const {id, error, payload} = msg.data\n  if (error) {\n    const reject = rejects[id]\n    if (reject) {\n      if (error) {\n        reject(error)\n      } else {\n        reject('Got nothing')\n      }\n    }\n  } else if (payload) {\n    const resolve = resolves[id]\n    if (resolve) {\n      resolve(payload)\n    }\n  }\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/Wrapper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "resolves",
    "memberof": "src/Wrapper.js",
    "static": true,
    "longname": "src/Wrapper.js~resolves",
    "access": "public",
    "export": false,
    "importPath": "lumi-web-core/src/Wrapper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "rejects",
    "memberof": "src/Wrapper.js",
    "static": true,
    "longname": "src/Wrapper.js~rejects",
    "access": "public",
    "export": false,
    "importPath": "lumi-web-core/src/Wrapper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "globalMsgId",
    "memberof": "src/Wrapper.js",
    "static": true,
    "longname": "src/Wrapper.js~globalMsgId",
    "access": "public",
    "export": false,
    "importPath": "lumi-web-core/src/Wrapper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "class",
    "name": "Wrapper",
    "memberof": "src/Wrapper.js",
    "static": true,
    "longname": "src/Wrapper.js~Wrapper",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/Wrapper.js",
    "importStyle": "Wrapper",
    "description": "Class Wrapper",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "\nWrapper for communicating with Web Workers, using Promises"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 53,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Wrapper.js~Wrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Wrapper.js~Wrapper#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "worker",
    "memberof": "src/Wrapper.js~Wrapper",
    "static": false,
    "longname": "src/Wrapper.js~Wrapper#worker",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "method",
    "memberof": "src/Wrapper.js~Wrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Wrapper.js~Wrapper#method",
    "access": "public",
    "description": "Main class method. Send message to the worker",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*|Promise<Object>} - An object with data that depends on a specific method"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "Method name"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Data set for a specific method"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*",
        "Promise<Object>"
      ],
      "spread": false,
      "description": "An object with data that depends on a specific method"
    }
  },
  {
    "__docId__": 56,
    "kind": "function",
    "name": "sendMsg",
    "memberof": "src/Wrapper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Wrapper.js~sendMsg",
    "access": "public",
    "export": false,
    "importPath": "lumi-web-core/src/Wrapper.js",
    "importStyle": null,
    "description": "Activate calculation in the worker, returning a promise",
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "payload",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "worker"
        ],
        "spread": false,
        "optional": false,
        "name": "worker",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 57,
    "kind": "function",
    "name": "handleMsg",
    "memberof": "src/Wrapper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Wrapper.js~handleMsg",
    "access": "public",
    "export": false,
    "importPath": "lumi-web-core/src/Wrapper.js",
    "importStyle": null,
    "description": "Handle incoming calculation result",
    "lineNumber": 58,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 58,
    "kind": "file",
    "name": "src/class/BCH/BitcoinCashTx.js",
    "content": "import converter from '@/helpers/converters'\nimport {calcBtcTxSize, getBtcPrivateKeyByIndex, makeRawBchTx} from '@/helpers/coreHelper'\nimport CustomError from '@/helpers/handleErrors'\n\n/**\n * List of available commission types for Bitcoin Cash transactions\n * @type {Array}\n */\n\nconst FEE_IDS = ['regular', 'custom']\n\n/**\n * Class BitcoinCashTx.\n * This class is responsible for calculating the fee,\n * calculating the available amount to send, and generating and signing a Bitcoin Cash transaction\n * @class\n */\n\nexport default class BitcoinCashTx {\n  /**\n   * Create a BitcoinCashTx\n   * @param {Object} data - Input data for generating a transaction, calculating a fee or available amount\n   * @param {Array} data.unspent - Array of unspent addresses\n   * @param {number} data.amount - Transaction amount\n   * @param {number} data.balance - Bitcoin Cash wallet balance\n   * @param {Array} data.feeList - Set of raw Bitcoin Cash fees\n   * @param {Object} data.customFee - Custom fee entered by the user\n   * @param {string} data.nodes - External and internal Bitcoin Cash nodes\n   * @param {string} data.internalAddress - Address for change\n   */\n  constructor (data) {\n    this.unspent = data.unspent\n    this.amount = data.amount ? converter.btc_to_sat(data.amount) : 0\n    this.balance = data.balance\n    this.customFee = +data.customFee ? +data.customFee : 0\n    this.nodes = data.nodes\n    this.internalAddress = data.internalAddress\n    this.fee = data.feeList\n    this.feeList = []\n    this.dust = 1000\n  }\n  \n  /**\n   * Calculating the fee amount\n   * @param {number} size - Transaction size\n   * @returns {Promise<Array>} Returns a set of fees for a specific transaction amount\n   */\n  \n  async calcFee (size = 0) {\n    const fees = [...this.fee.map(item => item.feePerByte), this.customFee]\n    \n    if (this.amount <= 0 || this.balance < this.amount) {\n      return this.calcEmptyFee(fees)\n    }\n    \n    const pArray = fees.map(async fee => {\n      return await this.getInputs(fee, size)\n    })\n    \n    const res = await Promise.all(pArray)\n    \n    this.feeList = res.map((item, i) => {\n      return {\n        id: FEE_IDS[i],\n        SAT: item.fee,\n        BCH: converter.sat_to_btc(item.fee),\n        fee: fees[i],\n        feeInBTC: converter.sat_to_btc(fees[i]),\n        inputs: item.inputs,\n        inputsAmount: item.inputsAmount,\n        custom: FEE_IDS[i] === 'custom'\n      }\n    })\n    \n    return this.feeList\n  }\n  \n  /**\n   * Sets an array of zero fees.\n   * Used when the user does not have enough funds for the transaction\n   * @param {Array} fees - set of commission types\n   * @returns {Array} Returns an array with zero fees\n   */\n  \n  calcEmptyFee (fees) {\n    this.feeList = fees.map((item, i) => {\n      return {\n        id: FEE_IDS[i],\n        SAT: 0,\n        BCH: 0,\n        fee: item,\n        feeInBTC: converter.sat_to_btc(item),\n        inputs: [],\n        inputsAmount: 0,\n        custom: FEE_IDS[i] === 'custom'\n      }\n    })\n    \n    return this.feeList\n  }\n  \n  /**\n   * Finds a list of inputs for a specific transaction\n   * @param {number} fee - Fee size\n   * @param {number} size - Transaction size\n   * @returns {Promise<Object>} Returns an object with a list of inputs, the total fee amount, and the total amount of all inputs\n   */\n  \n  async getInputs (fee, size) {\n    let index = 0\n    let inputsAmount = 0\n    let inputs = []\n    let res = {}\n    \n    this.dust = size ? 0 : 1000\n    \n    let req = async () => {\n      let item = this.unspent[index]\n      let defaultSize = calcBtcTxSize(index + 1, 2)\n      let calcFee = size ? size * fee : defaultSize * fee\n      \n      inputsAmount += item.satoshis\n      inputs.push(item)\n      \n      let total = this.amount + calcFee + this.dust\n      \n      if (total > inputsAmount) {\n        index++\n        \n        if (index >= this.unspent.length) {\n          res = {\n            fee: 0,\n            inputs: [],\n            inputsAmount: 0\n          }\n        } else {\n          await req()\n        }\n      } else {\n        res = {\n          fee: calcFee,\n          inputs: inputs,\n          inputsAmount: inputsAmount\n        }\n      }\n    }\n    await req()\n    \n    return res\n  }\n  \n  /**\n   * Creating a Bitcoin Cash transaction\n   * @param {Object} data - Input data for a transaction\n   * @param {string} data.addressTo - Recipient address\n   * @param {Object} data.fee - The transaction fee and list of inputs\n   * @returns {Promise<Object>} Returns the raw transaction and transaction hash if sent successfully\n   */\n  \n  async make (data) {\n    const {addressTo, fee} = data\n    \n    if (isNaN(this.amount)) {\n      throw new CustomError('err_tx_bch_amount')\n    }\n    \n    if (isNaN(fee.SAT)) {\n      throw new CustomError('err_tx_bch_fee')\n    }\n    \n    const inputsAmount = +fee.inputsAmount\n    const amount = +this.amount\n    const sat = +fee.SAT\n    const change = inputsAmount - amount - sat\n    let inputs = []\n    \n    for (const utxo of fee.inputs) {\n      let item = {\n        txId: utxo.txid,\n        outputIndex: utxo.vout,\n        address: utxo.cashAddress,\n        script: utxo.scriptPubKey,\n        satoshis: utxo.satoshis,\n        key: getBtcPrivateKeyByIndex(this.nodes[utxo.nodeType], utxo.deriveIndex)\n      }\n      \n      inputs.push(item)\n    }\n    \n    if (change >= 0) {\n      let params = {\n        inputs: inputs,\n        outputs: [\n          {\n            address: addressTo,\n            satoshis: amount\n          }\n        ]\n      }\n      \n      if (change !== 0) {\n        params.outputs[1] = {\n          address: this.internalAddress,\n          satoshis: change\n        }\n      }\n      \n      return makeRawBchTx(params)\n    } else {\n      throw new CustomError('err_tx_bch_balance')\n    }\n  }\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/class/BCH/BitcoinCashTx.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 59,
    "kind": "variable",
    "name": "FEE_IDS",
    "memberof": "src/class/BCH/BitcoinCashTx.js",
    "static": true,
    "longname": "src/class/BCH/BitcoinCashTx.js~FEE_IDS",
    "access": "public",
    "export": false,
    "importPath": "lumi-web-core/src/class/BCH/BitcoinCashTx.js",
    "importStyle": null,
    "description": "List of available commission types for Bitcoin Cash transactions",
    "lineNumber": 10,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 60,
    "kind": "class",
    "name": "BitcoinCashTx",
    "memberof": "src/class/BCH/BitcoinCashTx.js",
    "static": true,
    "longname": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/class/BCH/BitcoinCashTx.js",
    "importStyle": "BitcoinCashTx",
    "description": "Class BitcoinCashTx.\nThis class is responsible for calculating the fee,\ncalculating the available amount to send, and generating and signing a Bitcoin Cash transaction",
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 61,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx#constructor",
    "access": "public",
    "description": "Create a BitcoinCashTx",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Input data for generating a transaction, calculating a fee or available amount"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "data.unspent",
        "description": "Array of unspent addresses"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.amount",
        "description": "Transaction amount"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.balance",
        "description": "Bitcoin Cash wallet balance"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "data.feeList",
        "description": "Set of raw Bitcoin Cash fees"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data.customFee",
        "description": "Custom fee entered by the user"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.nodes",
        "description": "External and internal Bitcoin Cash nodes"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.internalAddress",
        "description": "Address for change"
      }
    ]
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "unspent",
    "memberof": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx",
    "static": false,
    "longname": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx#unspent",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "member",
    "name": "amount",
    "memberof": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx",
    "static": false,
    "longname": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx#amount",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "member",
    "name": "balance",
    "memberof": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx",
    "static": false,
    "longname": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx#balance",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "member",
    "name": "customFee",
    "memberof": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx",
    "static": false,
    "longname": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx#customFee",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "nodes",
    "memberof": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx",
    "static": false,
    "longname": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx#nodes",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "member",
    "name": "internalAddress",
    "memberof": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx",
    "static": false,
    "longname": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx#internalAddress",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "member",
    "name": "fee",
    "memberof": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx",
    "static": false,
    "longname": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx#fee",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "member",
    "name": "feeList",
    "memberof": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx",
    "static": false,
    "longname": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx#feeList",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "member",
    "name": "dust",
    "memberof": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx",
    "static": false,
    "longname": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx#dust",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "calcFee",
    "memberof": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx#calcFee",
    "access": "public",
    "description": "Calculating the fee amount",
    "lineNumber": 49,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array>} Returns a set of fees for a specific transaction amount"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "Transaction size"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array>"
      ],
      "spread": false,
      "description": "Returns a set of fees for a specific transaction amount"
    }
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "calcEmptyFee",
    "memberof": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx#calcEmptyFee",
    "access": "public",
    "description": "Sets an array of zero fees.\nUsed when the user does not have enough funds for the transaction",
    "lineNumber": 85,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} Returns an array with zero fees"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "fees",
        "description": "set of commission types"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Returns an array with zero fees"
    }
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "getInputs",
    "memberof": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx#getInputs",
    "access": "public",
    "description": "Finds a list of inputs for a specific transaction",
    "lineNumber": 109,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} Returns an object with a list of inputs, the total fee amount, and the total amount of all inputs"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "fee",
        "description": "Fee size"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "Transaction size"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "Returns an object with a list of inputs, the total fee amount, and the total amount of all inputs"
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "make",
    "memberof": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BCH/BitcoinCashTx.js~BitcoinCashTx#make",
    "access": "public",
    "description": "Creating a Bitcoin Cash transaction",
    "lineNumber": 160,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} Returns the raw transaction and transaction hash if sent successfully"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Input data for a transaction"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.addressTo",
        "description": "Recipient address"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data.fee",
        "description": "The transaction fee and list of inputs"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "Returns the raw transaction and transaction hash if sent successfully"
    }
  },
  {
    "__docId__": 78,
    "kind": "file",
    "name": "src/class/BTC/BitcoinSync.js",
    "content": "import Request from '@/helpers/Request'\nimport {getBtcAddress, privateKeyToWIF} from '@/helpers/coreHelper'\nimport * as bitcoin from 'bitcoinjs-lib'\n\n/**\n * Class BitcoinSync.\n * This class allows you to get information about the balance on a Bitcoin wallet,\n * the list of unspent, a set of addresses that participated in transactions, and a list of transactions\n * @class\n */\n\nexport default class BitcoinSync {\n  /**\n   * Create a BitcoinSync\n   * @param {Object} externalNode - External Bitcoin node\n   * @param {Object} internalNode - Internal Bitcoin node\n   * @param {Object} api - A set of URLs for getting information about Bitcoin addresses\n   */\n  constructor (externalNode, internalNode, api) {\n    this.externalNode = externalNode\n    this.internalNode = internalNode\n    this.api = api\n    this.balance = 0\n    this.latestBlock = 0\n    this.unspent = []\n    this.addresses = {\n      external: [],\n      internal: [],\n      empty: {},\n      all: []\n    }\n    this.deriveAddress = {\n      internal: {},\n      external: {}\n    }\n    this.transactions = {\n      all: [],\n      unique: []\n    }\n    this.fee = []\n    this.checked200 = false\n    this.request = new Request(this.api.bitcoin)\n  }\n  \n  /**\n   * The method that starts the synchronization Bitcoin part of wallet\n   * @returns {Promise<boolean>}\n   * @constructor\n   */\n  \n  async Start () {\n    await Promise.all([\n      await this.getAddresses(),\n      await this.getFeesRequest()\n    ])\n  }\n  \n  /**\n   * Getting internal and external addresses that were involved in transactions\n   * @returns {Promise<boolean>}\n   */\n  \n  async getAddresses () {\n    const nodeData = [\n      {\n        node: this.externalNode,\n        type: 'external'\n      }, {\n        node: this.internalNode,\n        type: 'internal'\n      }\n    ]\n    \n    const pArray = nodeData.map(async item => {\n      return await this.getAddressesByNode(\n        item.node,\n        item.type\n      )\n    })\n    \n    const addresses = await Promise.all(pArray)\n    \n    this.addresses.external = addresses[0]\n    this.addresses.internal = addresses[1]\n    this.addresses.empty = {\n      external: this.addresses.external[this.addresses.external.length - 1],\n      internal: this.addresses.internal[this.addresses.internal.length - 1]\n    }\n    await this.additionalCheckAddress()\n    \n    this.addresses.all = [...this.addresses.external, ...this.addresses.internal].map((item) => item.address)\n    \n    await this.getUnspent()\n    await this.processTransactions()\n  }\n  \n  /**\n   * Auxiliary method that gets the Bitcoin address by node and index\n   * @param {Object} node - Bitcoin node\n   * @param {string} type - Node type (external or internal)\n   * @param {number} from - The index that the derivation starts from\n   * @param {number} to - Index to which deprivation occurs\n   * @returns {Promise<Array>} Returns array of addresses\n   * @private\n   */\n  \n  async _getArrayOfAddresses (node, type, from, to) {\n    let addresses = []\n    \n    for (let i = from; i < to; i++) {\n      let address = ''\n      \n      if (this.deriveAddress[type].hasOwnProperty(i)) {\n        address = this.deriveAddress[type][i]\n      } else {\n        address = getBtcAddress(node, i)\n      }\n      addresses.push(address)\n    }\n    \n    return addresses\n  }\n  \n  /**\n   * Getting information about addresses and forming an array of addresses.\n   * Makes a request for a bundle of addresses and gets a list of transactions\n   * @param {Object} node - Bitcoin node\n   * @param {string} type - Node type (external or internal)\n   * @returns {Promise<Array>} A list of addresses with transactions\n   */\n  \n  async getAddressesByNode (node, type) {\n    const CONTROL_COUNT = 100\n    let list = []\n    let counter = 0\n    let derive_index = 0\n    let empty = {\n      status: false,\n      data: null\n    }\n    let data = {\n      from: 0,\n      to: CONTROL_COUNT\n    }\n    \n    const req = async () => {\n      let addresses = await this._getArrayOfAddresses(\n        node,\n        type,\n        data.from,\n        data.to\n      )\n      \n      try {\n        let res = await this.getMultiAddressRequest(addresses)\n        \n        if (res.hasOwnProperty('txs')) {\n          this.transactions.all = [...this.transactions.all, ...res.txs]\n        }\n        \n        if (res.hasOwnProperty('info') &&\n          res.info.hasOwnProperty('latest_block')) {\n          this.latestBlock = res.info.latest_block.height\n        }\n        \n        if (res.hasOwnProperty('addresses')) {\n          for (let i = data.from; i < data.to; i++) {\n            if (counter >= CONTROL_COUNT) break\n            \n            const index = i <= CONTROL_COUNT ? i : i - CONTROL_COUNT\n            let item = res.addresses.find((itm) => itm.address === addresses[index])\n            \n            if (item && item.n_tx) {\n              counter = 0\n              item.type = type\n              item.derive_index = derive_index\n              list.push(item)\n            } else {\n              counter++\n              if (!empty.status) {\n                item = {}\n                item.type = type\n                item.derive_index = derive_index\n                \n                if (type === 'external') {\n                  item.address = getBtcAddress(this.externalNode, derive_index)\n                } else {\n                  item.address = getBtcAddress(this.internalNode, derive_index)\n                }\n                \n                empty.status = true\n                empty.data = item\n              }\n            }\n            derive_index++\n          }\n          \n          if (counter < CONTROL_COUNT) {\n            data.from += CONTROL_COUNT\n            data.to += CONTROL_COUNT\n            await req()\n          } else {\n            list.push(empty.data)\n          }\n        } else {\n          let data = {\n            type: type,\n            derive_index: derive_index\n          }\n          \n          if (type === 'external') {\n            data.address = getBtcAddress(this.externalNode, derive_index)\n          } else {\n            data.address = getBtcAddress(this.internalNode, derive_index)\n          }\n          \n          list.push(data)\n        }\n      }\n      catch (e) {\n        console.log('BTC SyncPromise', e)\n      }\n    }\n    \n    await req()\n    \n    return list\n  }\n  \n  async additionalCheckAddress () {\n    if (!this.checked200 && !this.deriveAddress.internal.hasOwnProperty(200)) {\n      let address = getBtcAddress(this.internalNode, 200)\n      this.deriveAddress.internal[200] = address\n      this.checked200 = true\n      \n      let res = await this.getMultiAddressRequest([address])\n      \n      if (res.hasOwnProperty('txs')) {\n        this.transactions.all = [...this.transactions.all, ...res.txs]\n      }\n      \n      if (res.hasOwnProperty('addresses')) {\n        let item = res.addresses.find((itm) => itm.address === address)\n        \n        if (item && item.n_tx) {\n          item.type = 'internal'\n          item.derive_index = 200\n          \n          let lastEmptyAddress = this.addresses.internal.pop()\n          this.addresses.internal.push(item)\n          this.addresses.internal.push(lastEmptyAddress)\n        }\n      }\n    }\n  }\n  \n  /**\n   * Processing transaction information: setting the type (incoming or outgoing),\n   * getting addresses from and to, getting a transaction amount\n   * @returns {Promise<Boolean>}\n   */\n  \n  async processTransactions () {\n    this.transactions.unique = this.transactions.all.filter(\n      (value, index, self) =>\n        self.findIndex((tx) => tx.hash === value.hash) === index\n    )\n    \n    try {\n      this.transactions.unique.forEach((tx) => {\n        let isMyInAddress = this.addresses.all.includes(tx.inputs[0].prev_out.addr)\n        \n        tx.action = isMyInAddress ? 'outgoing' : 'incoming'\n        tx.self = isMyInAddress ? tx.out.every(item => this.addresses.all.includes(item.addr)) : false\n        \n        if (tx.self) {\n          tx.action = 'outgoing'\n        }\n        \n        tx.to = tx.out[0].addr\n        tx.from = tx.inputs[0].prev_out.addr\n        tx.value = tx.out[0].value\n      })\n    }\n    catch (e) {\n      console.log('BTC processTransactions', e)\n    }\n  }\n  \n  /**\n   * Getting a unspent transaction output for\n   * all addresses in the wallet with the transaction.\n   * Calculates the balance of the wallet for unspent\n   * @returns {Promise<boolean>}\n   */\n  \n  async getUnspent () {\n    let res = await this.getUnspentOutputsRequest(this.addresses.all)\n    let unspent = []\n    \n    res.forEach(item => {\n      const buffer = Buffer.from(item.script, 'hex')\n      \n      try {\n        item.address = bitcoin.address.fromOutputScript(buffer)\n        item.key = this.getPrivateKey(item.address)\n        unspent.push(item)\n      }\n      catch (e) {\n        console.log('getUnspent e', e)\n      }\n    })\n    \n    this.unspent = unspent.sort((a, b) => b.value - a.value)\n    this.balance = this.getBalance(this.unspent)\n  }\n  \n  /**\n   * Getting a balance of Bitcoin wallet from a list of unspent\n   * @param {Array} unspent - The list of unspent transaction output\n   * @returns {number} The balance of the Bitcoin Cash wallet\n   */\n  \n  getBalance (unspent) {\n    if (!Array.isArray(unspent)) {\n      return 0\n    }\n    \n    let balance = 0\n    \n    unspent.forEach((item) => {\n      if (item && item.hasOwnProperty('value')) {\n        balance += +item.value\n      }\n    })\n    \n    return balance\n  }\n  \n  /**\n   * Getting a private key at a bitcoin address\n   * @param {string} address - Bitcoin address\n   * @returns {Object} - Bitcoin private key\n   */\n  \n  getPrivateKey (address) {\n    let finded = this.addresses.internal.find(item => item.address === address)\n    let key, wif = null\n    \n    if (finded) {\n      key = this.internalNode.deriveChild(finded.derive_index).privateKey\n      wif = privateKeyToWIF(key)\n    } else {\n      finded = this.addresses.external.find(item => item.address === address)\n      key = this.externalNode.deriveChild(finded.derive_index).privateKey\n      wif = privateKeyToWIF(key)\n    }\n    \n    return wif\n  }\n  \n  /**\n   * Getting a raw transaction from the transaction hash\n   * @param {string} txHash - Transaction hash\n   * @returns {Promise<Object>} - Raw transaction\n   */\n  \n  async getRawTxRequest (txHash) {\n    let params = {\n      method: 'rawtx',\n      tx_hash: txHash\n    }\n    \n    try {\n      let res = await this.request.send(params)\n      \n      if (res.status === 'success') {\n        return res.data\n      } else {\n        console.log(res.error)\n        return {}\n      }\n    }\n    catch (e) {\n      console.log('BTC getLatestBlock', e)\n    }\n  }\n  \n  /**\n   * Request for information at multiple addresses\n   * @param {Array} addresses - List of addresses to get data from\n   * @returns {Promise<Object>} Address information, including a list of transactions\n   */\n  \n  async getMultiAddressRequest (addresses) {\n    if (!addresses) return false\n    \n    const OFFSET_STEP = 100\n    let offset = 0\n    let data = {}\n    let txs = []\n    \n    const req = async () => {\n      let params = {\n        method: 'multiaddr',\n        active: addresses,\n        n: 100,\n        offset: offset\n      }\n      \n      try {\n        let res = await this.request.send(params)\n        \n        if (res.status === 'success') {\n          data = res.data || {}\n          \n          if (res.data.hasOwnProperty('txs')) {\n            txs = [...txs, ...res.data.txs]\n            \n            if (res.data.txs.length === 100) {\n              offset += OFFSET_STEP\n              await req()\n            }\n          }\n          \n          data.txs = txs\n        } else {\n          console.log('BTC getMultiAddressRequest', res.error)\n        }\n      }\n      catch (err) {\n        console.log('BTC getMultiAddressRequest', err)\n      }\n    }\n    \n    await req()\n    \n    return data\n  }\n  \n  /**\n   * Request to receive unspent outputs\n   * @param {Array} addresses - A set of addresses to get the unspent output from\n   * @returns {Promise<Array>} - Information about unspent output\n   */\n  \n  async getUnspentOutputsRequest (addresses) {\n    if (!addresses) return []\n    \n    const length = 100\n    let arraysCount = Math.ceil(addresses.length / length)\n    let arrays = []\n    \n    for (let i = 0; i < arraysCount; i++) {\n      let arr = addresses.slice(i * length, (i + 1) * length)\n      arrays.push(arr)\n    }\n    \n    const res = await Promise.all(arrays.map((array) => {\n      return new Promise((resolve) => {\n        let params = {\n          method: 'unspent',\n          active: array\n        }\n        \n        this.request.send(params).then(res => {\n          if (res.status === 'success') {\n            resolve(res.data.unspent_outputs)\n          }\n          \n          resolve([])\n        }).catch(err => {\n          console.log('BTC getUnspentOutputsRequest', err)\n          resolve([])\n        })\n      })\n    }))\n    \n    return [].concat.apply([], res)\n  }\n  \n  /**\n   * Request to receive a recommended set of bitcoin fees\n   * @returns {Promise<Array>} Set of bitcoin fees\n   */\n  \n  async getFeesRequest () {\n    try {\n      const res = await fetch(this.api.bitcoinFee)\n      const resJson = await res.json()\n      this.fee = resJson.sort((a, b) => b.feePerByte - a.feePerByte)\n    }\n    catch (err) {\n      console.log('BTC getFeesRequest', err)\n    }\n  }\n  \n  /**\n   * Full information about the bitcoin wallet\n   * @returns {Object}\n   * @constructor\n   */\n  \n  get DATA () {\n    return {\n      addresses: this.addresses,\n      transactions: this.transactions,\n      unspent: this.unspent,\n      balance: this.balance,\n      latestBlock: this.latestBlock,\n      fee: this.fee\n    }\n  }\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/class/BTC/BitcoinSync.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 79,
    "kind": "class",
    "name": "BitcoinSync",
    "memberof": "src/class/BTC/BitcoinSync.js",
    "static": true,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/class/BTC/BitcoinSync.js",
    "importStyle": "BitcoinSync",
    "description": "Class BitcoinSync.\nThis class allows you to get information about the balance on a Bitcoin wallet,\nthe list of unspent, a set of addresses that participated in transactions, and a list of transactions",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 80,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#constructor",
    "access": "public",
    "description": "Create a BitcoinSync",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "externalNode",
        "description": "External Bitcoin node"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "internalNode",
        "description": "Internal Bitcoin node"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "api",
        "description": "A set of URLs for getting information about Bitcoin addresses"
      }
    ]
  },
  {
    "__docId__": 81,
    "kind": "member",
    "name": "externalNode",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#externalNode",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "member",
    "name": "internalNode",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#internalNode",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "member",
    "name": "api",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#api",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "member",
    "name": "balance",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#balance",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "member",
    "name": "latestBlock",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#latestBlock",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "member",
    "name": "unspent",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#unspent",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "member",
    "name": "addresses",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#addresses",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "{\"external\": *, \"internal\": *, \"empty\": *, \"all\": *}"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "member",
    "name": "deriveAddress",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#deriveAddress",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "{\"internal\": *, \"external\": *}"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "member",
    "name": "transactions",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#transactions",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "{\"all\": *, \"unique\": *}"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "member",
    "name": "fee",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#fee",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "member",
    "name": "checked200",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#checked200",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "member",
    "name": "request",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#request",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "Start",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#Start",
    "access": "public",
    "description": "The method that starts the synchronization Bitcoin part of wallet",
    "lineNumber": 51,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<boolean>}"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<boolean>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "getAddresses",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#getAddresses",
    "access": "public",
    "description": "Getting internal and external addresses that were involved in transactions",
    "lineNumber": 63,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<boolean>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<boolean>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "_getArrayOfAddresses",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#_getArrayOfAddresses",
    "access": "private",
    "description": "Auxiliary method that gets the Bitcoin address by node and index",
    "lineNumber": 107,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array>} Returns array of addresses"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "Bitcoin node"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Node type (external or internal)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": "The index that the derivation starts from"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "to",
        "description": "Index to which deprivation occurs"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array>"
      ],
      "spread": false,
      "description": "Returns array of addresses"
    }
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "getAddressesByNode",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#getAddressesByNode",
    "access": "public",
    "description": "Getting information about addresses and forming an array of addresses.\nMakes a request for a bundle of addresses and gets a list of transactions",
    "lineNumber": 132,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array>} A list of addresses with transactions"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "Bitcoin node"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Node type (external or internal)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array>"
      ],
      "spread": false,
      "description": "A list of addresses with transactions"
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "additionalCheckAddress",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#additionalCheckAddress",
    "access": "public",
    "description": null,
    "lineNumber": 230,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "processTransactions",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#processTransactions",
    "access": "public",
    "description": "Processing transaction information: setting the type (incoming or outgoing),\ngetting addresses from and to, getting a transaction amount",
    "lineNumber": 263,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Boolean>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Boolean>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "getUnspent",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#getUnspent",
    "access": "public",
    "description": "Getting a unspent transaction output for\nall addresses in the wallet with the transaction.\nCalculates the balance of the wallet for unspent",
    "lineNumber": 297,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<boolean>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<boolean>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "getBalance",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#getBalance",
    "access": "public",
    "description": "Getting a balance of Bitcoin wallet from a list of unspent",
    "lineNumber": 324,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The balance of the Bitcoin Cash wallet"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "unspent",
        "description": "The list of unspent transaction output"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The balance of the Bitcoin Cash wallet"
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "getPrivateKey",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#getPrivateKey",
    "access": "public",
    "description": "Getting a private key at a bitcoin address",
    "lineNumber": 346,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - Bitcoin private key"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "address",
        "description": "Bitcoin address"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Bitcoin private key"
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "getRawTxRequest",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#getRawTxRequest",
    "access": "public",
    "description": "Getting a raw transaction from the transaction hash",
    "lineNumber": 368,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} - Raw transaction"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "txHash",
        "description": "Transaction hash"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "Raw transaction"
    }
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "getMultiAddressRequest",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#getMultiAddressRequest",
    "access": "public",
    "description": "Request for information at multiple addresses",
    "lineNumber": 395,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} Address information, including a list of transactions"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "addresses",
        "description": "List of addresses to get data from"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "Address information, including a list of transactions"
    }
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "getUnspentOutputsRequest",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#getUnspentOutputsRequest",
    "access": "public",
    "description": "Request to receive unspent outputs",
    "lineNumber": 447,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array>} - Information about unspent output"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "addresses",
        "description": "A set of addresses to get the unspent output from"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array>"
      ],
      "spread": false,
      "description": "Information about unspent output"
    }
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "getFeesRequest",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#getFeesRequest",
    "access": "public",
    "description": "Request to receive a recommended set of bitcoin fees",
    "lineNumber": 487,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array>} Set of bitcoin fees"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array>"
      ],
      "spread": false,
      "description": "Set of bitcoin fees"
    },
    "params": []
  },
  {
    "__docId__": 111,
    "kind": "get",
    "name": "DATA",
    "memberof": "src/class/BTC/BitcoinSync.js~BitcoinSync",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/BTC/BitcoinSync.js~BitcoinSync#DATA",
    "access": "public",
    "description": "Full information about the bitcoin wallet",
    "lineNumber": 504,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "{\"addresses\": *, \"transactions\": *, \"unspent\": *, \"balance\": *, \"latestBlock\": *, \"fee\": *}"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "file",
    "name": "src/class/BTC/BitcoinTx.js",
    "content": "import converter from '@/helpers/converters'\nimport {calcBtcTxSize, makeRawBtcTx} from '@/helpers/coreHelper'\nimport CustomError from '@/helpers/handleErrors'\n\n/**\n * List of available commission types for Bitcoin transactions\n * @type {Array}\n */\n\nconst FEE_IDS = ['fast', 'regular', 'cheap', 'custom']\n\n/**\n * Class BitcoinTx.\n * This class is responsible for calculating the fee,\n * calculating the available amount to send, and generating and signing a Bitcoin transaction\n * @class\n */\n\nexport default class BitcoinTx {\n  /**\n   * Create a BitcoinTx\n   * @param {Object} data - Input data for generating a transaction, calculating a fee or available amount\n   * @param {Array} data.unspent - Array of unspent addresses\n   * @param {string} data.internalAddress - Address for change\n   * @param {number} data.amount - Transaction amount\n   * @param {number} data.balance - Bitcoin wallet balance\n   * @param {Array} data.feeList - Set of bitcoin fees\n   * @param {Object} data.customFee - Custom fee entered by the user\n   */\n  constructor (data) {\n    this.unspent = data.unspent\n    this.internalAddress = data.internalAddress\n    this.amount = data.amount ? converter.btc_to_sat(data.amount) : 0\n    this.balance = data.balance\n    this.dust = 1000\n    this.fee = data.feeList\n    this.customFee = +data.customFee ? +data.customFee : 0\n    this.feeList = []\n  }\n  \n  /**\n   * Calculating the fee amount\n   * @param {number} size - Transaction size\n   * @returns {Promise<Array>} Returns a set of fees for a specific transaction amount\n   */\n  \n  async calcFee (size = 0) {\n    const fees = [...this.fee.map(item => item.feePerByte), this.customFee]\n    \n    if (this.amount <= 0 || this.balance < this.amount) {\n      return this.calcEmptyFee(fees)\n    }\n    \n    const pArray = fees.map(async fee => {\n      return await this.getInputs(fee, size)\n    })\n    \n    const res = await Promise.all(pArray)\n    \n    this.feeList = res.map((item, i) => {\n      return {\n        id: FEE_IDS[i],\n        SAT: item.fee,\n        BTC: converter.sat_to_btc(item.fee),\n        fee: fees[i],\n        feeInBTC: converter.sat_to_btc(fees[i]),\n        inputs: item.inputs,\n        inputsAmount: item.inputsAmount,\n        custom: FEE_IDS[i] === 'custom'\n      }\n    })\n    \n    return this.feeList\n  }\n  \n  /**\n   * Sets an array of zero fees.\n   * Used when the user does not have enough funds for the transaction\n   * @returns {Array} Returns an array with zero fees\n   */\n  \n  calcEmptyFee (fees) {\n    this.feeList = fees.map((item, i) => {\n      return {\n        id: FEE_IDS[i],\n        SAT: 0,\n        BTC: 0,\n        fee: item,\n        feeInBTC: converter.sat_to_btc(item),\n        inputs: [],\n        inputsAmount: 0,\n        custom: FEE_IDS[i] === 'custom'\n      }\n    })\n    \n    return this.feeList\n  }\n  \n  /**\n   * Finds a list of inputs for a specific transaction\n   * @param {number} fee - Fee size\n   * @param {number} size - Transaction size\n   * @returns {Promise<Object>} Returns an object with a list of inputs, the total fee amount, and the total amount of all inputs\n   */\n  \n  async getInputs (fee, size) {\n    let index = 0\n    let inputsAmount = 0\n    let inputs = []\n    let res = {}\n    \n    this.dust = size ? 0 : 1000\n    \n    let req = async () => {\n      let item = this.unspent[index]\n      let defaultSize = calcBtcTxSize(index + 1, 2)\n      let calcFee = size ? size * fee : defaultSize * fee\n      \n      inputsAmount += item.value\n      inputs.push(item)\n      \n      let total = this.amount + calcFee + this.dust\n      \n      if (total > inputsAmount) {\n        index++\n        \n        if (index >= this.unspent.length) {\n          res = {\n            fee: 0,\n            inputs: [],\n            inputsAmount: 0\n          }\n        } else {\n          await req()\n        }\n      } else {\n        res = {\n          fee: calcFee,\n          inputs: inputs,\n          inputsAmount: inputsAmount\n        }\n      }\n    }\n    await req()\n    return res\n  }\n  \n  /**\n   * Creating a Bitcoin transaction\n   * @param {Object} data - Input data for a transaction\n   * @param {string} data.addressTo - Recipient address\n   * @param {Object} data.fee - The transaction fee and list of inputs\n   * @returns {Promise<Object>} Returns the raw transaction and transaction hash if sent successfully\n   */\n  \n  async make (data) {\n    const {addressTo, fee} = data\n    \n    if (isNaN(this.amount)) {\n      throw new CustomError('err_tx_btc_amount')\n    }\n    \n    if (isNaN(fee.SAT)) {\n      throw new CustomError('err_tx_btc_fee')\n    }\n    \n    let change = +fee.inputsAmount - +this.amount - +fee.SAT\n    \n    if (change >= 0) {\n      let params = {\n        inputs: fee.inputs,\n        outputs: [\n          {\n            address: addressTo,\n            value: this.amount\n          }\n        ]\n      }\n      \n      if (change !== 0) {\n        params.outputs[1] = {\n          address: this.internalAddress,\n          value: change\n        }\n      }\n      \n      return makeRawBtcTx(params)\n    } else {\n      throw new CustomError('err_tx_btc_balance')\n    }\n  }\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/class/BTC/BitcoinTx.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 113,
    "kind": "variable",
    "name": "FEE_IDS",
    "memberof": "src/class/BTC/BitcoinTx.js",
    "static": true,
    "longname": "src/class/BTC/BitcoinTx.js~FEE_IDS",
    "access": "public",
    "export": false,
    "importPath": "lumi-web-core/src/class/BTC/BitcoinTx.js",
    "importStyle": null,
    "description": "List of available commission types for Bitcoin transactions",
    "lineNumber": 10,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 114,
    "kind": "class",
    "name": "BitcoinTx",
    "memberof": "src/class/BTC/BitcoinTx.js",
    "static": true,
    "longname": "src/class/BTC/BitcoinTx.js~BitcoinTx",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/class/BTC/BitcoinTx.js",
    "importStyle": "BitcoinTx",
    "description": "Class BitcoinTx.\nThis class is responsible for calculating the fee,\ncalculating the available amount to send, and generating and signing a Bitcoin transaction",
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 115,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/class/BTC/BitcoinTx.js~BitcoinTx",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/BTC/BitcoinTx.js~BitcoinTx#constructor",
    "access": "public",
    "description": "Create a BitcoinTx",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Input data for generating a transaction, calculating a fee or available amount"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "data.unspent",
        "description": "Array of unspent addresses"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.internalAddress",
        "description": "Address for change"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.amount",
        "description": "Transaction amount"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.balance",
        "description": "Bitcoin wallet balance"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "data.feeList",
        "description": "Set of bitcoin fees"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data.customFee",
        "description": "Custom fee entered by the user"
      }
    ]
  },
  {
    "__docId__": 116,
    "kind": "member",
    "name": "unspent",
    "memberof": "src/class/BTC/BitcoinTx.js~BitcoinTx",
    "static": false,
    "longname": "src/class/BTC/BitcoinTx.js~BitcoinTx#unspent",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "member",
    "name": "internalAddress",
    "memberof": "src/class/BTC/BitcoinTx.js~BitcoinTx",
    "static": false,
    "longname": "src/class/BTC/BitcoinTx.js~BitcoinTx#internalAddress",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "member",
    "name": "amount",
    "memberof": "src/class/BTC/BitcoinTx.js~BitcoinTx",
    "static": false,
    "longname": "src/class/BTC/BitcoinTx.js~BitcoinTx#amount",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 119,
    "kind": "member",
    "name": "balance",
    "memberof": "src/class/BTC/BitcoinTx.js~BitcoinTx",
    "static": false,
    "longname": "src/class/BTC/BitcoinTx.js~BitcoinTx#balance",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "member",
    "name": "dust",
    "memberof": "src/class/BTC/BitcoinTx.js~BitcoinTx",
    "static": false,
    "longname": "src/class/BTC/BitcoinTx.js~BitcoinTx#dust",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "member",
    "name": "fee",
    "memberof": "src/class/BTC/BitcoinTx.js~BitcoinTx",
    "static": false,
    "longname": "src/class/BTC/BitcoinTx.js~BitcoinTx#fee",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "member",
    "name": "customFee",
    "memberof": "src/class/BTC/BitcoinTx.js~BitcoinTx",
    "static": false,
    "longname": "src/class/BTC/BitcoinTx.js~BitcoinTx#customFee",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 123,
    "kind": "member",
    "name": "feeList",
    "memberof": "src/class/BTC/BitcoinTx.js~BitcoinTx",
    "static": false,
    "longname": "src/class/BTC/BitcoinTx.js~BitcoinTx#feeList",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "calcFee",
    "memberof": "src/class/BTC/BitcoinTx.js~BitcoinTx",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BTC/BitcoinTx.js~BitcoinTx#calcFee",
    "access": "public",
    "description": "Calculating the fee amount",
    "lineNumber": 47,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array>} Returns a set of fees for a specific transaction amount"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "Transaction size"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array>"
      ],
      "spread": false,
      "description": "Returns a set of fees for a specific transaction amount"
    }
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "calcEmptyFee",
    "memberof": "src/class/BTC/BitcoinTx.js~BitcoinTx",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/BTC/BitcoinTx.js~BitcoinTx#calcEmptyFee",
    "access": "public",
    "description": "Sets an array of zero fees.\nUsed when the user does not have enough funds for the transaction",
    "lineNumber": 82,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} Returns an array with zero fees"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Returns an array with zero fees"
    },
    "params": [
      {
        "name": "fees",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "getInputs",
    "memberof": "src/class/BTC/BitcoinTx.js~BitcoinTx",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BTC/BitcoinTx.js~BitcoinTx#getInputs",
    "access": "public",
    "description": "Finds a list of inputs for a specific transaction",
    "lineNumber": 106,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} Returns an object with a list of inputs, the total fee amount, and the total amount of all inputs"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "fee",
        "description": "Fee size"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "Transaction size"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "Returns an object with a list of inputs, the total fee amount, and the total amount of all inputs"
    }
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "make",
    "memberof": "src/class/BTC/BitcoinTx.js~BitcoinTx",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/BTC/BitcoinTx.js~BitcoinTx#make",
    "access": "public",
    "description": "Creating a Bitcoin transaction",
    "lineNumber": 156,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} Returns the raw transaction and transaction hash if sent successfully"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Input data for a transaction"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.addressTo",
        "description": "Recipient address"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data.fee",
        "description": "The transaction fee and list of inputs"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "Returns the raw transaction and transaction hash if sent successfully"
    }
  },
  {
    "__docId__": 131,
    "kind": "file",
    "name": "src/class/Core.js",
    "content": "import {validateMnemonic} from 'bip39'\nimport {normalize, checkWords} from 'bip39-checker'\nimport CustomError from '@/helpers/handleErrors'\nimport * as core from '@/helpers/coreHelper'\n\n/**\n * Class Wallet\n * @class\n */\n\nexport default class Core {\n  /**\n   * Create a core\n   * @param {Object} data\n   * @param {string} data.from - A type new wallet creating: new, mnemonic or xprv\n   * @param {number} data.count - Number of words for the new mnemonic. Is used when parameter from is 'new'\n   * @param {string} data.mnemonic - The mnemonic phrase. It used when parameter from is 'mnemonic'\n   * @param {string} data.key - BIP32 Root Key. It used when parameter from is 'mnemonic'\n   */\n  constructor (data) {\n    const {from, count, mnemonic, key} = data\n    this.from = from\n    this.count = count\n    this.mnemonic = mnemonic\n    this.xprv = key\n    this.seed = null\n    this.hdkey = null\n    this.BTC = {\n      address: null,\n      internalNode: null,\n      externalNode: null\n    }\n    this.ETH = {\n      address: null,\n      node: null,\n      privateKey: null,\n      publicKey: null\n    }\n    this.BCH = {\n      address: null,\n      internalNode: null,\n      externalNode: null\n    }\n    \n    this.generateWallet()\n  }\n  \n  /**\n   * The main method that starts the generation of the core.\n   * The type of generation depends on the parameter 'from'\n   */\n  \n  generateWallet () {\n    switch (this.from) {\n      case 'new':\n        this._generateNewMnemonic()\n        break\n      case 'mnemonic':\n        this._importByMnemonic()\n        break\n      case 'xprv':\n        this._importByKey()\n        break\n      default:\n        this._generateNewMnemonic()\n    }\n    \n    this._generateBTCcore()\n    this._generateETHcore()\n    this._generateBCHcore()\n  }\n  \n  /**\n   * Generating a new mnemonic.\n   * The number of words in a mnemonic depends on the parameter 'count'\n   * @private\n   */\n  \n  _generateNewMnemonic () {\n    const entropy = this._getEntropyLength(this.count)\n    this.mnemonic = core.generateMnemonic(entropy)\n    this.seed = core.mnemonicToSeed(this.mnemonic)\n    this.hdkey = core.hdFromSeed(this.seed)\n    this.xprv = core.getXprv(this.hdkey)\n  }\n  \n  /**\n   * Importing a wallet by mnemonic\n   * @private\n   */\n  \n  _importByMnemonic () {\n    this.mnemonic = normalize(this.mnemonic)\n    \n    if (!this.checkMnemonic(this.mnemonic)) {\n      throw new CustomError('err_core_mnemonic')\n    }\n    \n    this.seed = core.mnemonicToSeed(this.mnemonic)\n    this.hdkey = core.hdFromSeed(this.seed)\n    this.xprv = core.getXprv(this.hdkey)\n  }\n  \n  /**\n   * Importing a wallet by key\n   * @private\n   */\n  \n  _importByKey () {\n    this.hdkey = core.hdFromXprv(this.xprv)\n  }\n  \n  /**\n   * Creating a core for Bitcoin.\n   * At the output, we get a external and internal node\n   * and the first address of the external core\n   * @private\n   */\n  \n  _generateBTCcore () {\n    const bitcoin_external_path = 'm/44\\'/0\\'/0\\'/0'\n    const bitcoin_internal_path = 'm/44\\'/0\\'/0\\'/1'\n    this.BTC.externalNode = core.derive(this.hdkey, bitcoin_external_path)\n    this.BTC.internalNode = core.derive(this.hdkey, bitcoin_internal_path)\n    this.BTC.address = core.getBtcAddress(this.BTC.externalNode, 0)\n  }\n  \n  /**\n   * Creating a core for Ethereum.\n   * At the output, we get a Ethereum node,\n   * a private and public key, and the Ethereum address\n   * @private\n   */\n  \n  _generateETHcore () {\n    const ethereum_path = 'm/44\\'/60\\'/0\\'/0/0'\n    this.ETH.node = core.derive(this.hdkey, ethereum_path)\n    this.ETH.privateKey = core.getEthPrivateKey(this.ETH.node)\n    this.ETH.privateKeyHex = '0x' + this.ETH.privateKey.toString('hex')\n    this.ETH.publicKey = core.getEthPublicKey(this.ETH.privateKey)\n    this.ETH.address = core.getEthAddress(this.ETH.publicKey)\n  }\n  \n  /**\n   * Creating a core for Bitcoin Cash.\n   * At the output, we get a external and internal node\n   * and the first address of the external core\n   * @private\n   */\n  \n  _generateBCHcore () {\n    const bitcoincash_external_path = 'm/44\\'/145\\'/0\\'/0'\n    const bitcoincash_internal_path = 'm/44\\'/145\\'/0\\'/1'\n    this.BCH.externalNode = core.derive(this.hdkey, bitcoincash_external_path)\n    this.BCH.internalNode = core.derive(this.hdkey, bitcoincash_internal_path)\n    this.BCH.address = core.getBtcAddress(this.BCH.externalNode, 0)\n  }\n  \n  /**\n   * The method returns information about child nodes by the derivation path and range\n   * @param {Object} data\n   * @param {number} data.from - Top of the derivation range\n   * @param {number} data.to - End of the derivation range\n   * @param {string} data.path - Derivation path\n   * @returns {{node: {privateExtendedKey: *, publicExtendedKey: *}, list: []}}\n   */\n  \n  getChildNodes (data = {}) {\n    let {from, to, path} = data\n    \n    from = +from\n    to = +to\n    \n    if (!Number.isInteger(from) || !Number.isInteger(to) || from > to) {\n      throw new CustomError('err_core_derivation_range')\n    }\n    \n    try {\n      const node = core.derive(this.hdkey, path)\n      \n      let info = {\n        node: {\n          privateExtendedKey: node.privateExtendedKey,\n          publicExtendedKey: node.publicExtendedKey\n        },\n        list: []\n      }\n      \n      for (let i = from; i <= to; i++) {\n        const child = {}\n        const deriveChild = node.deriveChild(i)\n        child.path = `${ path }/${ i }`\n        child.privateKey = core.privateKeyToWIF(deriveChild.privateKey)\n        child.publicKey = deriveChild.publicKey.toString('hex')\n        child.btcAddress = core.getBtcAddress(node, i)\n        child.ethAddress = core.getEthAddressByNode(deriveChild)\n        child.bchAddress = core.getCashAddress(child.btcAddress)\n        info.list.push(child)\n      }\n      \n      return info\n    }\n    catch (e) {\n      throw new CustomError('err_core_derivation')\n    }\n  }\n  \n  /**\n   * Checking the mnemonic for validity\n   * @param mnemonic\n   * @returns {boolean}\n   */\n  \n  checkMnemonic (mnemonic) {\n    let words = mnemonic.split(' ')\n    let withTypo = []\n    \n    words.forEach((word, index) => {\n      if (!checkWords(word, 'english')) {\n        withTypo.push(index)\n      }\n    })\n    \n    if (withTypo.length) {\n      throw new CustomError('err_core_mnemonic')\n    }\n    \n    return validateMnemonic(mnemonic)\n  }\n  \n  /**\n   * Getting the entropy size by the number of words in a mnemonic\n   * @param words\n   * @returns {number} Bits of entropy\n   * @private\n   */\n  \n  _getEntropyLength (words) {\n    let bitsOfEntropy = {\n      12: 128,\n      15: 160,\n      18: 192,\n      21: 224,\n      24: 256\n    }\n    \n    if (!bitsOfEntropy.hasOwnProperty(+words)) {\n      throw new CustomError('err_core_7')\n    }\n    \n    return bitsOfEntropy[words]\n  }\n  \n  get DATA () {\n    return {\n      mnemonic: this.mnemonic,\n      xprv: this.xprv,\n      from: this.from,\n      hdkey: this.hdkey,\n      seed: this.seed,\n      seedInHex: this.seed ? this.seed.toString('hex') : null,\n      BTC: this.BTC,\n      ETH: this.ETH,\n      BCH: this.BCH\n    }\n  }\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/class/Core.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 132,
    "kind": "class",
    "name": "Core",
    "memberof": "src/class/Core.js",
    "static": true,
    "longname": "src/class/Core.js~Core",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/class/Core.js",
    "importStyle": "Core",
    "description": "Class Wallet",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 133,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/class/Core.js~Core",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/Core.js~Core#constructor",
    "access": "public",
    "description": "Create a core",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.from",
        "description": "A type new wallet creating: new, mnemonic or xprv"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.count",
        "description": "Number of words for the new mnemonic. Is used when parameter from is 'new'"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.mnemonic",
        "description": "The mnemonic phrase. It used when parameter from is 'mnemonic'"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.key",
        "description": "BIP32 Root Key. It used when parameter from is 'mnemonic'"
      }
    ]
  },
  {
    "__docId__": 134,
    "kind": "member",
    "name": "from",
    "memberof": "src/class/Core.js~Core",
    "static": false,
    "longname": "src/class/Core.js~Core#from",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "member",
    "name": "count",
    "memberof": "src/class/Core.js~Core",
    "static": false,
    "longname": "src/class/Core.js~Core#count",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "member",
    "name": "mnemonic",
    "memberof": "src/class/Core.js~Core",
    "static": false,
    "longname": "src/class/Core.js~Core#mnemonic",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 137,
    "kind": "member",
    "name": "xprv",
    "memberof": "src/class/Core.js~Core",
    "static": false,
    "longname": "src/class/Core.js~Core#xprv",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 138,
    "kind": "member",
    "name": "seed",
    "memberof": "src/class/Core.js~Core",
    "static": false,
    "longname": "src/class/Core.js~Core#seed",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 139,
    "kind": "member",
    "name": "hdkey",
    "memberof": "src/class/Core.js~Core",
    "static": false,
    "longname": "src/class/Core.js~Core#hdkey",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "member",
    "name": "BTC",
    "memberof": "src/class/Core.js~Core",
    "static": false,
    "longname": "src/class/Core.js~Core#BTC",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{\"address\": *, \"internalNode\": *, \"externalNode\": *}"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "member",
    "name": "ETH",
    "memberof": "src/class/Core.js~Core",
    "static": false,
    "longname": "src/class/Core.js~Core#ETH",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "{\"address\": *, \"node\": *, \"privateKey\": *, \"publicKey\": *}"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "member",
    "name": "BCH",
    "memberof": "src/class/Core.js~Core",
    "static": false,
    "longname": "src/class/Core.js~Core#BCH",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "{\"address\": *, \"internalNode\": *, \"externalNode\": *}"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "generateWallet",
    "memberof": "src/class/Core.js~Core",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/Core.js~Core#generateWallet",
    "access": "public",
    "description": "The main method that starts the generation of the core.\nThe type of generation depends on the parameter 'from'",
    "lineNumber": 53,
    "params": [],
    "return": null
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "_generateNewMnemonic",
    "memberof": "src/class/Core.js~Core",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/Core.js~Core#_generateNewMnemonic",
    "access": "private",
    "description": "Generating a new mnemonic.\nThe number of words in a mnemonic depends on the parameter 'count'",
    "lineNumber": 79,
    "params": [],
    "return": null
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "_importByMnemonic",
    "memberof": "src/class/Core.js~Core",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/Core.js~Core#_importByMnemonic",
    "access": "private",
    "description": "Importing a wallet by mnemonic",
    "lineNumber": 92,
    "params": [],
    "return": null
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "_importByKey",
    "memberof": "src/class/Core.js~Core",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/Core.js~Core#_importByKey",
    "access": "private",
    "description": "Importing a wallet by key",
    "lineNumber": 109,
    "params": [],
    "return": null
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "_generateBTCcore",
    "memberof": "src/class/Core.js~Core",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/Core.js~Core#_generateBTCcore",
    "access": "private",
    "description": "Creating a core for Bitcoin.\nAt the output, we get a external and internal node\nand the first address of the external core",
    "lineNumber": 120,
    "params": [],
    "return": null
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "_generateETHcore",
    "memberof": "src/class/Core.js~Core",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/Core.js~Core#_generateETHcore",
    "access": "private",
    "description": "Creating a core for Ethereum.\nAt the output, we get a Ethereum node,\na private and public key, and the Ethereum address",
    "lineNumber": 135,
    "params": [],
    "return": null
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "_generateBCHcore",
    "memberof": "src/class/Core.js~Core",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/Core.js~Core#_generateBCHcore",
    "access": "private",
    "description": "Creating a core for Bitcoin Cash.\nAt the output, we get a external and internal node\nand the first address of the external core",
    "lineNumber": 151,
    "params": [],
    "return": null
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "getChildNodes",
    "memberof": "src/class/Core.js~Core",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/Core.js~Core#getChildNodes",
    "access": "public",
    "description": "The method returns information about child nodes by the derivation path and range",
    "lineNumber": 168,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{node: {privateExtendedKey: *, publicExtendedKey: *}, list: []}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.from",
        "description": "Top of the derivation range"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.to",
        "description": "End of the derivation range"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.path",
        "description": "Derivation path"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{node: {privateExtendedKey: *, publicExtendedKey: *}, list: []}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "checkMnemonic",
    "memberof": "src/class/Core.js~Core",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/Core.js~Core#checkMnemonic",
    "access": "public",
    "description": "Checking the mnemonic for validity",
    "lineNumber": 214,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "mnemonic",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "_getEntropyLength",
    "memberof": "src/class/Core.js~Core",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/Core.js~Core#_getEntropyLength",
    "access": "private",
    "description": "Getting the entropy size by the number of words in a mnemonic",
    "lineNumber": 238,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Bits of entropy"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "words",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Bits of entropy"
    }
  },
  {
    "__docId__": 162,
    "kind": "get",
    "name": "DATA",
    "memberof": "src/class/Core.js~Core",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/Core.js~Core#DATA",
    "access": "public",
    "description": null,
    "lineNumber": 254,
    "undocument": true,
    "type": {
      "types": [
        "{\"mnemonic\": *, \"xprv\": *, \"from\": *, \"hdkey\": *, \"seed\": *, \"seedInHex\": *, \"BTC\": *, \"ETH\": *, \"BCH\": *}"
      ]
    }
  },
  {
    "__docId__": 163,
    "kind": "file",
    "name": "src/class/ETH/EthereumSync.js",
    "content": "import Request from '@/helpers/Request'\n\n/**\n * Class EthereumSync\n * This class allows you to get information about the balance on a ethereum wallet,\n * the list of transactions and optimal gas price\n * @class\n */\n\nexport default class EthereumSync {\n  /**\n   * Create a EthereumSync\n   * @param {string} address - Ethereum wallet address\n   * @param {Object} api - A set of URLs for getting information about ethereum address\n   */\n  constructor (address, api) {\n    this.address = address\n    this.api = api\n    this.balance = 0\n    this.transactions = []\n    this.gasPrice = 0\n    this.request = new Request(this.api.ethereum)\n  }\n  \n  /**\n   * The method that starts the synchronization Ethereum part of the wallet\n   * @returns {Promise<number>}\n   * @constructor\n   */\n  \n  async Start () {\n    this.balance = await this.getBalance()\n    this.transactions = await this.getTransactions()\n    this.gasPrice = await this.getGasPrice()\n  }\n  \n  /**\n   * Request to receive a balance of Ethereum wallet\n   * @returns {Promise<number>}\n   */\n  \n  async getBalance () {\n    this.balance = 0\n    \n    let params = {\n      module: 'account',\n      action: 'balance',\n      address: this.address,\n      tag: 'latest'\n    }\n    \n    let res = await this.request.send(params)\n    \n    return res && res.hasOwnProperty('result') && !isNaN(res.result) ? +res.result : 0\n  }\n  \n  /**\n   * Request to receive Ethereum transaction list\n   * @returns {Promise<Array>}\n   */\n  \n  async getTransactions () {\n    this.transactions = []\n    \n    let params = {\n      module: 'account',\n      action: 'txlist',\n      address: this.address,\n      sort: 'asc'\n    }\n    \n    let res = await this.request.send(params)\n    \n    return res && res.hasOwnProperty('result') && Array.isArray(res.result) ? res.result : []\n  }\n  \n  /**\n   * Request to receive a amount of gas price\n   * @returns {Promise<number>}\n   */\n  \n  async getGasPrice () {\n    let params = {\n      module: 'proxy',\n      action: 'eth_gasPrice'\n    }\n    \n    let res = await this.request.send(params)\n    \n    return res && res.hasOwnProperty('result') ? parseInt(res.result, 16) : 0\n  }\n  \n  get DATA () {\n    return {\n      address: this.address,\n      balance: this.balance,\n      transactions: this.transactions,\n      gasPrice: this.gasPrice\n    }\n  }\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/class/ETH/EthereumSync.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 164,
    "kind": "class",
    "name": "EthereumSync",
    "memberof": "src/class/ETH/EthereumSync.js",
    "static": true,
    "longname": "src/class/ETH/EthereumSync.js~EthereumSync",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/class/ETH/EthereumSync.js",
    "importStyle": "EthereumSync",
    "description": "Class EthereumSync\nThis class allows you to get information about the balance on a ethereum wallet,\nthe list of transactions and optimal gas price",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 165,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/class/ETH/EthereumSync.js~EthereumSync",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/ETH/EthereumSync.js~EthereumSync#constructor",
    "access": "public",
    "description": "Create a EthereumSync",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "address",
        "description": "Ethereum wallet address"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "api",
        "description": "A set of URLs for getting information about ethereum address"
      }
    ]
  },
  {
    "__docId__": 166,
    "kind": "member",
    "name": "address",
    "memberof": "src/class/ETH/EthereumSync.js~EthereumSync",
    "static": false,
    "longname": "src/class/ETH/EthereumSync.js~EthereumSync#address",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 167,
    "kind": "member",
    "name": "api",
    "memberof": "src/class/ETH/EthereumSync.js~EthereumSync",
    "static": false,
    "longname": "src/class/ETH/EthereumSync.js~EthereumSync#api",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 168,
    "kind": "member",
    "name": "balance",
    "memberof": "src/class/ETH/EthereumSync.js~EthereumSync",
    "static": false,
    "longname": "src/class/ETH/EthereumSync.js~EthereumSync#balance",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 169,
    "kind": "member",
    "name": "transactions",
    "memberof": "src/class/ETH/EthereumSync.js~EthereumSync",
    "static": false,
    "longname": "src/class/ETH/EthereumSync.js~EthereumSync#transactions",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "member",
    "name": "gasPrice",
    "memberof": "src/class/ETH/EthereumSync.js~EthereumSync",
    "static": false,
    "longname": "src/class/ETH/EthereumSync.js~EthereumSync#gasPrice",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 171,
    "kind": "member",
    "name": "request",
    "memberof": "src/class/ETH/EthereumSync.js~EthereumSync",
    "static": false,
    "longname": "src/class/ETH/EthereumSync.js~EthereumSync#request",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "method",
    "name": "Start",
    "memberof": "src/class/ETH/EthereumSync.js~EthereumSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/ETH/EthereumSync.js~EthereumSync#Start",
    "access": "public",
    "description": "The method that starts the synchronization Ethereum part of the wallet",
    "lineNumber": 31,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<number>}"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<number>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 176,
    "kind": "method",
    "name": "getBalance",
    "memberof": "src/class/ETH/EthereumSync.js~EthereumSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/ETH/EthereumSync.js~EthereumSync#getBalance",
    "access": "public",
    "description": "Request to receive a balance of Ethereum wallet",
    "lineNumber": 42,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<number>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<number>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "getTransactions",
    "memberof": "src/class/ETH/EthereumSync.js~EthereumSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/ETH/EthereumSync.js~EthereumSync#getTransactions",
    "access": "public",
    "description": "Request to receive Ethereum transaction list",
    "lineNumber": 62,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 180,
    "kind": "method",
    "name": "getGasPrice",
    "memberof": "src/class/ETH/EthereumSync.js~EthereumSync",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/ETH/EthereumSync.js~EthereumSync#getGasPrice",
    "access": "public",
    "description": "Request to receive a amount of gas price",
    "lineNumber": 82,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<number>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<number>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 181,
    "kind": "get",
    "name": "DATA",
    "memberof": "src/class/ETH/EthereumSync.js~EthereumSync",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/ETH/EthereumSync.js~EthereumSync#DATA",
    "access": "public",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "type": {
      "types": [
        "{\"address\": *, \"balance\": *, \"transactions\": *, \"gasPrice\": *}"
      ]
    }
  },
  {
    "__docId__": 182,
    "kind": "file",
    "name": "src/class/ETH/EthereumTx.js",
    "content": "import converter from '@/helpers/converters'\nimport toFormatDecimal from '@/helpers/toFormatDecimal'\nimport {makeRawEthTx} from '@/helpers/coreHelper'\nimport CustomError from '@/helpers/handleErrors'\n\n/**\n * Class EthereumTx.\n * This class is responsible for calculating the fee and generating and signing a Ethereum transaction\n * @class\n */\n\nexport default class EthereumTx {\n  /**\n   * Create a EthereumTx\n   * @param {Object} data - Input data for generating a transaction or calculating a fee\n   * @param {string} data.address - Ethereum wallet address\n   * @param {Array} data.privateKey - Ethereum private key in Uint8Array format\n   * @param {number} data.balance - Ethereum wallet balance\n   * @param {number} data.gasPrice - Gas price for transaction\n   */\n  constructor (data) {\n    this.address = data.address\n    this.privateKey = data.privateKey\n    this.balance = data.balance\n    this.gasPrice = data.gasPrice\n    this.defaultGasLimit = 21000\n    this.feeList = []\n  }\n  \n  /**\n   * Calculating the fee amount\n   * @param {number} customGasPrice - Amount of custom gas price\n   * @param {number} customGasLimit - Amount of custom gas limit\n   * @returns {Array} A list with the optimal and custom fee\n   */\n  \n  calcFee (customGasPrice = 0, customGasLimit = 0) {\n    this.feeList = [\n      {\n        id: 'optimal',\n        gasPrice: this.gasPrice,\n        gasLimit: this.defaultGasLimit,\n        fee: toFormatDecimal(\n          converter.wei_to_eth(this.gasPrice * this.defaultGasLimit)\n        )\n      },\n      {\n        custom: true,\n        id: 'custom',\n        gasPrice: customGasPrice,\n        gasLimit: customGasLimit,\n        fee: toFormatDecimal(\n          converter.wei_to_eth(customGasPrice * customGasLimit)\n        )\n      }\n    ]\n    \n    return this.feeList\n  }\n  \n  /**\n   * Creating a transaction\n   * @param {Object} data - Input data for a transaction\n   * @param {string} data.addressTo - Recipient address\n   * @param {number} data.amount - Transaction amount in ETH\n   * @param {Object} data.fee - Object with amount of gas price and gas limit\n   * @param {number} data.nonce - Nonce, transaction count of an account\n   * @returns {Promise<Object>} Return a raw transaction in hex to send and transaction hash\n   */\n  \n  async make (data) {\n    const {addressTo, value, fee, nonce} = data\n    const amountInWei = converter.eth_to_wei(value)\n    const surrender = this.balance - (amountInWei + fee.gasPrice * fee.gasLimit)\n    \n    if (surrender < 0) {\n      throw new CustomError('err_tx_eth_balance')\n    }\n    \n    let params = {\n      to: addressTo,\n      value: amountInWei,\n      nonce,\n      gasPrice: fee.gasPrice,\n      gasLimit: fee.gasLimit,\n      privateKey: this.privateKey\n    }\n    \n    return makeRawEthTx(params)\n  }\n  \n  get DATA () {\n    return {\n      fee: this.feeList\n    }\n  }\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/class/ETH/EthereumTx.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 183,
    "kind": "class",
    "name": "EthereumTx",
    "memberof": "src/class/ETH/EthereumTx.js",
    "static": true,
    "longname": "src/class/ETH/EthereumTx.js~EthereumTx",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/class/ETH/EthereumTx.js",
    "importStyle": "EthereumTx",
    "description": "Class EthereumTx.\nThis class is responsible for calculating the fee and generating and signing a Ethereum transaction",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 184,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/class/ETH/EthereumTx.js~EthereumTx",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/ETH/EthereumTx.js~EthereumTx#constructor",
    "access": "public",
    "description": "Create a EthereumTx",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Input data for generating a transaction or calculating a fee"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.address",
        "description": "Ethereum wallet address"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "data.privateKey",
        "description": "Ethereum private key in Uint8Array format"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.balance",
        "description": "Ethereum wallet balance"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.gasPrice",
        "description": "Gas price for transaction"
      }
    ]
  },
  {
    "__docId__": 185,
    "kind": "member",
    "name": "address",
    "memberof": "src/class/ETH/EthereumTx.js~EthereumTx",
    "static": false,
    "longname": "src/class/ETH/EthereumTx.js~EthereumTx#address",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "member",
    "name": "privateKey",
    "memberof": "src/class/ETH/EthereumTx.js~EthereumTx",
    "static": false,
    "longname": "src/class/ETH/EthereumTx.js~EthereumTx#privateKey",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 187,
    "kind": "member",
    "name": "balance",
    "memberof": "src/class/ETH/EthereumTx.js~EthereumTx",
    "static": false,
    "longname": "src/class/ETH/EthereumTx.js~EthereumTx#balance",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 188,
    "kind": "member",
    "name": "gasPrice",
    "memberof": "src/class/ETH/EthereumTx.js~EthereumTx",
    "static": false,
    "longname": "src/class/ETH/EthereumTx.js~EthereumTx#gasPrice",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 189,
    "kind": "member",
    "name": "defaultGasLimit",
    "memberof": "src/class/ETH/EthereumTx.js~EthereumTx",
    "static": false,
    "longname": "src/class/ETH/EthereumTx.js~EthereumTx#defaultGasLimit",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "member",
    "name": "feeList",
    "memberof": "src/class/ETH/EthereumTx.js~EthereumTx",
    "static": false,
    "longname": "src/class/ETH/EthereumTx.js~EthereumTx#feeList",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "calcFee",
    "memberof": "src/class/ETH/EthereumTx.js~EthereumTx",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/ETH/EthereumTx.js~EthereumTx#calcFee",
    "access": "public",
    "description": "Calculating the fee amount",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} A list with the optimal and custom fee"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "customGasPrice",
        "description": "Amount of custom gas price"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "customGasLimit",
        "description": "Amount of custom gas limit"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "A list with the optimal and custom fee"
    }
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "make",
    "memberof": "src/class/ETH/EthereumTx.js~EthereumTx",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/ETH/EthereumTx.js~EthereumTx#make",
    "access": "public",
    "description": "Creating a transaction",
    "lineNumber": 71,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} Return a raw transaction in hex to send and transaction hash"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Input data for a transaction"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.addressTo",
        "description": "Recipient address"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.amount",
        "description": "Transaction amount in ETH"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data.fee",
        "description": "Object with amount of gas price and gas limit"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.nonce",
        "description": "Nonce, transaction count of an account"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "Return a raw transaction in hex to send and transaction hash"
    }
  },
  {
    "__docId__": 194,
    "kind": "get",
    "name": "DATA",
    "memberof": "src/class/ETH/EthereumTx.js~EthereumTx",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/ETH/EthereumTx.js~EthereumTx#DATA",
    "access": "public",
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "type": {
      "types": [
        "{\"fee\": *}"
      ]
    }
  },
  {
    "__docId__": 195,
    "kind": "file",
    "name": "src/class/WalletWrapper.js",
    "content": "import Core from '@/class/Core'\nimport BitcoinSync from '@/class/BTC/BitcoinSync'\nimport EthereumSync from '@/class/ETH/EthereumSync'\nimport BitcoinCashSync from '@/class/BCH/BitcoinCashSync'\nimport BitcoinTx from '@/class/BTC/BitcoinTx'\nimport EthereumTx from '@/class/ETH/EthereumTx'\nimport BitcoinCashTx from '@/class/BCH/BitcoinCashTx'\n\n/**\n * Class WalletWrapper\n * @class\n */\n\nexport default class WalletWrapper {\n  /**\n   * Create a wallet wrapper\n   * @param {Object} params\n   * @param {Object} params.data - Input information for creating the core.\n   * Contains a method for the creation and optionally a key or mnemonics\n   * @param {Object} params.api - A set of URLs for getting information about addresses\n   */\n  \n  constructor (params) {\n    this.data = params.data\n    this.api = params.api\n    this.core = null\n    this.sync = {\n      BTC: null,\n      ETH: null,\n      BCH: null\n    }\n  }\n  \n  /**\n   * Creating a wallet core\n   * @constructor\n   */\n  \n  async Create () {\n    try {\n      this.core = new Core(this.data)\n    }\n    catch (e) {\n      throw new Error(e.message)\n    }\n  }\n  \n  /**\n   * Getting information about bitcoin or ether addresses\n   * @param {string} type - Type of synchronization method\n   * @returns {Promise<Object>} Returns object with bitcoin or ethereum synchronization information\n   * @constructor\n   */\n  \n  async Sync (type) {\n    try {\n      switch (type) {\n        case 'BTC':\n          return await this.SyncBTC()\n        case 'ETH':\n          return await this.SyncETH()\n        case 'BCH':\n          return await this.SyncBCH()\n      }\n    }\n    catch (e) {\n      throw new Error(e.message)\n    }\n  }\n  \n  /**\n   * Getting information about bitcoin addresses\n   * @returns {Promise<Object>}\n   * @constructor\n   */\n  \n  async SyncBTC () {\n    this.sync.BTC = new BitcoinSync(\n      this.core.DATA.BTC.externalNode,\n      this.core.DATA.BTC.internalNode,\n      this.api\n    )\n\n    try {\n      await this.sync.BTC.Start()\n      return this.sync.BTC.DATA\n    }\n    catch (e) {\n      console.log('SyncBTC error', e)\n    }\n  }\n  \n  /**\n   * Getting information about ethereum address\n   * @returns {Promise<Object>}\n   * @constructor\n   */\n  \n  async SyncETH () {\n    this.sync.ETH = new EthereumSync(this.core.DATA.ETH.address, this.api)\n    \n    try {\n      await this.sync.ETH.Start()\n      return this.sync.ETH.DATA\n    }\n    catch (e) {\n      console.log('SyncETH error', e)\n    }\n  }\n  \n  async SyncBCH () {\n    this.sync.BCH = new BitcoinCashSync(\n      this.core.DATA.BCH.externalNode,\n      this.core.DATA.BCH.internalNode,\n      this.api\n    )\n  \n    try {\n      await this.sync.BCH.Start()\n      return this.sync.BCH.DATA\n    }\n    catch (e) {\n      console.log('SyncETH error', e)\n    }\n  }\n  \n  /**\n   * Creating a transaction or getting information about fee\n   * @param {Object} data\n   * @param {string} data.currency - Transaction currency. 'BTC' or 'ETH'\n   * @param {string} data.method - Methods 'make' or 'calcFee'\n   * @param {Object} data.tx - Input data for the transaction\n   * @returns {Promise<Object>}\n   * @constructor\n   */\n  \n  async Transaction (data) {\n    const {currency, method, tx} = data\n    \n    switch (currency) {\n      case 'BTC':\n        return this.createBTCTx(method, tx)\n      case 'ETH':\n        return this.createETHTx(method, tx)\n      case 'BCH':\n        return this.createBCHTx(method, tx)\n      default:\n        throw new Error('Unknown txs type (currency)')\n    }\n  }\n  \n  /**\n   * Creating a bitcoin transaction\n   * @param {string} method - Method 'make' for creating a transaction and method 'calcFee' for calculating fee\n   * @param {Object} txData - Input data for the transaction\n   * @returns {Promise<Object>} Information about the transaction or fee\n   */\n  \n  async createBTCTx (method, txData) {\n    let BTCdata = {\n      unspent: this.sync.BTC.unspent,\n      balance: this.sync.BTC.balance,\n      feeList: this.sync.BTC.fee,\n      amount: txData.amount,\n      customFee: txData.customFee\n    }\n    \n    if (method === 'make') {\n      BTCdata.internalAddress = this.sync.BTC.addresses.empty.internal.address\n    }\n    \n    let tx = new BitcoinTx(BTCdata)\n    \n    switch (method) {\n      case 'make':\n        return tx.make(txData)\n      case 'calcFee':\n        return tx.calcFee(txData.size)\n      default:\n        throw new Error('Unknown btc txs method')\n    }\n  }\n  \n  /**\n   * Creating a ethereum transaction\n   * @param {string} method - Method 'make' for creating a transaction and method 'calcFee' for calculating fee\n   * @param {Object} txData - Input data for the transaction\n   * @returns {Promise<Object>} Information about the transaction or fee\n   */\n  \n  async createETHTx (method, txData) {\n    let ETHdata = {\n      address: this.sync.ETH.address,\n      gasPrice: this.sync.ETH.gasPrice,\n      balance: this.sync.ETH.balance,\n      privateKey: this.core.DATA.ETH.privateKey\n    }\n    \n    let tx = new EthereumTx(ETHdata)\n    \n    switch (method) {\n      case 'make':\n        return tx.make(txData)\n      case 'calcFee':\n        return tx.calcFee()\n      default:\n        throw new Error('Unknown eth txs method')\n    }\n  }\n  \n  async createBCHTx (method, txData) {\n    let BCHdata = {\n      unspent: this.sync.BCH.unspent,\n      balance: this.sync.BCH.balance,\n      feeList: this.sync.BCH.fee,\n      amount: txData.amount,\n      customFee: txData.customFee\n    }\n    \n    if (method === 'make') {\n      BCHdata.internalAddress = this.sync.BCH.addresses.empty.internal.address\n      BCHdata.nodes = {\n        external: this.core.DATA.BCH.externalNode,\n        internal: this.core.DATA.BCH.internalNode\n      }\n    }\n    \n    let tx = new BitcoinCashTx(BCHdata)\n    \n    switch (method) {\n      case 'make':\n        return tx.make(txData)\n      case 'calcFee':\n        return tx.calcFee(txData.size)\n      default:\n        throw new Error('Unknown BCH txs method')\n    }\n  }\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/class/WalletWrapper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 196,
    "kind": "class",
    "name": "WalletWrapper",
    "memberof": "src/class/WalletWrapper.js",
    "static": true,
    "longname": "src/class/WalletWrapper.js~WalletWrapper",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/class/WalletWrapper.js",
    "importStyle": "WalletWrapper",
    "description": "Class WalletWrapper",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 197,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/class/WalletWrapper.js~WalletWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/class/WalletWrapper.js~WalletWrapper#constructor",
    "access": "public",
    "description": "Create a wallet wrapper",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params.data",
        "description": "Input information for creating the core.\nContains a method for the creation and optionally a key or mnemonics"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params.api",
        "description": "A set of URLs for getting information about addresses"
      }
    ]
  },
  {
    "__docId__": 198,
    "kind": "member",
    "name": "data",
    "memberof": "src/class/WalletWrapper.js~WalletWrapper",
    "static": false,
    "longname": "src/class/WalletWrapper.js~WalletWrapper#data",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 199,
    "kind": "member",
    "name": "api",
    "memberof": "src/class/WalletWrapper.js~WalletWrapper",
    "static": false,
    "longname": "src/class/WalletWrapper.js~WalletWrapper#api",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 200,
    "kind": "member",
    "name": "core",
    "memberof": "src/class/WalletWrapper.js~WalletWrapper",
    "static": false,
    "longname": "src/class/WalletWrapper.js~WalletWrapper#core",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 201,
    "kind": "member",
    "name": "sync",
    "memberof": "src/class/WalletWrapper.js~WalletWrapper",
    "static": false,
    "longname": "src/class/WalletWrapper.js~WalletWrapper#sync",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "{\"BTC\": *, \"ETH\": *, \"BCH\": *}"
      ]
    }
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "Create",
    "memberof": "src/class/WalletWrapper.js~WalletWrapper",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/WalletWrapper.js~WalletWrapper#Create",
    "access": "public",
    "description": "Creating a wallet core",
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "Sync",
    "memberof": "src/class/WalletWrapper.js~WalletWrapper",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/WalletWrapper.js~WalletWrapper#Sync",
    "access": "public",
    "description": "Getting information about bitcoin or ether addresses",
    "lineNumber": 55,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} Returns object with bitcoin or ethereum synchronization information"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Type of synchronization method"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "Returns object with bitcoin or ethereum synchronization information"
    }
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "SyncBTC",
    "memberof": "src/class/WalletWrapper.js~WalletWrapper",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/WalletWrapper.js~WalletWrapper#SyncBTC",
    "access": "public",
    "description": "Getting information about bitcoin addresses",
    "lineNumber": 77,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>}"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "SyncETH",
    "memberof": "src/class/WalletWrapper.js~WalletWrapper",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/WalletWrapper.js~WalletWrapper#SyncETH",
    "access": "public",
    "description": "Getting information about ethereum address",
    "lineNumber": 99,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>}"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "SyncBCH",
    "memberof": "src/class/WalletWrapper.js~WalletWrapper",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/WalletWrapper.js~WalletWrapper#SyncBCH",
    "access": "public",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "Transaction",
    "memberof": "src/class/WalletWrapper.js~WalletWrapper",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/WalletWrapper.js~WalletWrapper#Transaction",
    "access": "public",
    "description": "Creating a transaction or getting information about fee",
    "lineNumber": 137,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>}"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.currency",
        "description": "Transaction currency. 'BTC' or 'ETH'"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.method",
        "description": "Methods 'make' or 'calcFee'"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data.tx",
        "description": "Input data for the transaction"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "createBTCTx",
    "memberof": "src/class/WalletWrapper.js~WalletWrapper",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/WalletWrapper.js~WalletWrapper#createBTCTx",
    "access": "public",
    "description": "Creating a bitcoin transaction",
    "lineNumber": 159,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} Information about the transaction or fee"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "Method 'make' for creating a transaction and method 'calcFee' for calculating fee"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "txData",
        "description": "Input data for the transaction"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "Information about the transaction or fee"
    }
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "createETHTx",
    "memberof": "src/class/WalletWrapper.js~WalletWrapper",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/WalletWrapper.js~WalletWrapper#createETHTx",
    "access": "public",
    "description": "Creating a ethereum transaction",
    "lineNumber": 191,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} Information about the transaction or fee"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "Method 'make' for creating a transaction and method 'calcFee' for calculating fee"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "txData",
        "description": "Input data for the transaction"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "Information about the transaction or fee"
    }
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "createBCHTx",
    "memberof": "src/class/WalletWrapper.js~WalletWrapper",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/class/WalletWrapper.js~WalletWrapper#createBCHTx",
    "access": "public",
    "description": null,
    "lineNumber": 211,
    "undocument": true,
    "params": [
      {
        "name": "method",
        "types": [
          "*"
        ]
      },
      {
        "name": "txData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 212,
    "kind": "file",
    "name": "src/helpers/converters.js",
    "content": "/**\n * Bitcoin and Ethereum converter\n */\n\nexport default {\n  /**\n   * Convert Satoshi to Bitcoin\n   * @param {number} sat\n   * @returns {number} btc\n   */\n  sat_to_btc (sat) {\n    if (!+sat) return 0\n    return parseFloat((+sat / Math.pow(10, 8)).toFixed(8))\n  },\n  /**\n   * Convert Bitcoin to Satoshi\n   * @param {number} btc\n   * @returns {number} sat\n   */\n  btc_to_sat (btc) {\n    if (!+btc) return 0\n    return Math.round(+btc * Math.pow(10, 8))\n  },\n  /**\n   * Convert WEI to Ethereum\n   * @param {number} wei\n   * @returns {number} eth\n   */\n  wei_to_eth (wei) {\n    if (!+wei) return 0\n    return parseFloat(+wei / Math.pow(10, 18).toFixed(8))\n  },\n  /**\n   * Convert Ethereum to WEI\n   * @param {number} eth\n   * @returns {number} wei\n   */\n  eth_to_wei (eth) {\n    if (!+eth) return 0\n    return Math.round(+eth * Math.pow(10, 18))\n  }\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/helpers/converters.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 213,
    "kind": "file",
    "name": "src/helpers/coreHelper.js",
    "content": "import * as bip39 from 'bip39'\nimport * as bitcoin from 'bitcoinjs-lib'\nimport {Transaction} from 'ethereumjs-tx'\nimport * as ethUtil from 'ethereumjs-util'\nimport * as HDkey from 'hdkey'\nimport * as utils from 'web3-utils'\nimport wif from 'wif'\nimport * as bchaddr from 'bchaddrjs'\nimport * as bitcore from 'bitcore-lib-cash'\nimport CustomError from '@/helpers/handleErrors'\n\n/**\n * Generation of mnemonics.\n * The number of words in a mnemonic depends on the length of the entropy\n * @param {number} entropyLength - The number of bits in the entropy. It can be equal to 128, 160, 192, 224 or 256 bits\n * @returns {string} - A mnemonic whose words are separated by spaces\n */\nexport function generateMnemonic (entropyLength = 128) {\n  try {\n    return bip39.generateMnemonic(entropyLength)\n  }\n  catch (e) {\n    console.log(e)\n    throw new CustomError('err_core_entropy')\n  }\n}\n\n/**\n * Converting a mnemonic to seed\n * @param {string} mnemonic - Mnemonic phrase\n * @returns {Buffer} - Seed in Uint8Array format\n */\nexport function mnemonicToSeed (mnemonic) {\n  try {\n    return bip39.mnemonicToSeedSync(mnemonic)\n  }\n  catch (e) {\n    console.log(e)\n    throw new CustomError('err_core_mnemonic')\n  }\n}\n\n/**\n * Converting a mnemonic to entropy\n * @param {string} mnemonic - Mnemonic phrase\n * @returns {string} HEX strings entropy\n */\nexport function mnemonicToEntropy (mnemonic) {\n  try {\n    return bip39.mnemonicToEntropy(mnemonic)\n  }\n  catch (e) {\n    console.log(e)\n    throw new CustomError('err_core_mnemonic')\n  }\n}\n\n/**\n * Converting a seed to hdkey (Hierarchical Deterministic Key)\n * @param {Buffer} seed - Mnemonic seed in Buffer\n * @returns {Object} hdkey object with private and public key\n */\nexport function hdFromSeed (seed) {\n  try {\n    return HDkey.fromMasterSeed(seed)\n  }\n  catch (e) {\n    console.log(e)\n    throw new CustomError('err_core_seed')\n  }\n}\n\n\n/**\n * Converting a xprv to hdkey (Hierarchical Deterministic Key)\n * @param {string} xprv - Extended private key\n * @returns {Object} hdkey object with private and public key\n */\nexport function hdFromXprv (xprv) {\n  try {\n    return HDkey.fromExtendedKey(xprv)\n  }\n  catch (e) {\n    console.log(e)\n    throw new CustomError('err_core_xprv')\n  }\n}\n\n/**\n * Getting xprv by hdkey\n * @param {Object} hd - HDkey node\n * @returns {string} Extended private key\n */\nexport function getXprv (hd) {\n  try {\n    return hd.privateExtendedKey\n  }\n  catch (e) {\n    console.log(e)\n    throw new CustomError('err_core_hdkey')\n  }\n}\n\n/**\n * Derivation of node. Getting child node by path\n * @param {Object} hd - HDkey node\n * @param {string} path - Derivation path\n * @returns {Object} - Child node\n */\n\nexport function derive (hd, path) {\n  if (!hd) {\n    throw new CustomError('err_core_derivation_hdkey')\n  }\n  \n  if (!path) {\n    throw new CustomError('err_core_derivation_path')\n  }\n  \n  let regex = new RegExp(/(^\\m\\/44\\')([\\/{1}\\d+\\'{1}]+)/mg)\n  \n  if (!regex.test(path)) {\n    throw new CustomError('err_core_derivation_path')\n  }\n  \n  try {\n    return hd.derive(path)\n  }\n  catch (e) {\n    console.log(e)\n    throw new CustomError('err_core_derivation')\n  }\n}\n\n/**\n * Getting a bitcoin address by node and child index\n * @param {Object} node - HDkey node\n * @param {number} childIndex - Index of the child node\n * @returns {string} Bitcoin address\n */\n\nexport function getBtcAddress (node, childIndex = 0) {\n  try {\n    let pubKey = node.deriveChild(childIndex).publicKey\n    \n    return bitcoin.payments.p2pkh({\n      pubkey: pubKey\n    }).address\n  }\n  catch (e) {\n    console.log(e)\n    throw new CustomError('err_core_btc_address')\n  }\n}\n\n/**\n * Getting a Ethereum private key by node\n * @param {Object} node - Ethereum node\n * @returns {Buffer} Ethereum private key in Uint8Array format\n */\n\nexport function getEthPrivateKey (node) {\n  try {\n    return node._privateKey\n  }\n  catch (e) {\n    console.log(e)\n    throw new CustomError('err_core_eth_node')\n  }\n}\n\n/**\n * Getting a Ethereum public key by private key\n * @param {Buffer} privateKey - Ethereum private key\n * @returns {Buffer} Ethereum public key in Uint8Array format\n */\n\nexport function getEthPublicKey (privateKey) {\n  try {\n    return ethUtil.privateToPublic(privateKey)\n  }\n  catch (e) {\n    console.log(e)\n    throw new CustomError('err_core_eth_private_key')\n  }\n}\n\n/**\n * Getting a Ethereum wallet address by public key\n * @param {Buffer} publicKey - Ethereum public key\n * @returns {string} Ethereum wallet address\n */\n\nexport function getEthAddress (publicKey) {\n  try {\n    let addrBuffer = ethUtil\n      .publicToAddress(publicKey)\n      .toString('hex')\n    return ethUtil.toChecksumAddress(addrBuffer).toLowerCase()\n  }\n  catch (e) {\n    console.log(e)\n    throw new CustomError('err_core_eth_public_key')\n  }\n}\n\n/**\n * Getting Ethereum wallet address by node\n * @param {Object} node - Ethereum node\n * @returns {string} Ethereum wallet address\n */\n\nexport function getEthAddressByNode (node) {\n  try {\n    let privateKey = getEthPrivateKey(node)\n    let publicKey = getEthPublicKey(privateKey)\n    return getEthAddress(publicKey)\n  }\n  catch (e) {\n    console.log(e)\n    throw new CustomError('err_core_eth_public_key')\n  }\n}\n\n/**\n * Convert a Bitcoin private key to the WIF (Wallet Import Format)\n * @param {Buffer} privateKey - Private key in Uint8Array format\n * @returns {string} Private key in WIF\n */\nexport function privateKeyToWIF (privateKey) {\n  try {\n    return wif.encode(128, privateKey, true)\n  }\n  catch (e) {\n    throw new CustomError('err_core_private_key')\n  }\n}\n\n/**\n * Calculating the transaction size by the number of inputs and outputs\n * @param {number} i - Number of inputs. By default 1\n * @param {number} o - Number of outputs. By default 2\n * @returns {number} Transaction size\n */\n\nexport function calcBtcTxSize (i = 1, o = 2) {\n  return i * 148 + o * 34 + 10\n}\n\n/**\n * Creating a raw Bitcoin transaction\n * @param {Object} data - Input data for a transaction\n * @param {Array} data.inputs - List of inputs\n * @param {Array} data.outputs - List of outputs\n * @returns {Object} Returns raw Bitcoin transaction and transaction hash\n */\n\nexport function makeRawBtcTx (data = {}) {\n  try {\n    const {inputs, outputs} = data\n    let txb = new bitcoin.TransactionBuilder()\n    \n    txb.setVersion(1)\n    \n    inputs.forEach((item) => {\n      txb.addInput(item.tx_hash_big_endian, +item.tx_output_n)\n    })\n    \n    outputs.forEach((item) => {\n      txb.addOutput(item.address, +item.value)\n    })\n    \n    inputs.forEach((item, index) => {\n      let key = bitcoin.ECPair.fromWIF(item.key)\n      txb.sign(index, key)\n    })\n    \n    let tx = txb.build()\n    let hash = tx.getId()\n    \n    return {\n      hash,\n      tx: tx.toHex()\n    }\n  }\n  catch (e) {\n    console.log(e)\n    throw new CustomError('err_tx_btc_build')\n  }\n}\n\n/**\n * Creating a raw Ethereum transaction\n * @param {Object} data - Input data for a transaction\n * @param {string} data.to - Recipient address or contract address\n * @param {number} data.value - Transaction amount\n * @param {number} data.nonce - Nonce, transaction count of an account\n * @param {number} data.gasPrice - Transaction gas price\n * @param {number} data.gasLimit - Transaction gas limit\n * @param {string} data.from - Ethereum sender address (required for ERC20 transactions)\n * @param {string} data.data - Data in hex representation (required for ERC20 transactions)\n * @param {string|Buffer} data.privateKey - Ethereum private key in hex or Buffer format\n * @returns {Object} Returns raw Ethereum transaction and transaction hash\n */\n\nexport function makeRawEthTx (data = {}) {\n  const {to, value, nonce, gasPrice, gasLimit, privateKey, chainId} = data\n  \n  if (isNaN(nonce) || isNaN(value) || isNaN(gasPrice) ||\n    isNaN(gasLimit)) {\n    throw new CustomError('err_tx_eth_invalid_params')\n  }\n  \n  if (typeof to !== 'string') {\n    throw new CustomError('err_tx_eth_invalid_params_string')\n  }\n  \n  try {\n    let params = {\n      to: to,\n      nonce: utils.toHex(parseInt(nonce)),\n      value: utils.toHex(parseInt(value)),\n      gasPrice: utils.toHex(parseInt(gasPrice)),\n      gasLimit: utils.toHex(parseInt(gasLimit)),\n      chainId: utils.toHex(1)\n    }\n    \n    if (data.hasOwnProperty('from') && data.from) {\n      params.from = data.from\n    }\n    \n    if (data.hasOwnProperty('data') && data.data) {\n      params.data = data.data\n    }\n    \n    const tx = new Transaction(params)\n    const privateKeyBuffer = ethUtil.toBuffer(privateKey)\n    \n    tx.sign(privateKeyBuffer)\n    \n    const serializedTx = tx.serialize()\n    const hash = tx.hash().toString('hex')\n    \n    return {\n      hash: `0x${ hash }`,\n      tx: `0x${ serializedTx.toString('hex') }`\n    }\n  }\n  catch (e) {\n    console.log(e)\n    throw new CustomError('err_tx_eth_build')\n  }\n}\n\n/**\n * Creating a raw Bitcoin Cash transaction\n * @param {Object} data - Input data for a transaction\n * @param {Array} data.inputs - List of inputs\n * @param {Array} data.outputs - List of outputs\n * @returns {Object} Returns raw Bitcoin Cash transaction and transaction hash\n */\n\nexport function makeRawBchTx (data = {}) {\n  try {\n    const {inputs, outputs} = data\n    const privateKeys = inputs.map(item => item.key)\n    const utxos = inputs.map(item => {\n      item.outputIndex = +item.outputIndex\n      item.satoshis = +item.satoshis\n      item.address = getCashAddress(item.address)\n      \n      return item\n    })\n    \n    const outputsInCashFormat = outputs.map(item => {\n      item.address = getCashAddress(item.address)\n      item.satoshis = +item.satoshis\n      \n      return item\n    })\n    const tx = new bitcore.Transaction()\n      .from(utxos)\n      .to(outputsInCashFormat)\n      .sign(privateKeys)\n    \n    const txData = tx.serialize()\n    \n    return {\n      tx: txData.toString('hex'),\n      hash: tx.hash\n    }\n  }\n  catch (e) {\n    console.log(e)\n    throw new CustomError('err_tx_bch_build')\n  }\n}\n\n/**\n * Convert a Bitcoin Cash address from Legacy format to CashAddr format\n * @param {string} address - Bitcoin Cash address in Legacy format\n * @returns {string} Returns Bitcoin Cash address in CashAddr format\n */\n\nexport function getCashAddress (address = \"\") {\n  try {\n    const toCashAddress = bchaddr.toCashAddress\n  \n    return toCashAddress(address)\n  } catch (e) {\n    console.log(e)\n    throw new CustomError('err_get_bch_address')\n  }\n}\n\n/**\n * Getting Bitcoin private key for address by derivation index\n * @param {Object} node - Input data for a transaction\n * @param {number} index - Derivation index\n * @returns {string} Returns Private key in WIF format\n */\n\nexport function getBtcPrivateKeyByIndex (node, index) {\n  try {\n    const key = node.deriveChild(index).privateKey\n  \n    return privateKeyToWIF(key)\n  } catch (e) {\n    throw new CustomError('err_btc_private_key_by_index')\n  }\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/helpers/coreHelper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 214,
    "kind": "function",
    "name": "generateMnemonic",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~generateMnemonic",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{generateMnemonic}",
    "description": "Generation of mnemonics.\nThe number of words in a mnemonic depends on the length of the entropy",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - A mnemonic whose words are separated by spaces"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "entropyLength",
        "description": "The number of bits in the entropy. It can be equal to 128, 160, 192, 224 or 256 bits"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "A mnemonic whose words are separated by spaces"
    }
  },
  {
    "__docId__": 215,
    "kind": "function",
    "name": "mnemonicToSeed",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~mnemonicToSeed",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{mnemonicToSeed}",
    "description": "Converting a mnemonic to seed",
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Buffer} - Seed in Uint8Array format"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "mnemonic",
        "description": "Mnemonic phrase"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": "Seed in Uint8Array format"
    }
  },
  {
    "__docId__": 216,
    "kind": "function",
    "name": "mnemonicToEntropy",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~mnemonicToEntropy",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{mnemonicToEntropy}",
    "description": "Converting a mnemonic to entropy",
    "lineNumber": 48,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} HEX strings entropy"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "mnemonic",
        "description": "Mnemonic phrase"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "HEX strings entropy"
    }
  },
  {
    "__docId__": 217,
    "kind": "function",
    "name": "hdFromSeed",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~hdFromSeed",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{hdFromSeed}",
    "description": "Converting a seed to hdkey (Hierarchical Deterministic Key)",
    "lineNumber": 63,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} hdkey object with private and public key"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "seed",
        "description": "Mnemonic seed in Buffer"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "hdkey object with private and public key"
    }
  },
  {
    "__docId__": 218,
    "kind": "function",
    "name": "hdFromXprv",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~hdFromXprv",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{hdFromXprv}",
    "description": "Converting a xprv to hdkey (Hierarchical Deterministic Key)",
    "lineNumber": 79,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} hdkey object with private and public key"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "xprv",
        "description": "Extended private key"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "hdkey object with private and public key"
    }
  },
  {
    "__docId__": 219,
    "kind": "function",
    "name": "getXprv",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~getXprv",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{getXprv}",
    "description": "Getting xprv by hdkey",
    "lineNumber": 94,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Extended private key"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "hd",
        "description": "HDkey node"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Extended private key"
    }
  },
  {
    "__docId__": 220,
    "kind": "function",
    "name": "derive",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~derive",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{derive}",
    "description": "Derivation of node. Getting child node by path",
    "lineNumber": 111,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - Child node"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "hd",
        "description": "HDkey node"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "Derivation path"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Child node"
    }
  },
  {
    "__docId__": 221,
    "kind": "function",
    "name": "getBtcAddress",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~getBtcAddress",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{getBtcAddress}",
    "description": "Getting a bitcoin address by node and child index",
    "lineNumber": 142,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Bitcoin address"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "HDkey node"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "childIndex",
        "description": "Index of the child node"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Bitcoin address"
    }
  },
  {
    "__docId__": 222,
    "kind": "function",
    "name": "getEthPrivateKey",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~getEthPrivateKey",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{getEthPrivateKey}",
    "description": "Getting a Ethereum private key by node",
    "lineNumber": 162,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Buffer} Ethereum private key in Uint8Array format"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "Ethereum node"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": "Ethereum private key in Uint8Array format"
    }
  },
  {
    "__docId__": 223,
    "kind": "function",
    "name": "getEthPublicKey",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~getEthPublicKey",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{getEthPublicKey}",
    "description": "Getting a Ethereum public key by private key",
    "lineNumber": 178,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Buffer} Ethereum public key in Uint8Array format"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "privateKey",
        "description": "Ethereum private key"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": "Ethereum public key in Uint8Array format"
    }
  },
  {
    "__docId__": 224,
    "kind": "function",
    "name": "getEthAddress",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~getEthAddress",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{getEthAddress}",
    "description": "Getting a Ethereum wallet address by public key",
    "lineNumber": 194,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Ethereum wallet address"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "publicKey",
        "description": "Ethereum public key"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Ethereum wallet address"
    }
  },
  {
    "__docId__": 225,
    "kind": "function",
    "name": "getEthAddressByNode",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~getEthAddressByNode",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{getEthAddressByNode}",
    "description": "Getting Ethereum wallet address by node",
    "lineNumber": 213,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Ethereum wallet address"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "Ethereum node"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Ethereum wallet address"
    }
  },
  {
    "__docId__": 226,
    "kind": "function",
    "name": "privateKeyToWIF",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~privateKeyToWIF",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{privateKeyToWIF}",
    "description": "Convert a Bitcoin private key to the WIF (Wallet Import Format)",
    "lineNumber": 230,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Private key in WIF"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "privateKey",
        "description": "Private key in Uint8Array format"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Private key in WIF"
    }
  },
  {
    "__docId__": 227,
    "kind": "function",
    "name": "calcBtcTxSize",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~calcBtcTxSize",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{calcBtcTxSize}",
    "description": "Calculating the transaction size by the number of inputs and outputs",
    "lineNumber": 246,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Transaction size"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "i",
        "description": "Number of inputs. By default 1"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": "Number of outputs. By default 2"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Transaction size"
    }
  },
  {
    "__docId__": 228,
    "kind": "function",
    "name": "makeRawBtcTx",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~makeRawBtcTx",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{makeRawBtcTx}",
    "description": "Creating a raw Bitcoin transaction",
    "lineNumber": 258,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} Returns raw Bitcoin transaction and transaction hash"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Input data for a transaction"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "data.inputs",
        "description": "List of inputs"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "data.outputs",
        "description": "List of outputs"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Returns raw Bitcoin transaction and transaction hash"
    }
  },
  {
    "__docId__": 229,
    "kind": "function",
    "name": "makeRawEthTx",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~makeRawEthTx",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{makeRawEthTx}",
    "description": "Creating a raw Ethereum transaction",
    "lineNumber": 306,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} Returns raw Ethereum transaction and transaction hash"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Input data for a transaction"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.to",
        "description": "Recipient address or contract address"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.value",
        "description": "Transaction amount"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.nonce",
        "description": "Nonce, transaction count of an account"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.gasPrice",
        "description": "Transaction gas price"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.gasLimit",
        "description": "Transaction gas limit"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.from",
        "description": "Ethereum sender address (required for ERC20 transactions)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.data",
        "description": "Data in hex representation (required for ERC20 transactions)"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "data.privateKey",
        "description": "Ethereum private key in hex or Buffer format"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Returns raw Ethereum transaction and transaction hash"
    }
  },
  {
    "__docId__": 230,
    "kind": "function",
    "name": "makeRawBchTx",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~makeRawBchTx",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{makeRawBchTx}",
    "description": "Creating a raw Bitcoin Cash transaction",
    "lineNumber": 363,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} Returns raw Bitcoin Cash transaction and transaction hash"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Input data for a transaction"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "data.inputs",
        "description": "List of inputs"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "data.outputs",
        "description": "List of outputs"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Returns raw Bitcoin Cash transaction and transaction hash"
    }
  },
  {
    "__docId__": 231,
    "kind": "function",
    "name": "getCashAddress",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~getCashAddress",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{getCashAddress}",
    "description": "Convert a Bitcoin Cash address from Legacy format to CashAddr format",
    "lineNumber": 405,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Returns Bitcoin Cash address in CashAddr format"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "address",
        "description": "Bitcoin Cash address in Legacy format"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Returns Bitcoin Cash address in CashAddr format"
    }
  },
  {
    "__docId__": 232,
    "kind": "function",
    "name": "getBtcPrivateKeyByIndex",
    "memberof": "src/helpers/coreHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/coreHelper.js~getBtcPrivateKeyByIndex",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/coreHelper.js",
    "importStyle": "{getBtcPrivateKeyByIndex}",
    "description": "Getting Bitcoin private key for address by derivation index",
    "lineNumber": 423,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Returns Private key in WIF format"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "Input data for a transaction"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "Derivation index"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Returns Private key in WIF format"
    }
  },
  {
    "__docId__": 233,
    "kind": "file",
    "name": "src/helpers/errors.js",
    "content": "export default {\n  err_core_mnemonic: 'Wrong mnemonic phrase. Please, check the spelling and try again',\n  err_core_mnemonic_length: 'Bad word count for mnemonic',\n  err_core_mnemonic_empty: 'Invalid mnemonic',\n  err_core_seed: 'Invalid seed',\n  err_core_entropy: 'Bad entropy',\n  err_core_xprv: 'Invalid xprv',\n  err_core_hdkey: 'Invalid hdkey',\n  err_core_btc_node: 'Error generating address. Check BTC node',\n  err_core_eth_node: 'Error generating ETH private key. Check ETH node',\n  err_core_eth_private_key: 'Error generating ETH public key. Check ETH private key',\n  err_core_eth_public_key: 'Error generating ETH address. Check ETH public key',\n  err_core_derivation: 'Problem with derivation. Check node and derivation path',\n  err_core_derivation_hdkey: 'HDkey is required',\n  err_core_derivation_path: 'Invalid derivation path',\n  err_core_derivation_range: 'Bad range. Check from/to params',\n  err_core_private_key: 'Invalid private key. Expect buffer',\n  err_tx_btc_balance: 'Insufficient balance',\n  err_tx_btc_build: 'BTC transaction failed. Check all parameters',\n  err_tx_btc_amount: 'Invalid amount. Amount must by a Number',\n  err_tx_btc_fee: 'Invalid fee. Fee must by a Number',\n  err_tx_bch_amount: 'Invalid amount. Amount must by a Number',\n  err_tx_bch_fee: 'Invalid fee. Fee must by a Number',\n  err_tx_bch_balance: 'Insufficient balance',\n  err_tx_bch_build: 'BCH transaction failed. Check all parameters',\n  err_tx_eth_balance: 'Insufficient balance',\n  err_tx_eth_address: 'Invalid ethereum address',\n  err_tx_eth_build: 'ETH transaction failed. Check all parameters',\n  err_tx_eth_invalid_params: 'Invalid params. Nonce, value, gas price and gas limit have to be a number',\n  err_tx_eth_invalid_params_string: 'Invalid params. Parameters \"to\" must be string based',\n  err_wallet_exist: 'Wallet not created. Use this method after creating a wallet',\n  err_wallet_api: 'Api is not found! Please, use the setter apiEndpoint to install',\n  err_wallet_api_type: 'Api must be an object!',\n  err_btc_private_key_by_index: 'Key generation problem. Check the node and derivation index',\n  err_get_bch_address: 'Problem with address conversion. Check the format of the source address'\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/helpers/errors.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 234,
    "kind": "file",
    "name": "src/helpers/handleErrors.js",
    "content": "import errors from '@/helpers/errors'\n\n/**\n * Custom error object.\n * By the error code it substitutes the desired message from object 'errors'\n * @extends Error\n */\n\nclass CustomError extends Error {\n  constructor(code) {\n    super(code)\n    this.name = 'CustomError'\n    this.message = errors.hasOwnProperty(code) ? `${code}: ${errors[code]}` : 'Uncaught error'\n  \n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor)\n    } else {\n      this.stack = (new Error()).stack\n    }\n  }\n}\n\nexport default CustomError\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/helpers/handleErrors.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 235,
    "kind": "class",
    "name": "CustomError",
    "memberof": "src/helpers/handleErrors.js",
    "static": true,
    "longname": "src/helpers/handleErrors.js~CustomError",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/handleErrors.js",
    "importStyle": "CustomError",
    "description": "Custom error object.\nBy the error code it substitutes the desired message from object 'errors'",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 236,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/helpers/handleErrors.js~CustomError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/helpers/handleErrors.js~CustomError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 237,
    "kind": "member",
    "name": "name",
    "memberof": "src/helpers/handleErrors.js~CustomError",
    "static": false,
    "longname": "src/helpers/handleErrors.js~CustomError#name",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "member",
    "name": "message",
    "memberof": "src/helpers/handleErrors.js~CustomError",
    "static": false,
    "longname": "src/helpers/handleErrors.js~CustomError#message",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 239,
    "kind": "member",
    "name": "stack",
    "memberof": "src/helpers/handleErrors.js~CustomError",
    "static": false,
    "longname": "src/helpers/handleErrors.js~CustomError#stack",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 240,
    "kind": "file",
    "name": "src/helpers/requestHandleErrors.js",
    "content": "/**\n * Handling requests\n * @param response\n * @returns {any | Promise<any>} Response decoded in json or error if the request failed\n */\nexport default function (response) {\n  if (response.ok) {\n    return response.json()\n  } else {\n    throw new Error(response.statusText)\n  }\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/helpers/requestHandleErrors.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 241,
    "kind": "function",
    "name": "requestHandleErrors",
    "memberof": "src/helpers/requestHandleErrors.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/requestHandleErrors.js~requestHandleErrors",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/requestHandleErrors.js",
    "importStyle": "requestHandleErrors",
    "description": "Handling requests",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{any | Promise<any>} Response decoded in json or error if the request failed"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "response",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any ",
        " Promise<any>"
      ],
      "spread": false,
      "description": "Response decoded in json or error if the request failed"
    }
  },
  {
    "__docId__": 242,
    "kind": "file",
    "name": "src/helpers/toFormatDecimal.js",
    "content": "/**\n * Formatting numbers with the number of digits after the decimal point\n * @param {number|string} value - Value for formatting\n * @param {number} x - Number of digits after the decimal point\n * @param {boolean} floor - type of rounding\n * @returns {string} Formatted value or 0 if no value is specified\n */\nexport default function (value, x = 8, floor = false) {\n  value = parseFloat(value)\n  \n  if (!value) return '0'\n  \n  let num = 0\n  \n  if (floor) {\n    let pow = Math.pow(10, 8)\n    num = Math.floor(value * pow) / pow\n  } else {\n    num = value.toFixed(x)\n  }\n  \n  while (num[num.length - 1] === '0') {\n    num = num.slice(0, -1)\n  }\n  \n  if (num[num.length - 1] === '.') {\n    num = num.slice(0, -1)\n  }\n  \n  return num\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/helpers/toFormatDecimal.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 243,
    "kind": "function",
    "name": "toFormatDecimal",
    "memberof": "src/helpers/toFormatDecimal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/helpers/toFormatDecimal.js~toFormatDecimal",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/helpers/toFormatDecimal.js",
    "importStyle": "toFormatDecimal",
    "description": "Formatting numbers with the number of digits after the decimal point",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Formatted value or 0 if no value is specified"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Value for formatting"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Number of digits after the decimal point"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "floor",
        "description": "type of rounding"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Formatted value or 0 if no value is specified"
    }
  },
  {
    "__docId__": 244,
    "kind": "file",
    "name": "src/index.js",
    "content": "import Wrapper from '@/Wrapper'\nimport CustomError from '@/helpers/handleErrors'\nimport {makeRawBtcTx, makeRawEthTx, makeRawBchTx} from '@/helpers/coreHelper'\n\nexport {default as converter} from '@/helpers/converters'\nexport {default as toDecimal} from '@/helpers/toFormatDecimal'\nexport {makeRawBtcTx, makeRawEthTx, makeRawBchTx}\n\n/**\n * Class Wallet\n * @class\n */\n\nexport default class Wallet {\n  /**\n   * Create a Wallet\n   * @param {Object} api - A set of URLs for getting information about addresses\n   */\n  constructor (api) {\n    this.wrapper = new Wrapper()\n    this.core = null\n    this.sync = {}\n    this.api = {\n      bitcoin: '',\n      bitcoinFee: '',\n      ethereum: '',\n      bitcoinCash: ''\n    }\n    this._apiReady = false\n    \n    if (api) {\n      this.setApiEndpoint(api)\n    }\n  }\n  \n  /**\n   * Creating a new wallet\n   *\n   * @param {number} count - Mnemonic words count\n   * @returns {Promise<Object>} An object with core's information\n   * @returns {string} core.mnemonic - Imported mnemonic\n   * @returns {string} core.xprv - xprv key\n   * @returns {string} core.from - A import type\n   * @returns {Object} core.BTC - A BTC core that contains internal and external nodes, private and public keys and the first external user address\n   * @returns {Object} core.ETH - A ETH core that contains node, private and public keys and user address\n   */\n  \n  async createNew (count = 12) {\n    let data = {\n      data: {\n        from: 'new',\n        count: count\n      },\n      api: this.api\n    }\n    \n    this.core = await this.wrapper.method('create', data)\n    \n    return this.core\n  }\n  \n  /**\n   * Creating a wallet by mnemonic\n   *\n   * @param {string} mnemonic\n   * @returns {Promise<Object>} An object with core's information\n   * @returns {string} core.mnemonic - Imported mnemonic\n   * @returns {string} core.xprv - xprv key\n   * @returns {string} core.from - A import type\n   * @returns {Object} core.BTC - A BTC core that contains internal and external nodes, private and public keys and the first external user address\n   * @returns {Object} core.ETH - A ETH core that contains node, private and public keys and user address\n   */\n  \n  async createByMnemonic (mnemonic = '') {\n    if (!mnemonic) {\n      throw new CustomError('err_core_mnemonic_empty')\n    }\n    \n    let data = {\n      data: {\n        from: 'mnemonic',\n        mnemonic: mnemonic\n      },\n      api: this.api\n    }\n    \n    this.core = await this.wrapper.method('create', data)\n    \n    return this.core\n  }\n  \n  /**\n   * Creating a wallet by xprv key\n   *\n   * @param {string} key - BIP32 Root Key\n   * @returns {Promise<Object>} An object with core's information\n   * @returns {string} core.mnemonic - Imported mnemonic\n   * @returns {string} core.xprv - xprv key\n   * @returns {string} core.from - A import type\n   * @returns {Object} core.BTC - A BTC core that contains internal and external nodes, private and public keys and the first external user address\n   * @returns {Object} core.ETH - A ETH core that contains node, private and public keys and user address\n   */\n  \n  async createByKey (key = '') {\n    if (!key) {\n      throw new CustomError('err_core_xprv')\n    }\n    \n    let data = {\n      data: {\n        from: 'xprv',\n        key: key\n      },\n      api: this.api\n    }\n    \n    this.core = await this.wrapper.method('create', data)\n    \n    return this.core\n  }\n  \n  /**\n   * The method starts synchronization of BTC and ETH\n   *\n   * @returns {Promise<Object>} An object with sync's information\n   * @returns {Object} sync.BTC - The BTC object contains the addresses used, the list of transactions, the unspent list, the balance in Satoshi, the latest block and the list of commissions\n   * @returns {Object} sync.ETH - The ETH object contains the ethereum address, the balance in wei, the list of transactions and gas price\n   */\n  \n  async syncAll () {\n    if (!this._apiReady) {\n      throw new CustomError('err_wallet_api')\n    }\n    \n    await Promise.all([\n      this.syncBTC(),\n      this.syncETH(),\n      this.syncBCH()\n    ])\n    \n    return this.sync\n  }\n  \n  /**\n   * The method returns node by derivation path\n   *\n   * @returns {Promise<Object>} Returns object with node information. Every child node contains the following parameters:\n   * derivation path, private key in WIF format, public key in hex, btc and eth address\n   * @returns {Object} data\n   * @returns {number} sync.from - Top of the derivation range\n   * @returns {number} sync.to - End of the derivation range\n   * @returns {Object} sync.path - Derivation path. It is contains required parameters (purpose, coin, account) and optional (change, index)\n   */\n  \n  async getChildNodes (data) {\n    if (!this.core) {\n      throw new CustomError('err_wallet_exist')\n    }\n    \n    return await this.wrapper.method('getNodes', data)\n  }\n  \n  /**\n   * The method starts synchronization of BTC\n   *\n   * @returns {Promise<Object>} Returns object with bitcoin synchronization information\n   * @returns {Object} sync\n   * @returns {Object} sync.addresses - Lists of internal, external and empty bitcoin address\n   * @returns {Array} sync.transactions - The list of bitcoin transactions\n   * @returns {Array} sync.unspent - The list of unspents addresses\n   * @returns {number} sync.balance - Bitcoin balance in Satoshi\n   * @returns {number} sync.latestBlock - The last block of the bitcoin blockchain\n   * @returns {Array} sync.fee - The list of fee per byte\n   */\n  \n  async syncBTC () {\n    if (!this._apiReady) {\n      throw new CustomError('err_wallet_api')\n    }\n    \n    this.sync.BTC = await this.wrapper.method('sync', 'BTC')\n    \n    return this.sync.BTC\n  }\n  \n  /**\n   * The method starts synchronization of ETH\n   *\n   * @returns {Promise<Object>} Returns object with ethereum synchronization information\n   * @returns {Object} sync\n   * @returns {string} sync.address - Ethereum wallet address\n   * @returns {number} sync.balance - Ethereum balance in wei\n   * @returns {Array} sync.transactions - The list of ethereum transactions\n   * @returns {number} sync.gasPrice - Gas price\n   */\n  \n  async syncETH () {\n    if (!this._apiReady) {\n      throw new CustomError('err_wallet_api')\n    }\n    \n    this.sync.ETH = await this.wrapper.method('sync', 'ETH')\n    \n    return this.sync.ETH\n  }\n  \n  async syncBCH () {\n    if (!this._apiReady) {\n      throw new CustomError('err_wallet_api')\n    }\n    \n    this.sync.BCH = await this.wrapper.method('sync', 'BCH')\n    \n    return this.sync.BCH\n  }\n  \n  /**\n   * The method returns a raw BTC transaction\n   *\n   * @param {Object} data\n   * @param {string} data.inputs - List of transaction inputs. Input contains the following parameters:\n   * transaction hash, output n, address, value, script and private key in WIF format\n   * @param {string} data.outputs - List of transaction outpus. Output contains the following parameters: address and value\n   * @returns {Promise<Object>} Returns object with transaction hash and raw transaction data\n   * @returns {string} hash - Transaction hash\n   * @returns {string} tx - Raw Bitcoin transaction\n   */\n  \n  async makeRawBtcTx (data) {\n    return await makeRawBtcTx(data)\n  }\n  \n  /**\n   * The method returns a raw BCH transaction\n   *\n   * @param {Object} data\n   * @param {string} data.inputs - List of transaction inputs. Input contains the following parameters:\n   * transaction hash, output n, address, value in satoshis, script and private key in WIF format\n   * @param {string} data.outputs - List of transaction outpus. Output contains the following parameters: address and value in satoshis\n   * @returns {Promise<Object>} Returns object with transaction hash and raw transaction data\n   * @returns {string} hash - Transaction hash\n   * @returns {string} tx - Raw Bitcoin Cash transaction\n   */\n  \n  async makeRawBchTx (data) {\n    return await makeRawBchTx(data)\n  }\n  \n  /**\n   * The method returns a raw ETH transaction\n   *\n   * @param {Object} data\n   * @param {string} data.address - Ethereum address\n   * @param {number} data.amount - The transaction's amount in wei\n   * @param {number} data.nonce - The transaction's nonce\n   * @param {number} data.gasPrice - The transaction's gas price in wei\n   * @param {number} data.gasLimit - The transaction's gas limit\n   * @param {string} data.privateKey - Private key of ether wallet in hex\n   * @returns {Promise<Object>} Returns object with transaction hash and raw transaction data\n   * @returns {string} hash - Transaction hash\n   * @returns {string} tx - Raw Ethereum transaction\n   */\n  \n  async makeRawEthTx (data) {\n    return await makeRawEthTx(data)\n  }\n  \n  /**\n   * This method generates a list of transaction fees for the selected currency\n   * @param {Object} params\n   * @param {Object} params.currency - Selected currency. BTC or ETH\n   * @param {Object} params.amount - Amount of transaction\n   * @param {Object} params.customFee - Custom fee per byte\n   * @param {Object} params.size - Transaction size. Relevant for bitcoin transactions\n   * @returns {Promise<Array>} The list of transaction fees\n   */\n  \n  async calculateFee (params) {\n    if (!this._apiReady) {\n      throw new CustomError('err_wallet_api')\n    }\n    \n    let {currency, amount, customFee, size} = params\n    \n    return await this.wrapper.method('transaction', {\n      method: 'calcFee',\n      currency: currency,\n      tx: {\n        amount: amount,\n        customFee: customFee,\n        size: size\n      }\n    })\n  }\n  \n  /**\n   * Wrapper for the compilation of transactions of bitcoin and ether\n   * @param {Object} data\n   * @param {string} data.currency - Transaction currency\n   * @param {Object} data.tx\n   * @param {string} data.tx.addressTo - Recipient address\n   * @param {number} data.tx.amount - Transaction amount\n   * @param {number} data.tx.fee - Transaction fee\n   * @returns {Promise<Object>}\n   * @returns {string} hash - Transaction hash\n   * @returns {string} tx - Raw bitcoin or ethereum transaction\n   */\n  \n  async makeTransaction (data) {\n    if (!this._apiReady) {\n      throw new CustomError('err_wallet_api')\n    }\n    \n    let params = {\n      method: 'make',\n      currency: data.currency,\n      tx: data.tx\n    }\n    \n    return await this.wrapper.method('transaction', params)\n  }\n  \n  /**\n   * Sets the API Endpoint\n   *\n   * @type {Object} api\n   * @param {string} api.bitcoin - Url address of bitcoin endpoint\n   * @param {string} api.bitcoinFee - Url address of bitcoin fee endpoint\n   * @param {string} api.ethereum - Url address of ethereum endpoint\n   * @param {string} api.bitcoinCash - Url address of bitcoin cash endpoint\n   */\n  \n  setApiEndpoint (api) {\n    if (!api || typeof api !== 'object' || Array.isArray(api)) {\n      throw new CustomError('err_wallet_api_type')\n    }\n    \n    for (let key in this.api) {\n      if (api.hasOwnProperty(key)) {\n        this.api[key] = api[key]\n      } else {\n        throw Error(`Api must be contains ${ key } value`)\n      }\n    }\n    this._apiReady = true\n  }\n  \n  get Core () {\n    return this.core\n  }\n  \n  get getSyncBTC () {\n    return this.sync.BTC\n  }\n  \n  get getSyncETH () {\n    return this.sync.ETH\n  }\n  \n  get getApiState () {\n    return this._apiReady\n  }\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 245,
    "kind": "class",
    "name": "Wallet",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~Wallet",
    "access": "public",
    "export": true,
    "importPath": "lumi-web-core/src/index.js",
    "importStyle": "Wallet",
    "description": "Class Wallet",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 246,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/index.js~Wallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Wallet#constructor",
    "access": "public",
    "description": "Create a Wallet",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "api",
        "description": "A set of URLs for getting information about addresses"
      }
    ]
  },
  {
    "__docId__": 247,
    "kind": "member",
    "name": "wrapper",
    "memberof": "src/index.js~Wallet",
    "static": false,
    "longname": "src/index.js~Wallet#wrapper",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 248,
    "kind": "member",
    "name": "core",
    "memberof": "src/index.js~Wallet",
    "static": false,
    "longname": "src/index.js~Wallet#core",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 249,
    "kind": "member",
    "name": "sync",
    "memberof": "src/index.js~Wallet",
    "static": false,
    "longname": "src/index.js~Wallet#sync",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 250,
    "kind": "member",
    "name": "api",
    "memberof": "src/index.js~Wallet",
    "static": false,
    "longname": "src/index.js~Wallet#api",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "{\"bitcoin\": *, \"bitcoinFee\": *, \"ethereum\": *, \"bitcoinCash\": *}"
      ]
    }
  },
  {
    "__docId__": 251,
    "kind": "member",
    "name": "_apiReady",
    "memberof": "src/index.js~Wallet",
    "static": false,
    "longname": "src/index.js~Wallet#_apiReady",
    "access": "private",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 252,
    "kind": "method",
    "name": "createNew",
    "memberof": "src/index.js~Wallet",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/index.js~Wallet#createNew",
    "access": "public",
    "description": "Creating a new wallet",
    "lineNumber": 48,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} An object with core's information"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} core.mnemonic - Imported mnemonic"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} core.xprv - xprv key"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} core.from - A import type"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Object} core.BTC - A BTC core that contains internal and external nodes, private and public keys and the first external user address"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Object} core.ETH - A ETH core that contains node, private and public keys and user address"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "count",
        "description": "Mnemonic words count"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "core.ETH - A ETH core that contains node, private and public keys and user address"
    }
  },
  {
    "__docId__": 254,
    "kind": "method",
    "name": "createByMnemonic",
    "memberof": "src/index.js~Wallet",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/index.js~Wallet#createByMnemonic",
    "access": "public",
    "description": "Creating a wallet by mnemonic",
    "lineNumber": 74,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} An object with core's information"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} core.mnemonic - Imported mnemonic"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} core.xprv - xprv key"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} core.from - A import type"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Object} core.BTC - A BTC core that contains internal and external nodes, private and public keys and the first external user address"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Object} core.ETH - A ETH core that contains node, private and public keys and user address"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "mnemonic",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "core.ETH - A ETH core that contains node, private and public keys and user address"
    }
  },
  {
    "__docId__": 256,
    "kind": "method",
    "name": "createByKey",
    "memberof": "src/index.js~Wallet",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/index.js~Wallet#createByKey",
    "access": "public",
    "description": "Creating a wallet by xprv key",
    "lineNumber": 104,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} An object with core's information"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} core.mnemonic - Imported mnemonic"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} core.xprv - xprv key"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} core.from - A import type"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Object} core.BTC - A BTC core that contains internal and external nodes, private and public keys and the first external user address"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Object} core.ETH - A ETH core that contains node, private and public keys and user address"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "BIP32 Root Key"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "core.ETH - A ETH core that contains node, private and public keys and user address"
    }
  },
  {
    "__docId__": 258,
    "kind": "method",
    "name": "syncAll",
    "memberof": "src/index.js~Wallet",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/index.js~Wallet#syncAll",
    "access": "public",
    "description": "The method starts synchronization of BTC and ETH",
    "lineNumber": 130,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} An object with sync's information"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Object} sync.BTC - The BTC object contains the addresses used, the list of transactions, the unspent list, the balance in Satoshi, the latest block and the list of commissions"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Object} sync.ETH - The ETH object contains the ethereum address, the balance in wei, the list of transactions and gas price"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "sync.ETH - The ETH object contains the ethereum address, the balance in wei, the list of transactions and gas price"
    },
    "params": []
  },
  {
    "__docId__": 259,
    "kind": "method",
    "name": "getChildNodes",
    "memberof": "src/index.js~Wallet",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/index.js~Wallet#getChildNodes",
    "access": "public",
    "description": "The method returns node by derivation path",
    "lineNumber": 155,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} Returns object with node information. Every child node contains the following parameters:\nderivation path, private key in WIF format, public key in hex, btc and eth address"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Object} data"
      },
      {
        "tagName": "@returns",
        "tagValue": "{number} sync.from - Top of the derivation range"
      },
      {
        "tagName": "@returns",
        "tagValue": "{number} sync.to - End of the derivation range"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Object} sync.path - Derivation path. It is contains required parameters (purpose, coin, account) and optional (change, index)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "sync.path - Derivation path. It is contains required parameters (purpose, coin, account) and optional (change, index)"
    },
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 260,
    "kind": "method",
    "name": "syncBTC",
    "memberof": "src/index.js~Wallet",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/index.js~Wallet#syncBTC",
    "access": "public",
    "description": "The method starts synchronization of BTC",
    "lineNumber": 176,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} Returns object with bitcoin synchronization information"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Object} sync"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Object} sync.addresses - Lists of internal, external and empty bitcoin address"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Array} sync.transactions - The list of bitcoin transactions"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Array} sync.unspent - The list of unspents addresses"
      },
      {
        "tagName": "@returns",
        "tagValue": "{number} sync.balance - Bitcoin balance in Satoshi"
      },
      {
        "tagName": "@returns",
        "tagValue": "{number} sync.latestBlock - The last block of the bitcoin blockchain"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Array} sync.fee - The list of fee per byte"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "sync.fee - The list of fee per byte"
    },
    "params": []
  },
  {
    "__docId__": 261,
    "kind": "method",
    "name": "syncETH",
    "memberof": "src/index.js~Wallet",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/index.js~Wallet#syncETH",
    "access": "public",
    "description": "The method starts synchronization of ETH",
    "lineNumber": 197,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} Returns object with ethereum synchronization information"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Object} sync"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} sync.address - Ethereum wallet address"
      },
      {
        "tagName": "@returns",
        "tagValue": "{number} sync.balance - Ethereum balance in wei"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Array} sync.transactions - The list of ethereum transactions"
      },
      {
        "tagName": "@returns",
        "tagValue": "{number} sync.gasPrice - Gas price"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "sync.gasPrice - Gas price"
    },
    "params": []
  },
  {
    "__docId__": 262,
    "kind": "method",
    "name": "syncBCH",
    "memberof": "src/index.js~Wallet",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/index.js~Wallet#syncBCH",
    "access": "public",
    "description": null,
    "lineNumber": 207,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 263,
    "kind": "method",
    "name": "makeRawBtcTx",
    "memberof": "src/index.js~Wallet",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/index.js~Wallet#makeRawBtcTx",
    "access": "public",
    "description": "The method returns a raw BTC transaction",
    "lineNumber": 229,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} Returns object with transaction hash and raw transaction data"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} hash - Transaction hash"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} tx - Raw Bitcoin transaction"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.inputs",
        "description": "List of transaction inputs. Input contains the following parameters:\ntransaction hash, output n, address, value, script and private key in WIF format"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.outputs",
        "description": "List of transaction outpus. Output contains the following parameters: address and value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "tx - Raw Bitcoin transaction"
    }
  },
  {
    "__docId__": 264,
    "kind": "method",
    "name": "makeRawBchTx",
    "memberof": "src/index.js~Wallet",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/index.js~Wallet#makeRawBchTx",
    "access": "public",
    "description": "The method returns a raw BCH transaction",
    "lineNumber": 245,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} Returns object with transaction hash and raw transaction data"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} hash - Transaction hash"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} tx - Raw Bitcoin Cash transaction"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.inputs",
        "description": "List of transaction inputs. Input contains the following parameters:\ntransaction hash, output n, address, value in satoshis, script and private key in WIF format"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.outputs",
        "description": "List of transaction outpus. Output contains the following parameters: address and value in satoshis"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "tx - Raw Bitcoin Cash transaction"
    }
  },
  {
    "__docId__": 265,
    "kind": "method",
    "name": "makeRawEthTx",
    "memberof": "src/index.js~Wallet",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/index.js~Wallet#makeRawEthTx",
    "access": "public",
    "description": "The method returns a raw ETH transaction",
    "lineNumber": 264,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} Returns object with transaction hash and raw transaction data"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} hash - Transaction hash"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} tx - Raw Ethereum transaction"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.address",
        "description": "Ethereum address"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.amount",
        "description": "The transaction's amount in wei"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.nonce",
        "description": "The transaction's nonce"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.gasPrice",
        "description": "The transaction's gas price in wei"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.gasLimit",
        "description": "The transaction's gas limit"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.privateKey",
        "description": "Private key of ether wallet in hex"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "tx - Raw Ethereum transaction"
    }
  },
  {
    "__docId__": 266,
    "kind": "method",
    "name": "calculateFee",
    "memberof": "src/index.js~Wallet",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/index.js~Wallet#calculateFee",
    "access": "public",
    "description": "This method generates a list of transaction fees for the selected currency",
    "lineNumber": 278,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array>} The list of transaction fees"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params.currency",
        "description": "Selected currency. BTC or ETH"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params.amount",
        "description": "Amount of transaction"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params.customFee",
        "description": "Custom fee per byte"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params.size",
        "description": "Transaction size. Relevant for bitcoin transactions"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array>"
      ],
      "spread": false,
      "description": "The list of transaction fees"
    }
  },
  {
    "__docId__": 267,
    "kind": "method",
    "name": "makeTransaction",
    "memberof": "src/index.js~Wallet",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/index.js~Wallet#makeTransaction",
    "access": "public",
    "description": "Wrapper for the compilation of transactions of bitcoin and ether",
    "lineNumber": 309,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>}"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} hash - Transaction hash"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} tx - Raw bitcoin or ethereum transaction"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.currency",
        "description": "Transaction currency"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data.tx",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.tx.addressTo",
        "description": "Recipient address"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.tx.amount",
        "description": "Transaction amount"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "data.tx.fee",
        "description": "Transaction fee"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "tx - Raw bitcoin or ethereum transaction"
    }
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "setApiEndpoint",
    "memberof": "src/index.js~Wallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Wallet#setApiEndpoint",
    "access": "public",
    "description": "Sets the API Endpoint",
    "lineNumber": 333,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "api.bitcoin",
        "description": "Url address of bitcoin endpoint"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "api.bitcoinFee",
        "description": "Url address of bitcoin fee endpoint"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "api.ethereum",
        "description": "Url address of ethereum endpoint"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "api.bitcoinCash",
        "description": "Url address of bitcoin cash endpoint"
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    },
    "return": null
  },
  {
    "__docId__": 270,
    "kind": "get",
    "name": "Core",
    "memberof": "src/index.js~Wallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Wallet#Core",
    "access": "public",
    "description": null,
    "lineNumber": 348,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 271,
    "kind": "get",
    "name": "getSyncBTC",
    "memberof": "src/index.js~Wallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Wallet#getSyncBTC",
    "access": "public",
    "description": null,
    "lineNumber": 352,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 272,
    "kind": "get",
    "name": "getSyncETH",
    "memberof": "src/index.js~Wallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Wallet#getSyncETH",
    "access": "public",
    "description": null,
    "lineNumber": 356,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 273,
    "kind": "get",
    "name": "getApiState",
    "memberof": "src/index.js~Wallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Wallet#getApiState",
    "access": "public",
    "description": null,
    "lineNumber": 360,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 274,
    "kind": "file",
    "name": "src/workers/wallet.worker.js",
    "content": "import WalletWrapper from '@/class/WalletWrapper'\n\nlet Wrapper = {}\n\n/**\n * Creating a wallet core\n *\n * @param {Object} payload - Data for creating a core. Include in the creation method and mnemonic or key\n * @param {number} id - Promise id\n * @returns {Promise<Object>} Returns information about the core\n */\n\nasync function create (payload, id) {\n  try {\n    Wrapper = new WalletWrapper(payload)\n    await Wrapper.Create()\n    postMessage({\n      id,\n      payload: Wrapper.core.DATA\n    })\n  }\n  catch (e) {\n    postMessage({\n      id,\n      error: e.message\n    })\n  }\n}\n\n/**\n * Creating a transaction or getting fee\n *\n * @param payload - Transaction method and input data for the transaction\n * @param id - Promise id\n * @returns {Promise<Object>} Returns information about the success or failure of sending a transaction.\n * Or it returns the fee list\n */\n\nasync function transaction (payload, id) {\n  try {\n    let txs = await Wrapper.Transaction(payload)\n    postMessage({\n      id,\n      payload: txs\n    })\n  }\n  catch (e) {\n    postMessage({\n      id,\n      error: e.message\n    })\n  }\n}\n\n/**\n * Handler that runs the main wallet methods.\n * Methods such as create, sync, transaction and getNodes\n * @param e - event. Get parameters id and payload from the e.data object\n * @returns {Promise<Object>} Returns a data set that depends on the specific method\n */\n\n/* eslint-disable no-undef */\nonmessage = async (e) => {\n  const {id, payload} = e.data\n  \n  if (\n    !payload ||\n    !payload.hasOwnProperty('method') ||\n    !payload.hasOwnProperty('value')\n  ) {\n    postMessage({\n      id,\n      payload: 'error'\n    })\n    return\n  }\n  \n  switch (payload.method) {\n    case 'create':\n      return await create(payload.value, id)\n    case 'sync':\n      const syncRes = await Wrapper.Sync(payload.value)\n      postMessage({\n        id,\n        payload: syncRes\n      })\n      break\n    case 'transaction':\n      return transaction(payload.value, id)\n    case 'getNodes':\n      const nodes = await Wrapper.core.getChildNodes(payload.value)\n      postMessage({\n        id,\n        payload: nodes\n      })\n      break\n    default:\n      postMessage({\n        id,\n        payload: 'worker error'\n      })\n  }\n}\n",
    "static": true,
    "longname": "/Users/user/work/lumi-web-core/src/workers/wallet.worker.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 275,
    "kind": "variable",
    "name": "Wrapper",
    "memberof": "src/workers/wallet.worker.js",
    "static": true,
    "longname": "src/workers/wallet.worker.js~Wrapper",
    "access": "public",
    "export": false,
    "importPath": "lumi-web-core/src/workers/wallet.worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 276,
    "kind": "function",
    "name": "create",
    "memberof": "src/workers/wallet.worker.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/workers/wallet.worker.js~create",
    "access": "public",
    "export": false,
    "importPath": "lumi-web-core/src/workers/wallet.worker.js",
    "importStyle": null,
    "description": "Creating a wallet core",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} Returns information about the core"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "payload",
        "description": "Data for creating a core. Include in the creation method and mnemonic or key"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Promise id"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "Returns information about the core"
    },
    "ignore": true
  },
  {
    "__docId__": 277,
    "kind": "function",
    "name": "transaction",
    "memberof": "src/workers/wallet.worker.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/workers/wallet.worker.js~transaction",
    "access": "public",
    "export": false,
    "importPath": "lumi-web-core/src/workers/wallet.worker.js",
    "importStyle": null,
    "description": "Creating a transaction or getting fee",
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} Returns information about the success or failure of sending a transaction.\nOr it returns the fee list"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "payload",
        "description": "Transaction method and input data for the transaction"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Promise id"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "Returns information about the success or failure of sending a transaction.\nOr it returns the fee list"
    },
    "ignore": true
  },
  {
    "kind": "index",
    "content": "[![License](https://img.shields.io/badge/license-MIT-green.svg?style=flat)](https://mit-license.org)\n[![NPM](https://img.shields.io/npm/v/lumi-web-core.svg)](https://www.npmjs.org/package/lumi-web-core)\n\n![lumicore](https://user-images.githubusercontent.com/63342220/80406279-7c663380-88cc-11ea-8b06-07825767b288.png)\n\n# LumiCore\nThe LumiCore library is an implementation of tools for working with Bitcoin, Ethereum and Bitcoin Cash. It allows to create and work with mnemonic following the BIP39 standard, to run the private/public keys derivation tree following the BIP44 standard and sign transactions.\n\n> Work of this module has been tested in applications at the Vue.js. You can find it [here](https://github.com/lumiwallet/lumi-web-core-app).\n\n**Note**: Node version >= 10.19.0\n\n## Installation\nYou can install the package via npm\n``` console\nnpm install lumi-web-core\n```\nOr via yarn:\n``` console\nyarn add lumi-web-core\n```\n\n## Usage\n\n> **Warning!** Do not use the mnemonic, keys, and addresses provided in this readme for real transactions!\n>\n### Create/import\nImport the module and create a new class:\n``` js\n// typical import\nimport Wallet from 'lumi-web-core'\n\nconst WALLET = new Wallet()\n```\nYou can create a new wallet by calling the method createNew(count). Count is the number of words for the new mnemonic.\nBy default it is 12. It can be also  12, 15, 18, 21, and 24 words.\n``` js\n// Create a new wallet\nconst CORE = await WALLET.createNew(15)\n```\nYou can create a wallet based on an existing mnemonic, where mnemonic is a string consisting of words and spaces:\n``` js\n// Create wallet by new mnemonic\n    const CORE = await WALLET.createByMnemonic('ramp grief anger ... olive main into throw')\n```\nOr xprv key: \n``` js\n// Create wallet by xprv key\nconst CORE = await WALLET.createByKey('xprv9s21ZrQH143K49Xa838YbhNq...VtL5sLB9JsijRG51jHjuUSDVfDXPh5PFYNTqQ')\n```\nExample of the returned core:\n``` js\n{\n    mnemonic: \"ramp grief anger ... olive main into throw\",\n    xprv: \"xprv9s21ZrQH143K49Xa838YbhNq...VtL5sLB9JsijRG51jHjuUSDVfDXPh5PFYNTqQ\",\n    from: \"mnemonic\",\n    hdkey: Object,\n    seed: Uint8Array(64),\n    seedInHex: \"1f53c65842ed3d0c54052f7f7315dbd9dcb...4af426ffb27234a0a571c44e29c1f4d1b181082e62d0a39\",\n    BTC: {\n        address: \"1MS1SjQ1...vrLhajoGLfiV\"\n        externalNode: Object,\n        internalNode: Object,\n    },\n    ETH: {\n        address: \"0x06c019a17...aa6d949c947a02\"\n        node: Object,\n        privateKey: Uint8Array(32),\n        publicKey: Uint8Array(64),\n    },\n    BCH: {\n        address: \"1657JTP...5pFAA75HrD\",\n        externalNode:Object\n        internalNode: Object\n    }\n}\n```\n\n### Derivation\nYou can get information about a child node using the method `getChildNodes`.\n``` js\nconst data = {\n  path: 'm/44'/0'/0'/0',\n  from: 0,\n  to: 20\n}\n\nconst info = await WALLET.getChildNodes(data)\n=> {\n    node: {\n        privateExtendedKey: \"xprvA1CHKT9koKiKuhkeZ6XJxWXEQ1r...va4RtZfFmdYaQeNW72vX9q2DjMo3fsJwxCtkrVXyo2QP8\",\n        publicExtendedKey: \"xpub6EBdixgedhGd8Bq7f84KKeTxx3gYWQ...bn9YVZ8PVXb6tTnCWTorLQPKqRggvdzyHH1TkoR7vuz\"\n    },\n    list: [\n        {\n            path: \"m/44'/0'/0'/0/0\",\n            privateKey: \"KzwMNQ93Dt96Qg...mRpaBCmEXGH2Lpgr2dGZsV\",\n            publicKey: \"023b693fa7fa22e505...4cc450a463c024ab1e3ec526ba\",\n            btcAddress: \"1aVZBbZW...U6WvQF6w36H7\",\n            ethAddress: \"0xcd1594ae...a74ceb13d889d\",\n            bchAddress: \"bitcoincash:qzwpal7...c3djs884x56y9qptzl\"\n        },\n        ...\n    ]\n}\n\n```\n`path` this is a string with a derivation path. The path should begin with `m/44'`.\n`from` is top of the range derivation\n`to` is end of the range derivation\n\n### Creating a BTC transaction\nTo create a Bitcoin transaction you need to send a set of inputs and outputs to the `makeRawBtcTx` method:\n``` js\nconst data = {\n    inputs: [\n        {\n            addr: \"1BYRALP...ypWzTQE8BkEL\",\n            value: 10000,\n            n: 0,\n            script: \"76a91473a2...07d0bff2aee345ac88ac\",\n            hash: \"de06df091735...afd145eecfcd5649634e1d5221\",\n            key: 'L3YFJ4cBDYhZ...bzqgSUxLjTAorR5Kc47mP6x1D'\n        },\n        {\n            addr: \"1BYRALPU...kLypWzTQE8BkEL\",\n            value: 10000,\n            n: 0,\n            script: \"76a91473a2...7d0bff2aee345ac88ac\",\n            hash: \"47e497fd8f6f4...5c2043e0a3c7ee0463cbc68e9\",\n            key: 'L3YFJ4cBDYhZ...xLjTAorR5Kc4AorR5K7mP6x1D'\n        }\n      ],\n      outputs: [\n        {\n          address: '1NuABwx...5V5tiXpshAWb8W',\n          value: 15000\n        }\n        {\n          address: '1PbQ36GvG...nimPD7gHPQFk3Nu',\n          value: 5000\n        }\n      ]\n}\n\nconst btc_tx = await WALLET.makeRawBtcTx(data)\n```\nWhen the transaction is created successfully, an object with the transaction hash and raw tx data is returned\n``` js\nbtc_tx => {\n    hash: '6b4a00f9fd4e5c263b5af65fed0...14cafb97e0f5738cb4a8717',\n    tx: '010000000221521d4e634956cdcfee45d1afbe79080a...04f3d76f2c65501976a914fbf7f38b23308227a308fffff88ac00000000'\n}\n```\n\n### Creating an ETH transaction\nTo make a Ethereum transaction you need to fill in the following params:\n``` js\nconst data = {\n  nonce: 280,\n  amount: 100000000000000,\n  address: '0x1e8d99d2278...d89983e2920df33b485',\n  gasPrice: 19950000002,\n  gasLimit: 21000,\n  privateKey: '0xd27c8544f946bd2a5456...d174e64e4a03030917bb8313'\n}\n\nconst eth_tx = await WALLET.makeRawEthTx(data)\n```\n\nWhen the transaction is created successfully, an object with the transaction hash and raw tx data is returned\n``` js\neth_tx => {\n    hash: '0xcb3869c19f2462a572a5ff13...d67ca71c181452e52a698d035209',\n    tx: '0xf86c8201188504a51cd782825208...6df4207768a01789b726296195a956ceb3dbe73798'\n}\n```\n\n### Creating a BCH transaction\nTo create a Bitcoin Cash transaction you need to send a set of inputs and outputs to the `makeRawBchTx` method:\n``` js\nconst data = {\n    inputs: [\n        {\n            address: \"bitcoincash:qzq29...rfavhxrhwvgm49vlhq\",\n            outputIndex: 1,\n            satoshis: 604909,\n            script: \"76a91480a2a2...81a7acb98777388ac\",\n            txId: \"0488b0c6678e527...5307ce7ddaa8cbc986e616\",\n            key: \"KxMvzeEuGyrBRo...mfR9uzU6bAuc6kyXTmN8h\"\n        }\n      ],\n      outputs: [\n        {\n            address: \"bitcoincash:qzdss...rfpnawutm9vlrh7wdcj\",\n            satoshis: 100000\n        },\n        {\n            address: \"bitcoincash:qr30f7...23hykq2fu3axuxec3g6c6\",\n            satoshis: 504231\n        }\n      ]\n}\n\nconst bch_tx = await WALLET.makeRawBchTx(data)\n```\nAddresses included in inputs and outputs can be CashAddr format or Legacy format.\nWhen the transaction is created successfully, an object with the transaction hash and raw tx data is returned\n``` js\nbtc_tx => {\n    hash: 'ac5cd881770c28aad990...5d181df4b7d5a9acfec3bdf',\n    tx: '020000000116e686c9cba8da7dce075...edac9eff87677eccaa372580a4f23d3788ac00000000'\n}\n```\n\nFor more information, see the [docs](https://lumiwallet.github.io/lumi-web-core/).\n\n## Nist testing\nTesting [documentation](./nist/README.md).\n\n## Created using\n* [bip39](https://github.com/bitcoinjs/bip39)\n* [bip39-checker](https://github.com/jcalfee/bip39-checker)\n* [bitcoinjs-lib](https://github.com/bitcoinjs/bitcoinjs-lib)\n* [ethereumjs-tx](https://github.com/ethereumjs/ethereumjs-vm/tree/master/packages/tx)\n* [ethereumjs-util](https://github.com/ethereumjs/ethereumjs-util)\n* [hdkey](https://github.com/cryptocoinjs/hdkey)\n* [web3-utils](https://github.com/ethereum/web3.js)\n* [wif](https://github.com/bitcoinjs/wif)\n* [worker-loader](https://github.com/webpack-contrib/worker-loader)\n* [bitcore-lib-cash](https://github.com/bitpay/bitcore/tree/master/packages/bitcore-lib-cash)\n* [bchaddrjs](https://github.com/ealmansi/bchaddrjs)\n## License\n\nLumiCore is available under the MIT license. See the [LICENSE](LICENSE) file for more info.\n",
    "longname": "/Users/user/work/lumi-web-core/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"lumi-web-core\",\n  \"description\": \"Lumi Wallet Core - Web Version\",\n  \"version\": \"1.2.0\",\n  \"author\": {\n    \"name\": \"vikowl\",\n    \"email\": \"vd@lumiwallet.com\"\n  },\n  \"main\": \"dist/index.js\",\n  \"license\": \"MIT\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/lumiwallet/lumi-web-core\"\n  },\n  \"homepage\": \"https://github.com/lumiwallet/lumi-web-core\",\n  \"keywords\": [\n    \"lumi\",\n    \"crypto\",\n    \"wallet\",\n    \"client-side\",\n    \"web\",\n    \"app\"\n  ],\n  \"bugs\": {\n    \"url\": \"https://github.com/lumiwallet/lumi-web-core/issues\"\n  },\n  \"dependencies\": {\n    \"@babel/runtime\": \"^7.11.2\",\n    \"bchaddrjs\": \"^0.4.9\",\n    \"bip39\": \"^3.0.2\",\n    \"bip39-checker\": \"^1.1.7\",\n    \"bitcoinjs-lib\": \"^5.1.10\",\n    \"bitcore-lib-cash\": \"^8.22.0\",\n    \"ethereumjs-tx\": \"^2.1.2\",\n    \"ethereumjs-util\": \"^6.2.1\",\n    \"hdkey\": \"^1.1.2\",\n    \"web3-utils\": \"^1.2.11\",\n    \"wif\": \"^2.0.6\",\n    \"worker-loader\": \"^2.0.0\"\n  },\n  \"devDependencies\": {\n    \"@babel/cli\": \"^7.11.6\",\n    \"@babel/core\": \"^7.11.6\",\n    \"@babel/plugin-syntax-dynamic-import\": \"^7.8.3\",\n    \"@babel/plugin-transform-runtime\": \"^7.11.5\",\n    \"@babel/preset-env\": \"^7.11.5\",\n    \"babel-loader\": \"^8.1.0\",\n    \"babel-plugin-module-resolver\": \"^4.0.0\",\n    \"commitizen\": \"^4.2.1\",\n    \"cz-conventional-changelog\": \"^3.2.0\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^6.8.0\",\n    \"eslint-plugin-import\": \"^2.22.0\",\n    \"eslint-plugin-promise\": \"^4.2.1\",\n    \"eslint-plugin-sonarjs\": \"^0.5.0\",\n    \"eslint-plugin-standard\": \"^4.0.1\",\n    \"randombytes\": \"^2.1.0\",\n    \"webpack\": \"^4.44.1\"\n  },\n  \"engines\": {\n    \"node\": \">= 10.19.0\"\n  },\n  \"files\": [\n    \"dist/\"\n  ],\n  \"scripts\": {\n    \"clean\": \"rm -rf dist\",\n    \"lint\": \"eslint --ext .js --ignore-path .gitignore .\",\n    \"precommit\": \"npm run lint\",\n    \"commit\": \"git-cz\",\n    \"prepare\": \"npm run build\",\n    \"build\": \"npm run clean && babel src --out-dir dist\",\n    \"test\": \"\",\n    \"preversion\": \"npm run test\",\n    \"version\": \"npm run clean && npm run build\",\n    \"postversion\": \"git add . && git push && git push --tags\",\n    \"doc\": \"esdoc -c ./.esdoc\"\n  },\n  \"config\": {\n    \"commitizen\": {\n      \"path\": \"./node_modules/cz-conventional-changelog\"\n    }\n  }\n}\n",
    "longname": "/Users/user/work/lumi-web-core/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]